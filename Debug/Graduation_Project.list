
Graduation_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044dc  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bd0  0800460c  0800460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061dc  080061dc  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  080061dc  080061dc  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061dc  080061dc  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061dc  080061dc  000161dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061e0  080061e0  000161e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080061e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000121c  2000009c  08006280  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012b8  08006280  000212b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003d9c  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013d2  00000000  00000000  00023e61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000530  00000000  00000000  00025238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000420  00000000  00000000  00025768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020de  00000000  00000000  00025b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003f11  00000000  00000000  00027c66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009250  00000000  00000000  0002bb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00034dc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001804  00000000  00000000  00034e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000009c 	.word	0x2000009c
 800014c:	00000000 	.word	0x00000000
 8000150:	080045f4 	.word	0x080045f4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000a0 	.word	0x200000a0
 800016c:	080045f4 	.word	0x080045f4

08000170 <__aeabi_fmul>:
 8000170:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000174:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000178:	bf1e      	ittt	ne
 800017a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800017e:	ea92 0f0c 	teqne	r2, ip
 8000182:	ea93 0f0c 	teqne	r3, ip
 8000186:	d06f      	beq.n	8000268 <__aeabi_fmul+0xf8>
 8000188:	441a      	add	r2, r3
 800018a:	ea80 0c01 	eor.w	ip, r0, r1
 800018e:	0240      	lsls	r0, r0, #9
 8000190:	bf18      	it	ne
 8000192:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000196:	d01e      	beq.n	80001d6 <__aeabi_fmul+0x66>
 8000198:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800019c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a4:	fba0 3101 	umull	r3, r1, r0, r1
 80001a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001b0:	bf3e      	ittt	cc
 80001b2:	0049      	lslcc	r1, r1, #1
 80001b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001b8:	005b      	lslcc	r3, r3, #1
 80001ba:	ea40 0001 	orr.w	r0, r0, r1
 80001be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001c2:	2afd      	cmp	r2, #253	; 0xfd
 80001c4:	d81d      	bhi.n	8000202 <__aeabi_fmul+0x92>
 80001c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ce:	bf08      	it	eq
 80001d0:	f020 0001 	biceq.w	r0, r0, #1
 80001d4:	4770      	bx	lr
 80001d6:	f090 0f00 	teq	r0, #0
 80001da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001de:	bf08      	it	eq
 80001e0:	0249      	lsleq	r1, r1, #9
 80001e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ea:	3a7f      	subs	r2, #127	; 0x7f
 80001ec:	bfc2      	ittt	gt
 80001ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001f6:	4770      	bxgt	lr
 80001f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001fc:	f04f 0300 	mov.w	r3, #0
 8000200:	3a01      	subs	r2, #1
 8000202:	dc5d      	bgt.n	80002c0 <__aeabi_fmul+0x150>
 8000204:	f112 0f19 	cmn.w	r2, #25
 8000208:	bfdc      	itt	le
 800020a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800020e:	4770      	bxle	lr
 8000210:	f1c2 0200 	rsb	r2, r2, #0
 8000214:	0041      	lsls	r1, r0, #1
 8000216:	fa21 f102 	lsr.w	r1, r1, r2
 800021a:	f1c2 0220 	rsb	r2, r2, #32
 800021e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000222:	ea5f 0031 	movs.w	r0, r1, rrx
 8000226:	f140 0000 	adc.w	r0, r0, #0
 800022a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800022e:	bf08      	it	eq
 8000230:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000234:	4770      	bx	lr
 8000236:	f092 0f00 	teq	r2, #0
 800023a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800023e:	bf02      	ittt	eq
 8000240:	0040      	lsleq	r0, r0, #1
 8000242:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000246:	3a01      	subeq	r2, #1
 8000248:	d0f9      	beq.n	800023e <__aeabi_fmul+0xce>
 800024a:	ea40 000c 	orr.w	r0, r0, ip
 800024e:	f093 0f00 	teq	r3, #0
 8000252:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0049      	lsleq	r1, r1, #1
 800025a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800025e:	3b01      	subeq	r3, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xe6>
 8000262:	ea41 010c 	orr.w	r1, r1, ip
 8000266:	e78f      	b.n	8000188 <__aeabi_fmul+0x18>
 8000268:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800026c:	ea92 0f0c 	teq	r2, ip
 8000270:	bf18      	it	ne
 8000272:	ea93 0f0c 	teqne	r3, ip
 8000276:	d00a      	beq.n	800028e <__aeabi_fmul+0x11e>
 8000278:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800027c:	bf18      	it	ne
 800027e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000282:	d1d8      	bne.n	8000236 <__aeabi_fmul+0xc6>
 8000284:	ea80 0001 	eor.w	r0, r0, r1
 8000288:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f090 0f00 	teq	r0, #0
 8000292:	bf17      	itett	ne
 8000294:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000298:	4608      	moveq	r0, r1
 800029a:	f091 0f00 	teqne	r1, #0
 800029e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002a2:	d014      	beq.n	80002ce <__aeabi_fmul+0x15e>
 80002a4:	ea92 0f0c 	teq	r2, ip
 80002a8:	d101      	bne.n	80002ae <__aeabi_fmul+0x13e>
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	d10f      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002ae:	ea93 0f0c 	teq	r3, ip
 80002b2:	d103      	bne.n	80002bc <__aeabi_fmul+0x14c>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	bf18      	it	ne
 80002b8:	4608      	movne	r0, r1
 80002ba:	d108      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002bc:	ea80 0001 	eor.w	r0, r0, r1
 80002c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002cc:	4770      	bx	lr
 80002ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_drsub>:
 80002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__adddf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_dsub>:
 80002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e4 <__adddf3>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ee:	ea94 0f05 	teq	r4, r5
 80002f2:	bf08      	it	eq
 80002f4:	ea90 0f02 	teqeq	r0, r2
 80002f8:	bf1f      	itttt	ne
 80002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030a:	f000 80e2 	beq.w	80004d2 <__adddf3+0x1ee>
 800030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000316:	bfb8      	it	lt
 8000318:	426d      	neglt	r5, r5
 800031a:	dd0c      	ble.n	8000336 <__adddf3+0x52>
 800031c:	442c      	add	r4, r5
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	ea82 0000 	eor.w	r0, r2, r0
 800032a:	ea83 0101 	eor.w	r1, r3, r1
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	2d36      	cmp	r5, #54	; 0x36
 8000338:	bf88      	it	hi
 800033a:	bd30      	pophi	{r4, r5, pc}
 800033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x70>
 800034e:	4240      	negs	r0, r0
 8000350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000360:	d002      	beq.n	8000368 <__adddf3+0x84>
 8000362:	4252      	negs	r2, r2
 8000364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000368:	ea94 0f05 	teq	r4, r5
 800036c:	f000 80a7 	beq.w	80004be <__adddf3+0x1da>
 8000370:	f1a4 0401 	sub.w	r4, r4, #1
 8000374:	f1d5 0e20 	rsbs	lr, r5, #32
 8000378:	db0d      	blt.n	8000396 <__adddf3+0xb2>
 800037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037e:	fa22 f205 	lsr.w	r2, r2, r5
 8000382:	1880      	adds	r0, r0, r2
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	fa03 f20e 	lsl.w	r2, r3, lr
 800038c:	1880      	adds	r0, r0, r2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	4159      	adcs	r1, r3
 8000394:	e00e      	b.n	80003b4 <__adddf3+0xd0>
 8000396:	f1a5 0520 	sub.w	r5, r5, #32
 800039a:	f10e 0e20 	add.w	lr, lr, #32
 800039e:	2a01      	cmp	r2, #1
 80003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a4:	bf28      	it	cs
 80003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	18c0      	adds	r0, r0, r3
 80003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b8:	d507      	bpl.n	80003ca <__adddf3+0xe6>
 80003ba:	f04f 0e00 	mov.w	lr, #0
 80003be:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ce:	d31b      	bcc.n	8000408 <__adddf3+0x124>
 80003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d4:	d30c      	bcc.n	80003f0 <__adddf3+0x10c>
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e0:	f104 0401 	add.w	r4, r4, #1
 80003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003ec:	f080 809a 	bcs.w	8000524 <__adddf3+0x240>
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	bf08      	it	eq
 80003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fa:	f150 0000 	adcs.w	r0, r0, #0
 80003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000402:	ea41 0105 	orr.w	r1, r1, r5
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800040c:	4140      	adcs	r0, r0
 800040e:	eb41 0101 	adc.w	r1, r1, r1
 8000412:	3c01      	subs	r4, #1
 8000414:	bf28      	it	cs
 8000416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041a:	d2e9      	bcs.n	80003f0 <__adddf3+0x10c>
 800041c:	f091 0f00 	teq	r1, #0
 8000420:	bf04      	itt	eq
 8000422:	4601      	moveq	r1, r0
 8000424:	2000      	moveq	r0, #0
 8000426:	fab1 f381 	clz	r3, r1
 800042a:	bf08      	it	eq
 800042c:	3320      	addeq	r3, #32
 800042e:	f1a3 030b 	sub.w	r3, r3, #11
 8000432:	f1b3 0220 	subs.w	r2, r3, #32
 8000436:	da0c      	bge.n	8000452 <__adddf3+0x16e>
 8000438:	320c      	adds	r2, #12
 800043a:	dd08      	ble.n	800044e <__adddf3+0x16a>
 800043c:	f102 0c14 	add.w	ip, r2, #20
 8000440:	f1c2 020c 	rsb	r2, r2, #12
 8000444:	fa01 f00c 	lsl.w	r0, r1, ip
 8000448:	fa21 f102 	lsr.w	r1, r1, r2
 800044c:	e00c      	b.n	8000468 <__adddf3+0x184>
 800044e:	f102 0214 	add.w	r2, r2, #20
 8000452:	bfd8      	it	le
 8000454:	f1c2 0c20 	rsble	ip, r2, #32
 8000458:	fa01 f102 	lsl.w	r1, r1, r2
 800045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000460:	bfdc      	itt	le
 8000462:	ea41 010c 	orrle.w	r1, r1, ip
 8000466:	4090      	lslle	r0, r2
 8000468:	1ae4      	subs	r4, r4, r3
 800046a:	bfa2      	ittt	ge
 800046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000470:	4329      	orrge	r1, r5
 8000472:	bd30      	popge	{r4, r5, pc}
 8000474:	ea6f 0404 	mvn.w	r4, r4
 8000478:	3c1f      	subs	r4, #31
 800047a:	da1c      	bge.n	80004b6 <__adddf3+0x1d2>
 800047c:	340c      	adds	r4, #12
 800047e:	dc0e      	bgt.n	800049e <__adddf3+0x1ba>
 8000480:	f104 0414 	add.w	r4, r4, #20
 8000484:	f1c4 0220 	rsb	r2, r4, #32
 8000488:	fa20 f004 	lsr.w	r0, r0, r4
 800048c:	fa01 f302 	lsl.w	r3, r1, r2
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	fa21 f304 	lsr.w	r3, r1, r4
 8000498:	ea45 0103 	orr.w	r1, r5, r3
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f1c4 040c 	rsb	r4, r4, #12
 80004a2:	f1c4 0220 	rsb	r2, r4, #32
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 f304 	lsl.w	r3, r1, r4
 80004ae:	ea40 0003 	orr.w	r0, r0, r3
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f094 0f00 	teq	r4, #0
 80004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c6:	bf06      	itte	eq
 80004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004cc:	3401      	addeq	r4, #1
 80004ce:	3d01      	subne	r5, #1
 80004d0:	e74e      	b.n	8000370 <__adddf3+0x8c>
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf18      	it	ne
 80004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004dc:	d029      	beq.n	8000532 <__adddf3+0x24e>
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	d005      	beq.n	80004f6 <__adddf3+0x212>
 80004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ee:	bf04      	itt	eq
 80004f0:	4619      	moveq	r1, r3
 80004f2:	4610      	moveq	r0, r2
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea91 0f03 	teq	r1, r3
 80004fa:	bf1e      	ittt	ne
 80004fc:	2100      	movne	r1, #0
 80004fe:	2000      	movne	r0, #0
 8000500:	bd30      	popne	{r4, r5, pc}
 8000502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000506:	d105      	bne.n	8000514 <__adddf3+0x230>
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	4149      	adcs	r1, r1
 800050c:	bf28      	it	cs
 800050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000518:	bf3c      	itt	cc
 800051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051e:	bd30      	popcc	{r4, r5, pc}
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800052c:	f04f 0000 	mov.w	r0, #0
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf1a      	itte	ne
 8000538:	4619      	movne	r1, r3
 800053a:	4610      	movne	r0, r2
 800053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000540:	bf1c      	itt	ne
 8000542:	460b      	movne	r3, r1
 8000544:	4602      	movne	r2, r0
 8000546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054a:	bf06      	itte	eq
 800054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000550:	ea91 0f03 	teqeq	r1, r3
 8000554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	bf00      	nop

0800055c <__aeabi_ui2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f04f 0500 	mov.w	r5, #0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e750      	b.n	800041c <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_i2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000594:	bf48      	it	mi
 8000596:	4240      	negmi	r0, r0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e73e      	b.n	800041c <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_f2d>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ae:	bf1f      	itttt	ne
 80005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005bc:	4770      	bxne	lr
 80005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c2:	bf08      	it	eq
 80005c4:	4770      	bxeq	lr
 80005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ca:	bf04      	itt	eq
 80005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e71c      	b.n	800041c <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aed8 	beq.w	80003ca <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6bd      	b.n	80003ca <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_dmul>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065e:	bf1d      	ittte	ne
 8000660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000664:	ea94 0f0c 	teqne	r4, ip
 8000668:	ea95 0f0c 	teqne	r5, ip
 800066c:	f000 f8de 	bleq	800082c <__aeabi_dmul+0x1dc>
 8000670:	442c      	add	r4, r5
 8000672:	ea81 0603 	eor.w	r6, r1, r3
 8000676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000682:	bf18      	it	ne
 8000684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000690:	d038      	beq.n	8000704 <__aeabi_dmul+0xb4>
 8000692:	fba0 ce02 	umull	ip, lr, r0, r2
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a6:	f04f 0600 	mov.w	r6, #0
 80006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ae:	f09c 0f00 	teq	ip, #0
 80006b2:	bf18      	it	ne
 80006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c4:	d204      	bcs.n	80006d0 <__aeabi_dmul+0x80>
 80006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ca:	416d      	adcs	r5, r5
 80006cc:	eb46 0606 	adc.w	r6, r6, r6
 80006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e8:	bf88      	it	hi
 80006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ee:	d81e      	bhi.n	800072e <__aeabi_dmul+0xde>
 80006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f4:	bf08      	it	eq
 80006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fa:	f150 0000 	adcs.w	r0, r0, #0
 80006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000708:	ea46 0101 	orr.w	r1, r6, r1
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000718:	bfc2      	ittt	gt
 800071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000722:	bd70      	popgt	{r4, r5, r6, pc}
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000728:	f04f 0e00 	mov.w	lr, #0
 800072c:	3c01      	subs	r4, #1
 800072e:	f300 80ab 	bgt.w	8000888 <__aeabi_dmul+0x238>
 8000732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000736:	bfde      	ittt	le
 8000738:	2000      	movle	r0, #0
 800073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd70      	pople	{r4, r5, r6, pc}
 8000740:	f1c4 0400 	rsb	r4, r4, #0
 8000744:	3c20      	subs	r4, #32
 8000746:	da35      	bge.n	80007b4 <__aeabi_dmul+0x164>
 8000748:	340c      	adds	r4, #12
 800074a:	dc1b      	bgt.n	8000784 <__aeabi_dmul+0x134>
 800074c:	f104 0414 	add.w	r4, r4, #20
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f305 	lsl.w	r3, r0, r5
 8000758:	fa20 f004 	lsr.w	r0, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	fa21 f604 	lsr.w	r6, r1, r4
 8000774:	eb42 0106 	adc.w	r1, r2, r6
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 040c 	rsb	r4, r4, #12
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f304 	lsl.w	r3, r0, r4
 8000790:	fa20 f005 	lsr.w	r0, r0, r5
 8000794:	fa01 f204 	lsl.w	r2, r1, r4
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	f141 0100 	adc.w	r1, r1, #0
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f1c4 0520 	rsb	r5, r4, #32
 80007b8:	fa00 f205 	lsl.w	r2, r0, r5
 80007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c0:	fa20 f304 	lsr.w	r3, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea43 0302 	orr.w	r3, r3, r2
 80007cc:	fa21 f004 	lsr.w	r0, r1, r4
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	fa21 f204 	lsr.w	r2, r1, r4
 80007d8:	ea20 0002 	bic.w	r0, r0, r2
 80007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f094 0f00 	teq	r4, #0
 80007f0:	d10f      	bne.n	8000812 <__aeabi_dmul+0x1c2>
 80007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f6:	0040      	lsls	r0, r0, #1
 80007f8:	eb41 0101 	adc.w	r1, r1, r1
 80007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3c01      	subeq	r4, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1a6>
 8000806:	ea41 0106 	orr.w	r1, r1, r6
 800080a:	f095 0f00 	teq	r5, #0
 800080e:	bf18      	it	ne
 8000810:	4770      	bxne	lr
 8000812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	eb43 0303 	adc.w	r3, r3, r3
 800081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3d01      	subeq	r5, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1c6>
 8000826:	ea43 0306 	orr.w	r3, r3, r6
 800082a:	4770      	bx	lr
 800082c:	ea94 0f0c 	teq	r4, ip
 8000830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000834:	bf18      	it	ne
 8000836:	ea95 0f0c 	teqne	r5, ip
 800083a:	d00c      	beq.n	8000856 <__aeabi_dmul+0x206>
 800083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000840:	bf18      	it	ne
 8000842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000846:	d1d1      	bne.n	80007ec <__aeabi_dmul+0x19c>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085a:	bf06      	itte	eq
 800085c:	4610      	moveq	r0, r2
 800085e:	4619      	moveq	r1, r3
 8000860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000864:	d019      	beq.n	800089a <__aeabi_dmul+0x24a>
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	d102      	bne.n	8000872 <__aeabi_dmul+0x222>
 800086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000870:	d113      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000872:	ea95 0f0c 	teq	r5, ip
 8000876:	d105      	bne.n	8000884 <__aeabi_dmul+0x234>
 8000878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800087c:	bf1c      	itt	ne
 800087e:	4610      	movne	r0, r2
 8000880:	4619      	movne	r1, r3
 8000882:	d10a      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000884:	ea81 0103 	eor.w	r1, r1, r3
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <__aeabi_ddiv>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b2:	bf1d      	ittte	ne
 80008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b8:	ea94 0f0c 	teqne	r4, ip
 80008bc:	ea95 0f0c 	teqne	r5, ip
 80008c0:	f000 f8a7 	bleq	8000a12 <__aeabi_ddiv+0x16e>
 80008c4:	eba4 0405 	sub.w	r4, r4, r5
 80008c8:	ea81 0e03 	eor.w	lr, r1, r3
 80008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d4:	f000 8088 	beq.w	80009e8 <__aeabi_ddiv+0x144>
 80008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008fc:	429d      	cmp	r5, r3
 80008fe:	bf08      	it	eq
 8000900:	4296      	cmpeq	r6, r2
 8000902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090a:	d202      	bcs.n	8000912 <__aeabi_ddiv+0x6e>
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	1ab6      	subs	r6, r6, r2
 8000914:	eb65 0503 	sbc.w	r5, r5, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000980:	ea55 0e06 	orrs.w	lr, r5, r6
 8000984:	d018      	beq.n	80009b8 <__aeabi_ddiv+0x114>
 8000986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a2:	d1c0      	bne.n	8000926 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	d10b      	bne.n	80009c2 <__aeabi_ddiv+0x11e>
 80009aa:	ea41 0100 	orr.w	r1, r1, r0
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b6:	e7b6      	b.n	8000926 <__aeabi_ddiv+0x82>
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf04      	itt	eq
 80009be:	4301      	orreq	r1, r0
 80009c0:	2000      	moveq	r0, #0
 80009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c6:	bf88      	it	hi
 80009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009cc:	f63f aeaf 	bhi.w	800072e <__aeabi_dmul+0xde>
 80009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d4:	bf04      	itt	eq
 80009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009de:	f150 0000 	adcs.w	r0, r0, #0
 80009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f4:	bfc2      	ittt	gt
 80009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a04:	f04f 0e00 	mov.w	lr, #0
 8000a08:	3c01      	subs	r4, #1
 8000a0a:	e690      	b.n	800072e <__aeabi_dmul+0xde>
 8000a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a10:	e68d      	b.n	800072e <__aeabi_dmul+0xde>
 8000a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a16:	ea94 0f0c 	teq	r4, ip
 8000a1a:	bf08      	it	eq
 8000a1c:	ea95 0f0c 	teqeq	r5, ip
 8000a20:	f43f af3b 	beq.w	800089a <__aeabi_dmul+0x24a>
 8000a24:	ea94 0f0c 	teq	r4, ip
 8000a28:	d10a      	bne.n	8000a40 <__aeabi_ddiv+0x19c>
 8000a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2e:	f47f af34 	bne.w	800089a <__aeabi_dmul+0x24a>
 8000a32:	ea95 0f0c 	teq	r5, ip
 8000a36:	f47f af25 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e72c      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a40:	ea95 0f0c 	teq	r5, ip
 8000a44:	d106      	bne.n	8000a54 <__aeabi_ddiv+0x1b0>
 8000a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4a:	f43f aefd 	beq.w	8000848 <__aeabi_dmul+0x1f8>
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	e722      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5e:	f47f aec5 	bne.w	80007ec <__aeabi_dmul+0x19c>
 8000a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a66:	f47f af0d 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6e:	f47f aeeb 	bne.w	8000848 <__aeabi_dmul+0x1f8>
 8000a72:	e712      	b.n	800089a <__aeabi_dmul+0x24a>

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_frsub>:
 8000ab4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	e002      	b.n	8000ac0 <__addsf3>
 8000aba:	bf00      	nop

08000abc <__aeabi_fsub>:
 8000abc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac0 <__addsf3>:
 8000ac0:	0042      	lsls	r2, r0, #1
 8000ac2:	bf1f      	itttt	ne
 8000ac4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac8:	ea92 0f03 	teqne	r2, r3
 8000acc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad4:	d06a      	beq.n	8000bac <__addsf3+0xec>
 8000ad6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ada:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ade:	bfc1      	itttt	gt
 8000ae0:	18d2      	addgt	r2, r2, r3
 8000ae2:	4041      	eorgt	r1, r0
 8000ae4:	4048      	eorgt	r0, r1
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	bfb8      	it	lt
 8000aea:	425b      	neglt	r3, r3
 8000aec:	2b19      	cmp	r3, #25
 8000aee:	bf88      	it	hi
 8000af0:	4770      	bxhi	lr
 8000af2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000af6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b0a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b0e:	bf18      	it	ne
 8000b10:	4249      	negne	r1, r1
 8000b12:	ea92 0f03 	teq	r2, r3
 8000b16:	d03f      	beq.n	8000b98 <__addsf3+0xd8>
 8000b18:	f1a2 0201 	sub.w	r2, r2, #1
 8000b1c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b20:	eb10 000c 	adds.w	r0, r0, ip
 8000b24:	f1c3 0320 	rsb	r3, r3, #32
 8000b28:	fa01 f103 	lsl.w	r1, r1, r3
 8000b2c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b30:	d502      	bpl.n	8000b38 <__addsf3+0x78>
 8000b32:	4249      	negs	r1, r1
 8000b34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b38:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b3c:	d313      	bcc.n	8000b66 <__addsf3+0xa6>
 8000b3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b42:	d306      	bcc.n	8000b52 <__addsf3+0x92>
 8000b44:	0840      	lsrs	r0, r0, #1
 8000b46:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4a:	f102 0201 	add.w	r2, r2, #1
 8000b4e:	2afe      	cmp	r2, #254	; 0xfe
 8000b50:	d251      	bcs.n	8000bf6 <__addsf3+0x136>
 8000b52:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5a:	bf08      	it	eq
 8000b5c:	f020 0001 	biceq.w	r0, r0, #1
 8000b60:	ea40 0003 	orr.w	r0, r0, r3
 8000b64:	4770      	bx	lr
 8000b66:	0049      	lsls	r1, r1, #1
 8000b68:	eb40 0000 	adc.w	r0, r0, r0
 8000b6c:	3a01      	subs	r2, #1
 8000b6e:	bf28      	it	cs
 8000b70:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b74:	d2ed      	bcs.n	8000b52 <__addsf3+0x92>
 8000b76:	fab0 fc80 	clz	ip, r0
 8000b7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b7e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b82:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b86:	bfaa      	itet	ge
 8000b88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b8c:	4252      	neglt	r2, r2
 8000b8e:	4318      	orrge	r0, r3
 8000b90:	bfbc      	itt	lt
 8000b92:	40d0      	lsrlt	r0, r2
 8000b94:	4318      	orrlt	r0, r3
 8000b96:	4770      	bx	lr
 8000b98:	f092 0f00 	teq	r2, #0
 8000b9c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba0:	bf06      	itte	eq
 8000ba2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ba6:	3201      	addeq	r2, #1
 8000ba8:	3b01      	subne	r3, #1
 8000baa:	e7b5      	b.n	8000b18 <__addsf3+0x58>
 8000bac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb4:	bf18      	it	ne
 8000bb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bba:	d021      	beq.n	8000c00 <__addsf3+0x140>
 8000bbc:	ea92 0f03 	teq	r2, r3
 8000bc0:	d004      	beq.n	8000bcc <__addsf3+0x10c>
 8000bc2:	f092 0f00 	teq	r2, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	4608      	moveq	r0, r1
 8000bca:	4770      	bx	lr
 8000bcc:	ea90 0f01 	teq	r0, r1
 8000bd0:	bf1c      	itt	ne
 8000bd2:	2000      	movne	r0, #0
 8000bd4:	4770      	bxne	lr
 8000bd6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bda:	d104      	bne.n	8000be6 <__addsf3+0x126>
 8000bdc:	0040      	lsls	r0, r0, #1
 8000bde:	bf28      	it	cs
 8000be0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be4:	4770      	bx	lr
 8000be6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bea:	bf3c      	itt	cc
 8000bec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf0:	4770      	bxcc	lr
 8000bf2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfe:	4770      	bx	lr
 8000c00:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c04:	bf16      	itet	ne
 8000c06:	4608      	movne	r0, r1
 8000c08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c0c:	4601      	movne	r1, r0
 8000c0e:	0242      	lsls	r2, r0, #9
 8000c10:	bf06      	itte	eq
 8000c12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c16:	ea90 0f01 	teqeq	r0, r1
 8000c1a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_ui2f>:
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e004      	b.n	8000c30 <__aeabi_i2f+0x8>
 8000c26:	bf00      	nop

08000c28 <__aeabi_i2f>:
 8000c28:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c2c:	bf48      	it	mi
 8000c2e:	4240      	negmi	r0, r0
 8000c30:	ea5f 0c00 	movs.w	ip, r0
 8000c34:	bf08      	it	eq
 8000c36:	4770      	bxeq	lr
 8000c38:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c3c:	4601      	mov	r1, r0
 8000c3e:	f04f 0000 	mov.w	r0, #0
 8000c42:	e01c      	b.n	8000c7e <__aeabi_l2f+0x2a>

08000c44 <__aeabi_ul2f>:
 8000c44:	ea50 0201 	orrs.w	r2, r0, r1
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	e00a      	b.n	8000c68 <__aeabi_l2f+0x14>
 8000c52:	bf00      	nop

08000c54 <__aeabi_l2f>:
 8000c54:	ea50 0201 	orrs.w	r2, r0, r1
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c60:	d502      	bpl.n	8000c68 <__aeabi_l2f+0x14>
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	ea5f 0c01 	movs.w	ip, r1
 8000c6c:	bf02      	ittt	eq
 8000c6e:	4684      	moveq	ip, r0
 8000c70:	4601      	moveq	r1, r0
 8000c72:	2000      	moveq	r0, #0
 8000c74:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c78:	bf08      	it	eq
 8000c7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c82:	fabc f28c 	clz	r2, ip
 8000c86:	3a08      	subs	r2, #8
 8000c88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c8c:	db10      	blt.n	8000cb0 <__aeabi_l2f+0x5c>
 8000c8e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c92:	4463      	add	r3, ip
 8000c94:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c98:	f1c2 0220 	rsb	r2, r2, #32
 8000c9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca4:	eb43 0002 	adc.w	r0, r3, r2
 8000ca8:	bf08      	it	eq
 8000caa:	f020 0001 	biceq.w	r0, r0, #1
 8000cae:	4770      	bx	lr
 8000cb0:	f102 0220 	add.w	r2, r2, #32
 8000cb4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb8:	f1c2 0220 	rsb	r2, r2, #32
 8000cbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc4:	eb43 0002 	adc.w	r0, r3, r2
 8000cc8:	bf08      	it	eq
 8000cca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cce:	4770      	bx	lr

08000cd0 <__gesf2>:
 8000cd0:	f04f 3cff 	mov.w	ip, #4294967295
 8000cd4:	e006      	b.n	8000ce4 <__cmpsf2+0x4>
 8000cd6:	bf00      	nop

08000cd8 <__lesf2>:
 8000cd8:	f04f 0c01 	mov.w	ip, #1
 8000cdc:	e002      	b.n	8000ce4 <__cmpsf2+0x4>
 8000cde:	bf00      	nop

08000ce0 <__cmpsf2>:
 8000ce0:	f04f 0c01 	mov.w	ip, #1
 8000ce4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ce8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf4:	bf18      	it	ne
 8000cf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfa:	d011      	beq.n	8000d20 <__cmpsf2+0x40>
 8000cfc:	b001      	add	sp, #4
 8000cfe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d02:	bf18      	it	ne
 8000d04:	ea90 0f01 	teqne	r0, r1
 8000d08:	bf58      	it	pl
 8000d0a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d0e:	bf88      	it	hi
 8000d10:	17c8      	asrhi	r0, r1, #31
 8000d12:	bf38      	it	cc
 8000d14:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d18:	bf18      	it	ne
 8000d1a:	f040 0001 	orrne.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d24:	d102      	bne.n	8000d2c <__cmpsf2+0x4c>
 8000d26:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d2a:	d105      	bne.n	8000d38 <__cmpsf2+0x58>
 8000d2c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d30:	d1e4      	bne.n	8000cfc <__cmpsf2+0x1c>
 8000d32:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d36:	d0e1      	beq.n	8000cfc <__cmpsf2+0x1c>
 8000d38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <__aeabi_cfrcmple>:
 8000d40:	4684      	mov	ip, r0
 8000d42:	4608      	mov	r0, r1
 8000d44:	4661      	mov	r1, ip
 8000d46:	e7ff      	b.n	8000d48 <__aeabi_cfcmpeq>

08000d48 <__aeabi_cfcmpeq>:
 8000d48:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d4a:	f7ff ffc9 	bl	8000ce0 <__cmpsf2>
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	bf48      	it	mi
 8000d52:	f110 0f00 	cmnmi.w	r0, #0
 8000d56:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d58 <__aeabi_fcmpeq>:
 8000d58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d5c:	f7ff fff4 	bl	8000d48 <__aeabi_cfcmpeq>
 8000d60:	bf0c      	ite	eq
 8000d62:	2001      	moveq	r0, #1
 8000d64:	2000      	movne	r0, #0
 8000d66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d6a:	bf00      	nop

08000d6c <__aeabi_fcmplt>:
 8000d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d70:	f7ff ffea 	bl	8000d48 <__aeabi_cfcmpeq>
 8000d74:	bf34      	ite	cc
 8000d76:	2001      	movcc	r0, #1
 8000d78:	2000      	movcs	r0, #0
 8000d7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7e:	bf00      	nop

08000d80 <__aeabi_fcmple>:
 8000d80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d84:	f7ff ffe0 	bl	8000d48 <__aeabi_cfcmpeq>
 8000d88:	bf94      	ite	ls
 8000d8a:	2001      	movls	r0, #1
 8000d8c:	2000      	movhi	r0, #0
 8000d8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d92:	bf00      	nop

08000d94 <__aeabi_fcmpge>:
 8000d94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d98:	f7ff ffd2 	bl	8000d40 <__aeabi_cfrcmple>
 8000d9c:	bf94      	ite	ls
 8000d9e:	2001      	movls	r0, #1
 8000da0:	2000      	movhi	r0, #0
 8000da2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da6:	bf00      	nop

08000da8 <__aeabi_fcmpgt>:
 8000da8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dac:	f7ff ffc8 	bl	8000d40 <__aeabi_cfrcmple>
 8000db0:	bf34      	ite	cc
 8000db2:	2001      	movcc	r0, #1
 8000db4:	2000      	movcs	r0, #0
 8000db6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dba:	bf00      	nop

08000dbc <__aeabi_f2uiz>:
 8000dbc:	0042      	lsls	r2, r0, #1
 8000dbe:	d20e      	bcs.n	8000dde <__aeabi_f2uiz+0x22>
 8000dc0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000dc4:	d30b      	bcc.n	8000dde <__aeabi_f2uiz+0x22>
 8000dc6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000dca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dce:	d409      	bmi.n	8000de4 <__aeabi_f2uiz+0x28>
 8000dd0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000dd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dd8:	fa23 f002 	lsr.w	r0, r3, r2
 8000ddc:	4770      	bx	lr
 8000dde:	f04f 0000 	mov.w	r0, #0
 8000de2:	4770      	bx	lr
 8000de4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000de8:	d101      	bne.n	8000dee <__aeabi_f2uiz+0x32>
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	d102      	bne.n	8000df4 <__aeabi_f2uiz+0x38>
 8000dee:	f04f 30ff 	mov.w	r0, #4294967295
 8000df2:	4770      	bx	lr
 8000df4:	f04f 0000 	mov.w	r0, #0
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <MADC_ON>:
#include "../Inc/MCAL/ADC/ADC_private.h"
#include "../Inc/MCAL/ADC/ADC_config.h"
#include "../Inc/MCAL/ADC/ADC_interface.h"

void MADC_ON(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
	// enable adc (ADON bit =1)
	SET_BIT(ADC1->CR2,0);
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <MADC_ON+0x18>)
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	4a03      	ldr	r2, [pc, #12]	; (8000e14 <MADC_ON+0x18>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6093      	str	r3, [r2, #8]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	40012400 	.word	0x40012400

08000e18 <MADC_Init>:
{
	// disable adc (ADON bit =0)
	CLR_BIT(ADC1->CR2,0);
}
void MADC_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	MRCC_voidPerClock_State(APB2 ,ADC1_PERIPHERAL ,PClock_enable );
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2109      	movs	r1, #9
 8000e20:	2002      	movs	r0, #2
 8000e22:	f001 fe99 	bl	8002b58 <MRCC_voidPerClock_State>
	MGPIO_voidSetPinDirection(GPIOA , PIN1  , INPUT_ANALOG);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2101      	movs	r1, #1
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 f838 	bl	8000ea0 <MGPIO_voidSetPinDirection>
	//enable cognitions mode( CONT=1)
	SET_BIT(ADC1->CR2,1);
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <MADC_Init+0x28>)
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	4a02      	ldr	r2, [pc, #8]	; (8000e40 <MADC_Init+0x28>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	6093      	str	r3, [r2, #8]

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40012400 	.word	0x40012400

08000e44 <MADC_Read>:
u16 MADC_Read(u8 channel)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
	//ADC1 power on
	MADC_ON();
 8000e4e:	f7ff ffd5 	bl	8000dfc <MADC_ON>
	MADC_ON();
 8000e52:	f7ff ffd3 	bl	8000dfc <MADC_ON>
	//clear all channels
	ADC1->SQR3 &=0XFFFFFFF0;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MADC_Read+0x58>)
 8000e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5a:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <MADC_Read+0x58>)
 8000e5c:	f023 030f 	bic.w	r3, r3, #15
 8000e60:	6353      	str	r3, [r2, #52]	; 0x34
	//choose the selected channel
	ADC1->SQR3 |=channel;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MADC_Read+0x58>)
 8000e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	490c      	ldr	r1, [pc, #48]	; (8000e9c <MADC_Read+0x58>)
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	634b      	str	r3, [r1, #52]	; 0x34
	//start conversion (SWSTART =1)
	SET_BIT(ADC1->CR2,22);
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <MADC_Read+0x58>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <MADC_Read+0x58>)
 8000e74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e78:	6093      	str	r3, [r2, #8]
	//SET_BIT(ADC1->CR2,0);

	//waiting until end conversion flag is up (EOC)
	while(GET_BIT(ADC1->SR,1)==0);
 8000e7a:	bf00      	nop
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <MADC_Read+0x58>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	085b      	lsrs	r3, r3, #1
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d0f8      	beq.n	8000e7c <MADC_Read+0x38>
	//Read converted data from adc
	u16 Read=ADC1->DR;
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <MADC_Read+0x58>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	81fb      	strh	r3, [r7, #14]

	return Read;
 8000e90:	89fb      	ldrh	r3, [r7, #14]



}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40012400 	.word	0x40012400

08000ea0 <MGPIO_voidSetPinDirection>:
#include "../Inc/MCAL/DIO/DIO_interface.h"
#include "../Inc/MCAL/DIO/DIO_private.h"


void MGPIO_voidSetPinDirection(u8 copy_u8PORT , u8 copy_u8PIN  , u8 copy_u8Mode)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	71bb      	strb	r3, [r7, #6]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	717b      	strb	r3, [r7, #5]

	if(copy_u8PORT<3 && copy_u8PIN<16)
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	f200 80c0 	bhi.w	800103a <MGPIO_voidSetPinDirection+0x19a>
 8000eba:	79bb      	ldrb	r3, [r7, #6]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	f200 80bc 	bhi.w	800103a <MGPIO_voidSetPinDirection+0x19a>
		{
			switch(copy_u8PORT)
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d07a      	beq.n	8000fbe <MGPIO_voidSetPinDirection+0x11e>
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	f300 80b6 	bgt.w	800103a <MGPIO_voidSetPinDirection+0x19a>
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d002      	beq.n	8000ed8 <MGPIO_voidSetPinDirection+0x38>
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d03a      	beq.n	8000f4c <MGPIO_voidSetPinDirection+0xac>
				}else{	/*	Return Error */	}		break;
			}

		}else{	/*	Return Error		*/	}

	}
 8000ed6:	e0b0      	b.n	800103a <MGPIO_voidSetPinDirection+0x19a>
				if(copy_u8PIN <8)
 8000ed8:	79bb      	ldrb	r3, [r7, #6]
 8000eda:	2b07      	cmp	r3, #7
 8000edc:	d817      	bhi.n	8000f0e <MGPIO_voidSetPinDirection+0x6e>
					GPIOA_CRL	&=~((0b1111)			<< (copy_u8PIN * 4));
 8000ede:	4b59      	ldr	r3, [pc, #356]	; (8001044 <MGPIO_voidSetPinDirection+0x1a4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	79ba      	ldrb	r2, [r7, #6]
 8000ee4:	0092      	lsls	r2, r2, #2
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8000eec:	43d2      	mvns	r2, r2
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4a54      	ldr	r2, [pc, #336]	; (8001044 <MGPIO_voidSetPinDirection+0x1a4>)
 8000ef2:	400b      	ands	r3, r1
 8000ef4:	6013      	str	r3, [r2, #0]
					GPIOA_CRL	|=((copy_u8Mode)	<< (copy_u8PIN * 4));
 8000ef6:	4b53      	ldr	r3, [pc, #332]	; (8001044 <MGPIO_voidSetPinDirection+0x1a4>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	7979      	ldrb	r1, [r7, #5]
 8000efc:	79ba      	ldrb	r2, [r7, #6]
 8000efe:	0092      	lsls	r2, r2, #2
 8000f00:	fa01 f202 	lsl.w	r2, r1, r2
 8000f04:	4611      	mov	r1, r2
 8000f06:	4a4f      	ldr	r2, [pc, #316]	; (8001044 <MGPIO_voidSetPinDirection+0x1a4>)
 8000f08:	430b      	orrs	r3, r1
 8000f0a:	6013      	str	r3, [r2, #0]
				}else{	/*	Return Error */	}		break;
 8000f0c:	e090      	b.n	8001030 <MGPIO_voidSetPinDirection+0x190>
				}else if(copy_u8PIN <16)
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	f200 808d 	bhi.w	8001030 <MGPIO_voidSetPinDirection+0x190>
					copy_u8PIN -= 8;
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	3b08      	subs	r3, #8
 8000f1a:	71bb      	strb	r3, [r7, #6]
					GPIOA_CRH	&=~((0b1111)			<< (copy_u8PIN * 4));
 8000f1c:	4b4a      	ldr	r3, [pc, #296]	; (8001048 <MGPIO_voidSetPinDirection+0x1a8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	79ba      	ldrb	r2, [r7, #6]
 8000f22:	0092      	lsls	r2, r2, #2
 8000f24:	210f      	movs	r1, #15
 8000f26:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2a:	43d2      	mvns	r2, r2
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4a46      	ldr	r2, [pc, #280]	; (8001048 <MGPIO_voidSetPinDirection+0x1a8>)
 8000f30:	400b      	ands	r3, r1
 8000f32:	6013      	str	r3, [r2, #0]
					GPIOA_CRH	|=((copy_u8Mode)	<< (copy_u8PIN * 4));
 8000f34:	4b44      	ldr	r3, [pc, #272]	; (8001048 <MGPIO_voidSetPinDirection+0x1a8>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	7979      	ldrb	r1, [r7, #5]
 8000f3a:	79ba      	ldrb	r2, [r7, #6]
 8000f3c:	0092      	lsls	r2, r2, #2
 8000f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f42:	4611      	mov	r1, r2
 8000f44:	4a40      	ldr	r2, [pc, #256]	; (8001048 <MGPIO_voidSetPinDirection+0x1a8>)
 8000f46:	430b      	orrs	r3, r1
 8000f48:	6013      	str	r3, [r2, #0]
				}else{	/*	Return Error */	}		break;
 8000f4a:	e071      	b.n	8001030 <MGPIO_voidSetPinDirection+0x190>
				if(copy_u8PIN <8)
 8000f4c:	79bb      	ldrb	r3, [r7, #6]
 8000f4e:	2b07      	cmp	r3, #7
 8000f50:	d817      	bhi.n	8000f82 <MGPIO_voidSetPinDirection+0xe2>
					GPIOB_CRL	&=~((0b1111)			<< (copy_u8PIN * 4));
 8000f52:	4b3e      	ldr	r3, [pc, #248]	; (800104c <MGPIO_voidSetPinDirection+0x1ac>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	79ba      	ldrb	r2, [r7, #6]
 8000f58:	0092      	lsls	r2, r2, #2
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f60:	43d2      	mvns	r2, r2
 8000f62:	4611      	mov	r1, r2
 8000f64:	4a39      	ldr	r2, [pc, #228]	; (800104c <MGPIO_voidSetPinDirection+0x1ac>)
 8000f66:	400b      	ands	r3, r1
 8000f68:	6013      	str	r3, [r2, #0]
					GPIOB_CRL	|=((copy_u8Mode)	<< (copy_u8PIN * 4));
 8000f6a:	4b38      	ldr	r3, [pc, #224]	; (800104c <MGPIO_voidSetPinDirection+0x1ac>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	7979      	ldrb	r1, [r7, #5]
 8000f70:	79ba      	ldrb	r2, [r7, #6]
 8000f72:	0092      	lsls	r2, r2, #2
 8000f74:	fa01 f202 	lsl.w	r2, r1, r2
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4a34      	ldr	r2, [pc, #208]	; (800104c <MGPIO_voidSetPinDirection+0x1ac>)
 8000f7c:	430b      	orrs	r3, r1
 8000f7e:	6013      	str	r3, [r2, #0]
				}else{	/*	Return Error */	}		break;
 8000f80:	e058      	b.n	8001034 <MGPIO_voidSetPinDirection+0x194>
				}else if(copy_u8PIN <16)
 8000f82:	79bb      	ldrb	r3, [r7, #6]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	d855      	bhi.n	8001034 <MGPIO_voidSetPinDirection+0x194>
					copy_u8PIN -= 8;
 8000f88:	79bb      	ldrb	r3, [r7, #6]
 8000f8a:	3b08      	subs	r3, #8
 8000f8c:	71bb      	strb	r3, [r7, #6]
					GPIOB_CRH	&=~((0b1111)			<< (copy_u8PIN * 4));
 8000f8e:	4b30      	ldr	r3, [pc, #192]	; (8001050 <MGPIO_voidSetPinDirection+0x1b0>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	79ba      	ldrb	r2, [r7, #6]
 8000f94:	0092      	lsls	r2, r2, #2
 8000f96:	210f      	movs	r1, #15
 8000f98:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9c:	43d2      	mvns	r2, r2
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4a2b      	ldr	r2, [pc, #172]	; (8001050 <MGPIO_voidSetPinDirection+0x1b0>)
 8000fa2:	400b      	ands	r3, r1
 8000fa4:	6013      	str	r3, [r2, #0]
					GPIOB_CRH	|=((copy_u8Mode)	<< (copy_u8PIN * 4));
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <MGPIO_voidSetPinDirection+0x1b0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	7979      	ldrb	r1, [r7, #5]
 8000fac:	79ba      	ldrb	r2, [r7, #6]
 8000fae:	0092      	lsls	r2, r2, #2
 8000fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4a26      	ldr	r2, [pc, #152]	; (8001050 <MGPIO_voidSetPinDirection+0x1b0>)
 8000fb8:	430b      	orrs	r3, r1
 8000fba:	6013      	str	r3, [r2, #0]
				}else{	/*	Return Error */	}		break;
 8000fbc:	e03a      	b.n	8001034 <MGPIO_voidSetPinDirection+0x194>
				if(copy_u8PIN <8)
 8000fbe:	79bb      	ldrb	r3, [r7, #6]
 8000fc0:	2b07      	cmp	r3, #7
 8000fc2:	d817      	bhi.n	8000ff4 <MGPIO_voidSetPinDirection+0x154>
					GPIOC_CRL	&=~((0b1111)			<< (copy_u8PIN * 4));
 8000fc4:	4b23      	ldr	r3, [pc, #140]	; (8001054 <MGPIO_voidSetPinDirection+0x1b4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	79ba      	ldrb	r2, [r7, #6]
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	210f      	movs	r1, #15
 8000fce:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd2:	43d2      	mvns	r2, r2
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4a1f      	ldr	r2, [pc, #124]	; (8001054 <MGPIO_voidSetPinDirection+0x1b4>)
 8000fd8:	400b      	ands	r3, r1
 8000fda:	6013      	str	r3, [r2, #0]
					GPIOC_CRL	|=((copy_u8Mode)	<< (copy_u8PIN * 4));
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <MGPIO_voidSetPinDirection+0x1b4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	7979      	ldrb	r1, [r7, #5]
 8000fe2:	79ba      	ldrb	r2, [r7, #6]
 8000fe4:	0092      	lsls	r2, r2, #2
 8000fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fea:	4611      	mov	r1, r2
 8000fec:	4a19      	ldr	r2, [pc, #100]	; (8001054 <MGPIO_voidSetPinDirection+0x1b4>)
 8000fee:	430b      	orrs	r3, r1
 8000ff0:	6013      	str	r3, [r2, #0]
				}else{	/*	Return Error */	}		break;
 8000ff2:	e021      	b.n	8001038 <MGPIO_voidSetPinDirection+0x198>
				}else if(copy_u8PIN <16)
 8000ff4:	79bb      	ldrb	r3, [r7, #6]
 8000ff6:	2b0f      	cmp	r3, #15
 8000ff8:	d81e      	bhi.n	8001038 <MGPIO_voidSetPinDirection+0x198>
					copy_u8PIN -= 8;
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	3b08      	subs	r3, #8
 8000ffe:	71bb      	strb	r3, [r7, #6]
					GPIOC_CRH	&=~((0b1111)			<< (copy_u8PIN * 4));
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <MGPIO_voidSetPinDirection+0x1b8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	79ba      	ldrb	r2, [r7, #6]
 8001006:	0092      	lsls	r2, r2, #2
 8001008:	210f      	movs	r1, #15
 800100a:	fa01 f202 	lsl.w	r2, r1, r2
 800100e:	43d2      	mvns	r2, r2
 8001010:	4611      	mov	r1, r2
 8001012:	4a11      	ldr	r2, [pc, #68]	; (8001058 <MGPIO_voidSetPinDirection+0x1b8>)
 8001014:	400b      	ands	r3, r1
 8001016:	6013      	str	r3, [r2, #0]
					GPIOC_CRH	|=((copy_u8Mode)	<< (copy_u8PIN * 4));
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MGPIO_voidSetPinDirection+0x1b8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	7979      	ldrb	r1, [r7, #5]
 800101e:	79ba      	ldrb	r2, [r7, #6]
 8001020:	0092      	lsls	r2, r2, #2
 8001022:	fa01 f202 	lsl.w	r2, r1, r2
 8001026:	4611      	mov	r1, r2
 8001028:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <MGPIO_voidSetPinDirection+0x1b8>)
 800102a:	430b      	orrs	r3, r1
 800102c:	6013      	str	r3, [r2, #0]
				}else{	/*	Return Error */	}		break;
 800102e:	e003      	b.n	8001038 <MGPIO_voidSetPinDirection+0x198>
				}else{	/*	Return Error */	}		break;
 8001030:	bf00      	nop
 8001032:	e002      	b.n	800103a <MGPIO_voidSetPinDirection+0x19a>
				}else{	/*	Return Error */	}		break;
 8001034:	bf00      	nop
 8001036:	e000      	b.n	800103a <MGPIO_voidSetPinDirection+0x19a>
				}else{	/*	Return Error */	}		break;
 8001038:	bf00      	nop
	}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	40010800 	.word	0x40010800
 8001048:	40010804 	.word	0x40010804
 800104c:	40010c00 	.word	0x40010c00
 8001050:	40010c04 	.word	0x40010c04
 8001054:	40011000 	.word	0x40011000
 8001058:	40011004 	.word	0x40011004

0800105c <MGPIO_voidSetPinValue>:

void MGPIO_voidSetPinValue(u8 copy_u8PORT , u8 copy_u8PIN , u8 copy_u8Value)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
 8001066:	460b      	mov	r3, r1
 8001068:	71bb      	strb	r3, [r7, #6]
 800106a:	4613      	mov	r3, r2
 800106c:	717b      	strb	r3, [r7, #5]
	switch(copy_u8PORT)
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d040      	beq.n	80010f6 <MGPIO_voidSetPinValue+0x9a>
 8001074:	2b02      	cmp	r3, #2
 8001076:	dc60      	bgt.n	800113a <MGPIO_voidSetPinValue+0xde>
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <MGPIO_voidSetPinValue+0x26>
 800107c:	2b01      	cmp	r3, #1
 800107e:	d01d      	beq.n	80010bc <MGPIO_voidSetPinValue+0x60>




		}
	}
 8001080:	e05b      	b.n	800113a <MGPIO_voidSetPinValue+0xde>
			        if(copy_u8Value == GPIO_HIGH)
 8001082:	797b      	ldrb	r3, [r7, #5]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d10a      	bne.n	800109e <MGPIO_voidSetPinValue+0x42>
			        	SET_BIT(   GPIOA_ODR   ,  copy_u8PIN );
 8001088:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <MGPIO_voidSetPinValue+0xe8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	79ba      	ldrb	r2, [r7, #6]
 800108e:	2101      	movs	r1, #1
 8001090:	fa01 f202 	lsl.w	r2, r1, r2
 8001094:	4611      	mov	r1, r2
 8001096:	4a2b      	ldr	r2, [pc, #172]	; (8001144 <MGPIO_voidSetPinValue+0xe8>)
 8001098:	430b      	orrs	r3, r1
 800109a:	6013      	str	r3, [r2, #0]
			        break ;
 800109c:	e048      	b.n	8001130 <MGPIO_voidSetPinValue+0xd4>
			        else if(copy_u8Value == GPIO_LOW)
 800109e:	797b      	ldrb	r3, [r7, #5]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d145      	bne.n	8001130 <MGPIO_voidSetPinValue+0xd4>
			        	CLR_BIT(  GPIOA_ODR  , copy_u8PIN );
 80010a4:	4b27      	ldr	r3, [pc, #156]	; (8001144 <MGPIO_voidSetPinValue+0xe8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	79ba      	ldrb	r2, [r7, #6]
 80010aa:	2101      	movs	r1, #1
 80010ac:	fa01 f202 	lsl.w	r2, r1, r2
 80010b0:	43d2      	mvns	r2, r2
 80010b2:	4611      	mov	r1, r2
 80010b4:	4a23      	ldr	r2, [pc, #140]	; (8001144 <MGPIO_voidSetPinValue+0xe8>)
 80010b6:	400b      	ands	r3, r1
 80010b8:	6013      	str	r3, [r2, #0]
			        break ;
 80010ba:	e039      	b.n	8001130 <MGPIO_voidSetPinValue+0xd4>
		     if(copy_u8Value == GPIO_HIGH)
 80010bc:	797b      	ldrb	r3, [r7, #5]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d10a      	bne.n	80010d8 <MGPIO_voidSetPinValue+0x7c>
					        	SET_BIT(  GPIOB_ODR, copy_u8PIN );
 80010c2:	4b21      	ldr	r3, [pc, #132]	; (8001148 <MGPIO_voidSetPinValue+0xec>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	79ba      	ldrb	r2, [r7, #6]
 80010c8:	2101      	movs	r1, #1
 80010ca:	fa01 f202 	lsl.w	r2, r1, r2
 80010ce:	4611      	mov	r1, r2
 80010d0:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <MGPIO_voidSetPinValue+0xec>)
 80010d2:	430b      	orrs	r3, r1
 80010d4:	6013      	str	r3, [r2, #0]
					        break ;
 80010d6:	e02d      	b.n	8001134 <MGPIO_voidSetPinValue+0xd8>
					        else if(copy_u8Value == GPIO_LOW)
 80010d8:	797b      	ldrb	r3, [r7, #5]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d12a      	bne.n	8001134 <MGPIO_voidSetPinValue+0xd8>
					        	CLR_BIT(  GPIOB_ODR, copy_u8PIN );
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MGPIO_voidSetPinValue+0xec>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	79ba      	ldrb	r2, [r7, #6]
 80010e4:	2101      	movs	r1, #1
 80010e6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ea:	43d2      	mvns	r2, r2
 80010ec:	4611      	mov	r1, r2
 80010ee:	4a16      	ldr	r2, [pc, #88]	; (8001148 <MGPIO_voidSetPinValue+0xec>)
 80010f0:	400b      	ands	r3, r1
 80010f2:	6013      	str	r3, [r2, #0]
					        break ;
 80010f4:	e01e      	b.n	8001134 <MGPIO_voidSetPinValue+0xd8>
		     if(copy_u8Value == GPIO_HIGH)
 80010f6:	797b      	ldrb	r3, [r7, #5]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d10a      	bne.n	8001112 <MGPIO_voidSetPinValue+0xb6>
					        	SET_BIT(  GPIOC_ODR, copy_u8PIN );
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <MGPIO_voidSetPinValue+0xf0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	79ba      	ldrb	r2, [r7, #6]
 8001102:	2101      	movs	r1, #1
 8001104:	fa01 f202 	lsl.w	r2, r1, r2
 8001108:	4611      	mov	r1, r2
 800110a:	4a10      	ldr	r2, [pc, #64]	; (800114c <MGPIO_voidSetPinValue+0xf0>)
 800110c:	430b      	orrs	r3, r1
 800110e:	6013      	str	r3, [r2, #0]
					        break ;
 8001110:	e012      	b.n	8001138 <MGPIO_voidSetPinValue+0xdc>
					        else if(copy_u8Value == GPIO_LOW)
 8001112:	797b      	ldrb	r3, [r7, #5]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10f      	bne.n	8001138 <MGPIO_voidSetPinValue+0xdc>
					        	CLR_BIT(  GPIOC_ODR, copy_u8PIN );
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MGPIO_voidSetPinValue+0xf0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	79ba      	ldrb	r2, [r7, #6]
 800111e:	2101      	movs	r1, #1
 8001120:	fa01 f202 	lsl.w	r2, r1, r2
 8001124:	43d2      	mvns	r2, r2
 8001126:	4611      	mov	r1, r2
 8001128:	4a08      	ldr	r2, [pc, #32]	; (800114c <MGPIO_voidSetPinValue+0xf0>)
 800112a:	400b      	ands	r3, r1
 800112c:	6013      	str	r3, [r2, #0]
					        break ;
 800112e:	e003      	b.n	8001138 <MGPIO_voidSetPinValue+0xdc>
			        break ;
 8001130:	bf00      	nop
 8001132:	e002      	b.n	800113a <MGPIO_voidSetPinValue+0xde>
					        break ;
 8001134:	bf00      	nop
 8001136:	e000      	b.n	800113a <MGPIO_voidSetPinValue+0xde>
					        break ;
 8001138:	bf00      	nop
	}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	4001080c 	.word	0x4001080c
 8001148:	40010c0c 	.word	0x40010c0c
 800114c:	4001100c 	.word	0x4001100c

08001150 <MEXTI_voidEnableExti>:


void	MEXTI_voidInit			(void)
{/*		Initialize Interrupts (Edges)	and pin Number(A0 or B0 or C0)	*/}
void	MEXTI_voidEnableExti	(u8	Copy_u8ExtiNum)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	SET_BIT( EXTI -> IMR , Copy_u8ExtiNum);
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <MEXTI_voidEnableExti+0x28>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	79fa      	ldrb	r2, [r7, #7]
 8001160:	2101      	movs	r1, #1
 8001162:	fa01 f202 	lsl.w	r2, r1, r2
 8001166:	4611      	mov	r1, r2
 8001168:	4a03      	ldr	r2, [pc, #12]	; (8001178 <MEXTI_voidEnableExti+0x28>)
 800116a:	430b      	orrs	r3, r1
 800116c:	6013      	str	r3, [r2, #0]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	40010400 	.word	0x40010400

0800117c <MEXTI_voidSetExtiEdge>:
void	MEXTI_voidSetExtiEdge	(u8 Copy_u8ExtiNum , u8 Copy_u8Edge)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	460a      	mov	r2, r1
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	4613      	mov	r3, r2
 800118a:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8Edge)
 800118c:	79bb      	ldrb	r3, [r7, #6]
 800118e:	2b02      	cmp	r3, #2
 8001190:	d032      	beq.n	80011f8 <MEXTI_voidSetExtiEdge+0x7c>
 8001192:	2b02      	cmp	r3, #2
 8001194:	dc45      	bgt.n	8001222 <MEXTI_voidSetExtiEdge+0xa6>
 8001196:	2b00      	cmp	r3, #0
 8001198:	d002      	beq.n	80011a0 <MEXTI_voidSetExtiEdge+0x24>
 800119a:	2b01      	cmp	r3, #1
 800119c:	d016      	beq.n	80011cc <MEXTI_voidSetExtiEdge+0x50>
 800119e:	e040      	b.n	8001222 <MEXTI_voidSetExtiEdge+0xa6>
	{
		case	MEXTI_RISING_EDGE	:	CLR_BIT( EXTI -> FSTR , Copy_u8ExtiNum);
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <MEXTI_voidSetExtiEdge+0xc4>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	79fa      	ldrb	r2, [r7, #7]
 80011a6:	2101      	movs	r1, #1
 80011a8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ac:	43d2      	mvns	r2, r2
 80011ae:	4611      	mov	r1, r2
 80011b0:	4a23      	ldr	r2, [pc, #140]	; (8001240 <MEXTI_voidSetExtiEdge+0xc4>)
 80011b2:	400b      	ands	r3, r1
 80011b4:	60d3      	str	r3, [r2, #12]
										SET_BIT( EXTI -> RSTR , Copy_u8ExtiNum);	break;
 80011b6:	4b22      	ldr	r3, [pc, #136]	; (8001240 <MEXTI_voidSetExtiEdge+0xc4>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	79fa      	ldrb	r2, [r7, #7]
 80011bc:	2101      	movs	r1, #1
 80011be:	fa01 f202 	lsl.w	r2, r1, r2
 80011c2:	4611      	mov	r1, r2
 80011c4:	4a1e      	ldr	r2, [pc, #120]	; (8001240 <MEXTI_voidSetExtiEdge+0xc4>)
 80011c6:	430b      	orrs	r3, r1
 80011c8:	6093      	str	r3, [r2, #8]
 80011ca:	e02a      	b.n	8001222 <MEXTI_voidSetExtiEdge+0xa6>

		case	MEXTI_FALLING_EDGE	:	CLR_BIT( EXTI -> RSTR , Copy_u8ExtiNum);
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <MEXTI_voidSetExtiEdge+0xc4>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	79fa      	ldrb	r2, [r7, #7]
 80011d2:	2101      	movs	r1, #1
 80011d4:	fa01 f202 	lsl.w	r2, r1, r2
 80011d8:	43d2      	mvns	r2, r2
 80011da:	4611      	mov	r1, r2
 80011dc:	4a18      	ldr	r2, [pc, #96]	; (8001240 <MEXTI_voidSetExtiEdge+0xc4>)
 80011de:	400b      	ands	r3, r1
 80011e0:	6093      	str	r3, [r2, #8]
										SET_BIT( EXTI -> FSTR , Copy_u8ExtiNum);	break;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MEXTI_voidSetExtiEdge+0xc4>)
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	79fa      	ldrb	r2, [r7, #7]
 80011e8:	2101      	movs	r1, #1
 80011ea:	fa01 f202 	lsl.w	r2, r1, r2
 80011ee:	4611      	mov	r1, r2
 80011f0:	4a13      	ldr	r2, [pc, #76]	; (8001240 <MEXTI_voidSetExtiEdge+0xc4>)
 80011f2:	430b      	orrs	r3, r1
 80011f4:	60d3      	str	r3, [r2, #12]
 80011f6:	e014      	b.n	8001222 <MEXTI_voidSetExtiEdge+0xa6>

		case	MEXTI_IOC_EDGE		:	SET_BIT( EXTI -> RSTR , Copy_u8ExtiNum);
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MEXTI_voidSetExtiEdge+0xc4>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	2101      	movs	r1, #1
 8001200:	fa01 f202 	lsl.w	r2, r1, r2
 8001204:	4611      	mov	r1, r2
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <MEXTI_voidSetExtiEdge+0xc4>)
 8001208:	430b      	orrs	r3, r1
 800120a:	6093      	str	r3, [r2, #8]
										SET_BIT( EXTI -> FSTR , Copy_u8ExtiNum);	break;
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MEXTI_voidSetExtiEdge+0xc4>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	79fa      	ldrb	r2, [r7, #7]
 8001212:	2101      	movs	r1, #1
 8001214:	fa01 f202 	lsl.w	r2, r1, r2
 8001218:	4611      	mov	r1, r2
 800121a:	4a09      	ldr	r2, [pc, #36]	; (8001240 <MEXTI_voidSetExtiEdge+0xc4>)
 800121c:	430b      	orrs	r3, r1
 800121e:	60d3      	str	r3, [r2, #12]
 8001220:	bf00      	nop
	}
	SET_BIT( EXTI -> SWIER , Copy_u8ExtiNum);
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <MEXTI_voidSetExtiEdge+0xc4>)
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	79fa      	ldrb	r2, [r7, #7]
 8001228:	2101      	movs	r1, #1
 800122a:	fa01 f202 	lsl.w	r2, r1, r2
 800122e:	4611      	mov	r1, r2
 8001230:	4a03      	ldr	r2, [pc, #12]	; (8001240 <MEXTI_voidSetExtiEdge+0xc4>)
 8001232:	430b      	orrs	r3, r1
 8001234:	6113      	str	r3, [r2, #16]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	40010400 	.word	0x40010400

08001244 <MEXTI_voidSetEXTILinePin>:
void 	MEXTI_voidSetEXTILinePin	(u8 Copy_u8ExtiNum, u8 Copy_u8Port)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	460a      	mov	r2, r1
 800124e:	71fb      	strb	r3, [r7, #7]
 8001250:	4613      	mov	r3, r2
 8001252:	71bb      	strb	r3, [r7, #6]
	if(Copy_u8ExtiNum < 4)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	2b03      	cmp	r3, #3
 8001258:	d817      	bhi.n	800128a <MEXTI_voidSetEXTILinePin+0x46>
	{
		AFIO_EXTICR1 &= ~((0b1111) << (Copy_u8ExtiNum*4));
 800125a:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <MEXTI_voidSetEXTILinePin+0x104>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	79fa      	ldrb	r2, [r7, #7]
 8001260:	0092      	lsls	r2, r2, #2
 8001262:	210f      	movs	r1, #15
 8001264:	fa01 f202 	lsl.w	r2, r1, r2
 8001268:	43d2      	mvns	r2, r2
 800126a:	4611      	mov	r1, r2
 800126c:	4a36      	ldr	r2, [pc, #216]	; (8001348 <MEXTI_voidSetEXTILinePin+0x104>)
 800126e:	400b      	ands	r3, r1
 8001270:	6013      	str	r3, [r2, #0]
		AFIO_EXTICR1 |= ((Copy_u8Port) << (Copy_u8ExtiNum*4));
 8001272:	4b35      	ldr	r3, [pc, #212]	; (8001348 <MEXTI_voidSetEXTILinePin+0x104>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	79b9      	ldrb	r1, [r7, #6]
 8001278:	79fa      	ldrb	r2, [r7, #7]
 800127a:	0092      	lsls	r2, r2, #2
 800127c:	fa01 f202 	lsl.w	r2, r1, r2
 8001280:	4611      	mov	r1, r2
 8001282:	4a31      	ldr	r2, [pc, #196]	; (8001348 <MEXTI_voidSetEXTILinePin+0x104>)
 8001284:	430b      	orrs	r3, r1
 8001286:	6013      	str	r3, [r2, #0]
		Copy_u8ExtiNum = Copy_u8ExtiNum - 12;
		AFIO_EXTICR4 &= ~((0b1111) << (Copy_u8ExtiNum*4));
		AFIO_EXTICR4 |= ((Copy_u8Port) << (Copy_u8ExtiNum*4));
	}
	else {/*error*/}
}
 8001288:	e058      	b.n	800133c <MEXTI_voidSetEXTILinePin+0xf8>
	else if(Copy_u8ExtiNum < 8)
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b07      	cmp	r3, #7
 800128e:	d81a      	bhi.n	80012c6 <MEXTI_voidSetEXTILinePin+0x82>
		Copy_u8ExtiNum = Copy_u8ExtiNum - 4;
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	3b04      	subs	r3, #4
 8001294:	71fb      	strb	r3, [r7, #7]
		AFIO_EXTICR2 &= ~((0b1111) << (Copy_u8ExtiNum*4));
 8001296:	4b2d      	ldr	r3, [pc, #180]	; (800134c <MEXTI_voidSetEXTILinePin+0x108>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	79fa      	ldrb	r2, [r7, #7]
 800129c:	0092      	lsls	r2, r2, #2
 800129e:	210f      	movs	r1, #15
 80012a0:	fa01 f202 	lsl.w	r2, r1, r2
 80012a4:	43d2      	mvns	r2, r2
 80012a6:	4611      	mov	r1, r2
 80012a8:	4a28      	ldr	r2, [pc, #160]	; (800134c <MEXTI_voidSetEXTILinePin+0x108>)
 80012aa:	400b      	ands	r3, r1
 80012ac:	6013      	str	r3, [r2, #0]
		AFIO_EXTICR2 |= ((Copy_u8Port) << (Copy_u8ExtiNum*4));
 80012ae:	4b27      	ldr	r3, [pc, #156]	; (800134c <MEXTI_voidSetEXTILinePin+0x108>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	79b9      	ldrb	r1, [r7, #6]
 80012b4:	79fa      	ldrb	r2, [r7, #7]
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	fa01 f202 	lsl.w	r2, r1, r2
 80012bc:	4611      	mov	r1, r2
 80012be:	4a23      	ldr	r2, [pc, #140]	; (800134c <MEXTI_voidSetEXTILinePin+0x108>)
 80012c0:	430b      	orrs	r3, r1
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	e03a      	b.n	800133c <MEXTI_voidSetEXTILinePin+0xf8>
	else if(Copy_u8ExtiNum < 12)
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b0b      	cmp	r3, #11
 80012ca:	d81a      	bhi.n	8001302 <MEXTI_voidSetEXTILinePin+0xbe>
		Copy_u8ExtiNum = Copy_u8ExtiNum - 8;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	3b08      	subs	r3, #8
 80012d0:	71fb      	strb	r3, [r7, #7]
		AFIO_EXTICR3 &= ~((0b1111) << (Copy_u8ExtiNum*4));
 80012d2:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <MEXTI_voidSetEXTILinePin+0x10c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	79fa      	ldrb	r2, [r7, #7]
 80012d8:	0092      	lsls	r2, r2, #2
 80012da:	210f      	movs	r1, #15
 80012dc:	fa01 f202 	lsl.w	r2, r1, r2
 80012e0:	43d2      	mvns	r2, r2
 80012e2:	4611      	mov	r1, r2
 80012e4:	4a1a      	ldr	r2, [pc, #104]	; (8001350 <MEXTI_voidSetEXTILinePin+0x10c>)
 80012e6:	400b      	ands	r3, r1
 80012e8:	6013      	str	r3, [r2, #0]
		AFIO_EXTICR3 |= ((Copy_u8Port) << (Copy_u8ExtiNum*4));
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <MEXTI_voidSetEXTILinePin+0x10c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	79b9      	ldrb	r1, [r7, #6]
 80012f0:	79fa      	ldrb	r2, [r7, #7]
 80012f2:	0092      	lsls	r2, r2, #2
 80012f4:	fa01 f202 	lsl.w	r2, r1, r2
 80012f8:	4611      	mov	r1, r2
 80012fa:	4a15      	ldr	r2, [pc, #84]	; (8001350 <MEXTI_voidSetEXTILinePin+0x10c>)
 80012fc:	430b      	orrs	r3, r1
 80012fe:	6013      	str	r3, [r2, #0]
}
 8001300:	e01c      	b.n	800133c <MEXTI_voidSetEXTILinePin+0xf8>
	else if(Copy_u8ExtiNum < 16)
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d819      	bhi.n	800133c <MEXTI_voidSetEXTILinePin+0xf8>
		Copy_u8ExtiNum = Copy_u8ExtiNum - 12;
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	3b0c      	subs	r3, #12
 800130c:	71fb      	strb	r3, [r7, #7]
		AFIO_EXTICR4 &= ~((0b1111) << (Copy_u8ExtiNum*4));
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MEXTI_voidSetEXTILinePin+0x110>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	79fa      	ldrb	r2, [r7, #7]
 8001314:	0092      	lsls	r2, r2, #2
 8001316:	210f      	movs	r1, #15
 8001318:	fa01 f202 	lsl.w	r2, r1, r2
 800131c:	43d2      	mvns	r2, r2
 800131e:	4611      	mov	r1, r2
 8001320:	4a0c      	ldr	r2, [pc, #48]	; (8001354 <MEXTI_voidSetEXTILinePin+0x110>)
 8001322:	400b      	ands	r3, r1
 8001324:	6013      	str	r3, [r2, #0]
		AFIO_EXTICR4 |= ((Copy_u8Port) << (Copy_u8ExtiNum*4));
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MEXTI_voidSetEXTILinePin+0x110>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	79b9      	ldrb	r1, [r7, #6]
 800132c:	79fa      	ldrb	r2, [r7, #7]
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	fa01 f202 	lsl.w	r2, r1, r2
 8001334:	4611      	mov	r1, r2
 8001336:	4a07      	ldr	r2, [pc, #28]	; (8001354 <MEXTI_voidSetEXTILinePin+0x110>)
 8001338:	430b      	orrs	r3, r1
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40010008 	.word	0x40010008
 800134c:	4001000c 	.word	0x4001000c
 8001350:	40010010 	.word	0x40010010
 8001354:	40010014 	.word	0x40010014

08001358 <MEXTI_voidSetCallBack>:
void	MEXTI_voidEnableSWI		(u8	Copy_u8ExtiNum)
{
	SET_BIT( EXTI -> SWIER , Copy_u8ExtiNum);
}
void	MEXTI_voidSetCallBack	(void (*ptr) (void))
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	if(ptr != NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <MEXTI_voidSetCallBack+0x14>
	{
		EXTI3_CallBack  = 	ptr ;
 8001366:	4a04      	ldr	r2, [pc, #16]	; (8001378 <MEXTI_voidSetCallBack+0x20>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6013      	str	r3, [r2, #0]
	}
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	200000b8 	.word	0x200000b8

0800137c <EXTI0_IRQHandler>:

void	EXTI0_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	EXTI3_CallBack();		
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <EXTI0_IRQHandler+0x1c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4798      	blx	r3
	SET_BIT( EXTI -> PR , 0);
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <EXTI0_IRQHandler+0x20>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	4a04      	ldr	r2, [pc, #16]	; (800139c <EXTI0_IRQHandler+0x20>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6153      	str	r3, [r2, #20]

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200000b8 	.word	0x200000b8
 800139c:	40010400 	.word	0x40010400

080013a0 <EXTI1_IRQHandler>:
void	EXTI1_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	EXTI3_CallBack();		
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <EXTI1_IRQHandler+0x1c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4798      	blx	r3
	SET_BIT( EXTI -> PR , 1);
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <EXTI1_IRQHandler+0x20>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <EXTI1_IRQHandler+0x20>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6153      	str	r3, [r2, #20]

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200000b8 	.word	0x200000b8
 80013c0:	40010400 	.word	0x40010400

080013c4 <EXTI3_IRQHandler>:
void	EXTI3_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	EXTI3_CallBack();		
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <EXTI3_IRQHandler+0x1c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4798      	blx	r3
	SET_BIT( EXTI -> PR , 3);
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <EXTI3_IRQHandler+0x20>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <EXTI3_IRQHandler+0x20>)
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	6153      	str	r3, [r2, #20]
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200000b8 	.word	0x200000b8
 80013e4:	40010400 	.word	0x40010400

080013e8 <EXTI4_IRQHandler>:
void	EXTI4_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	EXTI3_CallBack();		
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <EXTI4_IRQHandler+0x1c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4798      	blx	r3
	SET_BIT( EXTI -> PR , 4);
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <EXTI4_IRQHandler+0x20>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	4a04      	ldr	r2, [pc, #16]	; (8001408 <EXTI4_IRQHandler+0x20>)
 80013f8:	f043 0310 	orr.w	r3, r3, #16
 80013fc:	6153      	str	r3, [r2, #20]
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200000b8 	.word	0x200000b8
 8001408:	40010400 	.word	0x40010400

0800140c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	EXTI3_CallBack();		
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <EXTI15_10_IRQHandler+0x1c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4798      	blx	r3
	SET_BIT( EXTI -> PR , 15);
 8001416:	4b05      	ldr	r3, [pc, #20]	; (800142c <EXTI15_10_IRQHandler+0x20>)
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	4a04      	ldr	r2, [pc, #16]	; (800142c <EXTI15_10_IRQHandler+0x20>)
 800141c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001420:	6153      	str	r3, [r2, #20]
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200000b8 	.word	0x200000b8
 800142c:	40010400 	.word	0x40010400

08001430 <ILI9341_DrawHollowRectangleCoord>:
		}
	}
}

void ILI9341_DrawHollowRectangleCoord(u16 X0, u16 Y0, u16 X1, u16 Y1, u16 color)
{
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	4604      	mov	r4, r0
 8001438:	4608      	mov	r0, r1
 800143a:	4611      	mov	r1, r2
 800143c:	461a      	mov	r2, r3
 800143e:	4623      	mov	r3, r4
 8001440:	80fb      	strh	r3, [r7, #6]
 8001442:	4603      	mov	r3, r0
 8001444:	80bb      	strh	r3, [r7, #4]
 8001446:	460b      	mov	r3, r1
 8001448:	807b      	strh	r3, [r7, #2]
 800144a:	4613      	mov	r3, r2
 800144c:	803b      	strh	r3, [r7, #0]
	u16 xLen = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	82fb      	strh	r3, [r7, #22]
	u16 yLen = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	82bb      	strh	r3, [r7, #20]
	u8 negX = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	74fb      	strb	r3, [r7, #19]
	u8 negY = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	74bb      	strb	r3, [r7, #18]
	float negCalc = 0;
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]

	negCalc = X1 - X0;
 8001464:	887a      	ldrh	r2, [r7, #2]
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fbdc 	bl	8000c28 <__aeabi_i2f>
 8001470:	4603      	mov	r3, r0
 8001472:	60fb      	str	r3, [r7, #12]
	if(negCalc < 0) negX = 1;
 8001474:	f04f 0100 	mov.w	r1, #0
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f7ff fc77 	bl	8000d6c <__aeabi_fcmplt>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <ILI9341_DrawHollowRectangleCoord+0x58>
 8001484:	2301      	movs	r3, #1
 8001486:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]

	negCalc = Y1 - Y0;
 800148e:	883a      	ldrh	r2, [r7, #0]
 8001490:	88bb      	ldrh	r3, [r7, #4]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fbc7 	bl	8000c28 <__aeabi_i2f>
 800149a:	4603      	mov	r3, r0
 800149c:	60fb      	str	r3, [r7, #12]
	if(negCalc < 0) negY = 1;
 800149e:	f04f 0100 	mov.w	r1, #0
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f7ff fc62 	bl	8000d6c <__aeabi_fcmplt>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <ILI9341_DrawHollowRectangleCoord+0x82>
 80014ae:	2301      	movs	r3, #1
 80014b0:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if(!negX)
 80014b2:	7cfb      	ldrb	r3, [r7, #19]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d104      	bne.n	80014c2 <ILI9341_DrawHollowRectangleCoord+0x92>
	{
		xLen = X1 - X0;
 80014b8:	887a      	ldrh	r2, [r7, #2]
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	82fb      	strh	r3, [r7, #22]
 80014c0:	e003      	b.n	80014ca <ILI9341_DrawHollowRectangleCoord+0x9a>
	}
	else
	{
		xLen = X0 - X1;
 80014c2:	88fa      	ldrh	r2, [r7, #6]
 80014c4:	887b      	ldrh	r3, [r7, #2]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_DrawHLine(X0, Y0, xLen, color);
 80014ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014cc:	8afa      	ldrh	r2, [r7, #22]
 80014ce:	88b9      	ldrh	r1, [r7, #4]
 80014d0:	88f8      	ldrh	r0, [r7, #6]
 80014d2:	f000 ff19 	bl	8002308 <ILI9341_DrawHLine>
	ILI9341_DrawHLine(X0, Y1, xLen, color);
 80014d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014d8:	8afa      	ldrh	r2, [r7, #22]
 80014da:	8839      	ldrh	r1, [r7, #0]
 80014dc:	88f8      	ldrh	r0, [r7, #6]
 80014de:	f000 ff13 	bl	8002308 <ILI9341_DrawHLine>

	//DRAW VERTICAL!
	if(!negY)
 80014e2:	7cbb      	ldrb	r3, [r7, #18]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d104      	bne.n	80014f2 <ILI9341_DrawHollowRectangleCoord+0xc2>
	{
		yLen = Y1 - Y0;
 80014e8:	883a      	ldrh	r2, [r7, #0]
 80014ea:	88bb      	ldrh	r3, [r7, #4]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	82bb      	strh	r3, [r7, #20]
 80014f0:	e003      	b.n	80014fa <ILI9341_DrawHollowRectangleCoord+0xca>
	}
	else
	{
		yLen = Y0 - Y1;
 80014f2:	88ba      	ldrh	r2, [r7, #4]
 80014f4:	883b      	ldrh	r3, [r7, #0]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	82bb      	strh	r3, [r7, #20]
	}

	ILI9341_DrawVLine(X0, Y0, yLen, color);
 80014fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014fc:	8aba      	ldrh	r2, [r7, #20]
 80014fe:	88b9      	ldrh	r1, [r7, #4]
 8001500:	88f8      	ldrh	r0, [r7, #6]
 8001502:	f000 ff45 	bl	8002390 <ILI9341_DrawVLine>
	ILI9341_DrawVLine(X1, Y0, yLen, color);
 8001506:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001508:	8aba      	ldrh	r2, [r7, #20]
 800150a:	88b9      	ldrh	r1, [r7, #4]
 800150c:	8878      	ldrh	r0, [r7, #2]
 800150e:	f000 ff3f 	bl	8002390 <ILI9341_DrawVLine>

	if((xLen > 0)||(yLen > 0))
 8001512:	8afb      	ldrh	r3, [r7, #22]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <ILI9341_DrawHollowRectangleCoord+0xee>
 8001518:	8abb      	ldrh	r3, [r7, #20]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d005      	beq.n	800152a <ILI9341_DrawHollowRectangleCoord+0xfa>
	{
		ILI9341_DrawPixel(X1, Y1, color);
 800151e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001520:	8839      	ldrh	r1, [r7, #0]
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	4618      	mov	r0, r3
 8001526:	f000 fe1d 	bl	8002164 <ILI9341_DrawPixel>
	}
}
 800152a:	bf00      	nop
 800152c:	371c      	adds	r7, #28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd90      	pop	{r4, r7, pc}

08001532 <ILI9341_DrawFilledRectangleCoord>:

void ILI9341_DrawFilledRectangleCoord(u16 X0, u16 Y0, u16 X1, u16 Y1, u16 color)
{
 8001532:	b590      	push	{r4, r7, lr}
 8001534:	b089      	sub	sp, #36	; 0x24
 8001536:	af02      	add	r7, sp, #8
 8001538:	4604      	mov	r4, r0
 800153a:	4608      	mov	r0, r1
 800153c:	4611      	mov	r1, r2
 800153e:	461a      	mov	r2, r3
 8001540:	4623      	mov	r3, r4
 8001542:	80fb      	strh	r3, [r7, #6]
 8001544:	4603      	mov	r3, r0
 8001546:	80bb      	strh	r3, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
 800154c:	4613      	mov	r3, r2
 800154e:	803b      	strh	r3, [r7, #0]
	u16 xLen = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	82fb      	strh	r3, [r7, #22]
	u16 yLen = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	82bb      	strh	r3, [r7, #20]
	u8 negX = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	74fb      	strb	r3, [r7, #19]
	u8 negY = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	74bb      	strb	r3, [r7, #18]
	int32_t negCalc = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
	u16 X0True = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	823b      	strh	r3, [r7, #16]
	u16 Y0True = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	81fb      	strh	r3, [r7, #14]

	negCalc = X1 - X0;
 800156c:	887a      	ldrh	r2, [r7, #2]
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negX = 1;
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	da01      	bge.n	800157e <ILI9341_DrawFilledRectangleCoord+0x4c>
 800157a:	2301      	movs	r3, #1
 800157c:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]

	negCalc = Y1 - Y0;
 8001582:	883a      	ldrh	r2, [r7, #0]
 8001584:	88bb      	ldrh	r3, [r7, #4]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negY = 1;
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	da01      	bge.n	8001594 <ILI9341_DrawFilledRectangleCoord+0x62>
 8001590:	2301      	movs	r3, #1
 8001592:	74bb      	strb	r3, [r7, #18]

	if(!negX)
 8001594:	7cfb      	ldrb	r3, [r7, #19]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d106      	bne.n	80015a8 <ILI9341_DrawFilledRectangleCoord+0x76>
	{
		xLen = X1 - X0;
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	82fb      	strh	r3, [r7, #22]
		X0True = X0;
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	823b      	strh	r3, [r7, #16]
 80015a6:	e005      	b.n	80015b4 <ILI9341_DrawFilledRectangleCoord+0x82>
	}
	else
	{
		xLen = X0 - X1;
 80015a8:	88fa      	ldrh	r2, [r7, #6]
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	82fb      	strh	r3, [r7, #22]
		X0True = X1;
 80015b0:	887b      	ldrh	r3, [r7, #2]
 80015b2:	823b      	strh	r3, [r7, #16]
	}

	if(!negY)
 80015b4:	7cbb      	ldrb	r3, [r7, #18]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d106      	bne.n	80015c8 <ILI9341_DrawFilledRectangleCoord+0x96>
	{
		yLen = Y1 - Y0;
 80015ba:	883a      	ldrh	r2, [r7, #0]
 80015bc:	88bb      	ldrh	r3, [r7, #4]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	82bb      	strh	r3, [r7, #20]
		Y0True = Y0;
 80015c2:	88bb      	ldrh	r3, [r7, #4]
 80015c4:	81fb      	strh	r3, [r7, #14]
 80015c6:	e005      	b.n	80015d4 <ILI9341_DrawFilledRectangleCoord+0xa2>
	}
	else
	{
		yLen = Y0 - Y1;
 80015c8:	88ba      	ldrh	r2, [r7, #4]
 80015ca:	883b      	ldrh	r3, [r7, #0]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	82bb      	strh	r3, [r7, #20]
		Y0True = Y1;
 80015d0:	883b      	ldrh	r3, [r7, #0]
 80015d2:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
 80015d4:	8abc      	ldrh	r4, [r7, #20]
 80015d6:	8afa      	ldrh	r2, [r7, #22]
 80015d8:	89f9      	ldrh	r1, [r7, #14]
 80015da:	8a38      	ldrh	r0, [r7, #16]
 80015dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	4623      	mov	r3, r4
 80015e2:	f000 fe25 	bl	8002230 <ILI9341_DrawRectangle>
}
 80015e6:	bf00      	nop
 80015e8:	371c      	adds	r7, #28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd90      	pop	{r4, r7, pc}

080015ee <ILI9341_DrawChar>:

void ILI9341_DrawChar(char ch, const u8 font[], u16 X, u16 Y, u16 color, u16 bgcolor)
{
 80015ee:	b590      	push	{r4, r7, lr}
 80015f0:	b08d      	sub	sp, #52	; 0x34
 80015f2:	af02      	add	r7, sp, #8
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	4611      	mov	r1, r2
 80015f8:	461a      	mov	r2, r3
 80015fa:	4603      	mov	r3, r0
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	460b      	mov	r3, r1
 8001600:	81bb      	strh	r3, [r7, #12]
 8001602:	4613      	mov	r3, r2
 8001604:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	2b1e      	cmp	r3, #30
 800160a:	d961      	bls.n	80016d0 <ILI9341_DrawChar+0xe2>
 800160c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001610:	2b00      	cmp	r3, #0
 8001612:	db5d      	blt.n	80016d0 <ILI9341_DrawChar+0xe2>

	u8 fOffset, fWidth, fHeight, fBPL;
	u8 *tempChar;

	fOffset = font[0];
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	785b      	ldrb	r3, [r3, #1]
 800161e:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	789b      	ldrb	r3, [r3, #2]
 8001624:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	78db      	ldrb	r3, [r3, #3]
 800162a:	773b      	strb	r3, [r7, #28]

	tempChar = (u8*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	3b20      	subs	r3, #32
 8001630:	7ffa      	ldrb	r2, [r7, #31]
 8001632:	fb02 f303 	mul.w	r3, r2, r3
 8001636:	3304      	adds	r3, #4
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	4413      	add	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 800163e:	7fbb      	ldrb	r3, [r7, #30]
 8001640:	b29a      	uxth	r2, r3
 8001642:	7f7b      	ldrb	r3, [r7, #29]
 8001644:	b29c      	uxth	r4, r3
 8001646:	88f9      	ldrh	r1, [r7, #6]
 8001648:	89b8      	ldrh	r0, [r7, #12]
 800164a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	4623      	mov	r3, r4
 8001650:	f000 fdee 	bl	8002230 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
 8001658:	e035      	b.n	80016c6 <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
 800165e:	e02b      	b.n	80016b8 <ILI9341_DrawChar+0xca>
		{
			u8 z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8001660:	7f3b      	ldrb	r3, [r7, #28]
 8001662:	6a3a      	ldr	r2, [r7, #32]
 8001664:	fb02 f203 	mul.w	r2, r2, r3
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	10db      	asrs	r3, r3, #3
 800166c:	f003 031f 	and.w	r3, r3, #31
 8001670:	4413      	add	r3, r2
 8001672:	3301      	adds	r3, #1
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4413      	add	r3, r2
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	75fb      	strb	r3, [r7, #23]
			u8 b = 1 << (j & 0x07);
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	2201      	movs	r2, #1
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 800168a:	7dfa      	ldrb	r2, [r7, #23]
 800168c:	7dbb      	ldrb	r3, [r7, #22]
 800168e:	4013      	ands	r3, r2
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00d      	beq.n	80016b2 <ILI9341_DrawChar+0xc4>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	b29a      	uxth	r2, r3
 800169a:	89bb      	ldrh	r3, [r7, #12]
 800169c:	4413      	add	r3, r2
 800169e:	b298      	uxth	r0, r3
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	4413      	add	r3, r2
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80016ac:	4619      	mov	r1, r3
 80016ae:	f000 fd59 	bl	8002164 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	3301      	adds	r3, #1
 80016b6:	623b      	str	r3, [r7, #32]
 80016b8:	7fbb      	ldrb	r3, [r7, #30]
 80016ba:	6a3a      	ldr	r2, [r7, #32]
 80016bc:	429a      	cmp	r2, r3
 80016be:	dbcf      	blt.n	8001660 <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	3301      	adds	r3, #1
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
 80016c6:	7f7b      	ldrb	r3, [r7, #29]
 80016c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ca:	429a      	cmp	r2, r3
 80016cc:	dbc5      	blt.n	800165a <ILI9341_DrawChar+0x6c>
 80016ce:	e000      	b.n	80016d2 <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 80016d0:	bf00      	nop
			}
		}
	}
}
 80016d2:	372c      	adds	r7, #44	; 0x2c
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd90      	pop	{r4, r7, pc}

080016d8 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const u8 font[], u16 X, u16 Y, u16 color, u16 bgcolor)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af02      	add	r7, sp, #8
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	4611      	mov	r1, r2
 80016e4:	461a      	mov	r2, r3
 80016e6:	460b      	mov	r3, r1
 80016e8:	80fb      	strh	r3, [r7, #6]
 80016ea:	4613      	mov	r3, r2
 80016ec:	80bb      	strh	r3, [r7, #4]
	u8 charWidth;			/* Width of character */
	u8 fOffset = font[0];	/* Offset of character */
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	77fb      	strb	r3, [r7, #31]
	u8 fWidth = font[1];	/* Width of font */
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	785b      	ldrb	r3, [r3, #1]
 80016f8:	77bb      	strb	r3, [r7, #30]

	while (*str)
 80016fa:	e02d      	b.n	8001758 <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	7818      	ldrb	r0, [r3, #0]
 8001700:	88b9      	ldrh	r1, [r7, #4]
 8001702:	88fa      	ldrh	r2, [r7, #6]
 8001704:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001706:	9301      	str	r3, [sp, #4]
 8001708:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	460b      	mov	r3, r1
 800170e:	68b9      	ldr	r1, [r7, #8]
 8001710:	f7ff ff6d 	bl	80015ee <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		u8 *tempChar = (u8*)&font[((*str - 0x20) * fOffset) + 4];
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	3b20      	subs	r3, #32
 800171a:	7ffa      	ldrb	r2, [r7, #31]
 800171c:	fb02 f303 	mul.w	r3, r2, r3
 8001720:	3304      	adds	r3, #4
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	4413      	add	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 800172e:	7dfb      	ldrb	r3, [r7, #23]
 8001730:	1c9a      	adds	r2, r3, #2
 8001732:	7fbb      	ldrb	r3, [r7, #30]
 8001734:	429a      	cmp	r2, r3
 8001736:	da07      	bge.n	8001748 <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	b29a      	uxth	r2, r3
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	4413      	add	r3, r2
 8001740:	b29b      	uxth	r3, r3
 8001742:	3302      	adds	r3, #2
 8001744:	80fb      	strh	r3, [r7, #6]
 8001746:	e004      	b.n	8001752 <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 8001748:	7fbb      	ldrb	r3, [r7, #30]
 800174a:	b29a      	uxth	r2, r3
 800174c:	88fb      	ldrh	r3, [r7, #6]
 800174e:	4413      	add	r3, r2
 8001750:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	3301      	adds	r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1cd      	bne.n	80016fc <ILI9341_DrawText+0x24>
	}
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	3720      	adds	r7, #32
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <ILI9341_WelcomingMessage>:
		/* DMA Tx is too fast, It needs some delay */
		//MSTK_voidSetBusyWait 		  (1);
	}
}
void ILI9341_WelcomingMessage(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af02      	add	r7, sp, #8
	ILI9341_FillScreen(WHITE);
 8001772:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001776:	f000 fcbf 	bl	80020f8 <ILI9341_FillScreen>
	//ILI9341_DrawHLine(10, 130, 220, BLACK);
	ILI9341_DrawFilledRectangleCoord(0, 0, 240, 130, BLACK);
 800177a:	2300      	movs	r3, #0
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	2382      	movs	r3, #130	; 0x82
 8001780:	22f0      	movs	r2, #240	; 0xf0
 8001782:	2100      	movs	r1, #0
 8001784:	2000      	movs	r0, #0
 8001786:	f7ff fed4 	bl	8001532 <ILI9341_DrawFilledRectangleCoord>
	ILI9341_DrawFilledRectangleCoord(0, 190, 240, 320, BLACK);
 800178a:	2300      	movs	r3, #0
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001792:	22f0      	movs	r2, #240	; 0xf0
 8001794:	21be      	movs	r1, #190	; 0xbe
 8001796:	2000      	movs	r0, #0
 8001798:	f7ff fecb 	bl	8001532 <ILI9341_DrawFilledRectangleCoord>
	ILI9341_DrawHollowRectangleCoord(10, 145, 230, 175, BLACK);
 800179c:	2300      	movs	r3, #0
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	23af      	movs	r3, #175	; 0xaf
 80017a2:	22e6      	movs	r2, #230	; 0xe6
 80017a4:	2191      	movs	r1, #145	; 0x91
 80017a6:	200a      	movs	r0, #10
 80017a8:	f7ff fe42 	bl	8001430 <ILI9341_DrawHollowRectangleCoord>
    ILI9341_DrawText("Welcome To City Bikers", FONT4, 20, 155, BLACK, WHITE);
 80017ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	2300      	movs	r3, #0
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	239b      	movs	r3, #155	; 0x9b
 80017b8:	2214      	movs	r2, #20
 80017ba:	4907      	ldr	r1, [pc, #28]	; (80017d8 <ILI9341_WelcomingMessage+0x6c>)
 80017bc:	4807      	ldr	r0, [pc, #28]	; (80017dc <ILI9341_WelcomingMessage+0x70>)
 80017be:	f7ff ff8b 	bl	80016d8 <ILI9341_DrawText>
    MSTK_voidSetBusyWait		(100000);
 80017c2:	4807      	ldr	r0, [pc, #28]	; (80017e0 <ILI9341_WelcomingMessage+0x74>)
 80017c4:	f001 fd42 	bl	800324c <MSTK_voidSetBusyWait>

    ILI9341_FillScreen(WHITE);
 80017c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017cc:	f000 fc94 	bl	80020f8 <ILI9341_FillScreen>
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	08005064 	.word	0x08005064
 80017dc:	0800460c 	.word	0x0800460c
 80017e0:	000186a0 	.word	0x000186a0

080017e4 <ILI9341_ShowParametersV2>:
    ILI9341_DrawText(BufferText, FONT3, 10, 110, WHITE, RED);
	sprintf(BufferText, "HeartRate   : %d BPM", HeartRate);
    ILI9341_DrawText(BufferText, FONT3, 10, 150, WHITE, BLACK);
}
void ILI9341_ShowParametersV2(u8 HeartRate, u8 Temperature, u8 Speed)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af02      	add	r7, sp, #8
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
 80017ee:	460b      	mov	r3, r1
 80017f0:	71bb      	strb	r3, [r7, #6]
 80017f2:	4613      	mov	r3, r2
 80017f4:	717b      	strb	r3, [r7, #5]
	static char BufferText[40];
	 ILI9341_DrawRectangle(0, 0, 240, 107, ORANGE);
 80017f6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	236b      	movs	r3, #107	; 0x6b
 80017fe:	22f0      	movs	r2, #240	; 0xf0
 8001800:	2100      	movs	r1, #0
 8001802:	2000      	movs	r0, #0
 8001804:	f000 fd14 	bl	8002230 <ILI9341_DrawRectangle>
	sprintf(BufferText, "Temperature :", "");
 8001808:	4a3c      	ldr	r2, [pc, #240]	; (80018fc <ILI9341_ShowParametersV2+0x118>)
 800180a:	493d      	ldr	r1, [pc, #244]	; (8001900 <ILI9341_ShowParametersV2+0x11c>)
 800180c:	483d      	ldr	r0, [pc, #244]	; (8001904 <ILI9341_ShowParametersV2+0x120>)
 800180e:	f002 fab7 	bl	8003d80 <siprintf>
	ILI9341_DrawText(BufferText, FONT4, 75, 33, BLACK, ORANGE);
 8001812:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001816:	9301      	str	r3, [sp, #4]
 8001818:	2300      	movs	r3, #0
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2321      	movs	r3, #33	; 0x21
 800181e:	224b      	movs	r2, #75	; 0x4b
 8001820:	4939      	ldr	r1, [pc, #228]	; (8001908 <ILI9341_ShowParametersV2+0x124>)
 8001822:	4838      	ldr	r0, [pc, #224]	; (8001904 <ILI9341_ShowParametersV2+0x120>)
 8001824:	f7ff ff58 	bl	80016d8 <ILI9341_DrawText>
	sprintf(BufferText, "%d C'",Temperature );
 8001828:	79bb      	ldrb	r3, [r7, #6]
 800182a:	461a      	mov	r2, r3
 800182c:	4937      	ldr	r1, [pc, #220]	; (800190c <ILI9341_ShowParametersV2+0x128>)
 800182e:	4835      	ldr	r0, [pc, #212]	; (8001904 <ILI9341_ShowParametersV2+0x120>)
 8001830:	f002 faa6 	bl	8003d80 <siprintf>
	ILI9341_DrawText(BufferText, FONT4, 75, 70, BLACK, ORANGE);
 8001834:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	2300      	movs	r3, #0
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2346      	movs	r3, #70	; 0x46
 8001840:	224b      	movs	r2, #75	; 0x4b
 8001842:	4931      	ldr	r1, [pc, #196]	; (8001908 <ILI9341_ShowParametersV2+0x124>)
 8001844:	482f      	ldr	r0, [pc, #188]	; (8001904 <ILI9341_ShowParametersV2+0x120>)
 8001846:	f7ff ff47 	bl	80016d8 <ILI9341_DrawText>
	ILI9341_DrawRectangle(0, 106, 240, 106, GREEN);
 800184a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	236a      	movs	r3, #106	; 0x6a
 8001852:	22f0      	movs	r2, #240	; 0xf0
 8001854:	216a      	movs	r1, #106	; 0x6a
 8001856:	2000      	movs	r0, #0
 8001858:	f000 fcea 	bl	8002230 <ILI9341_DrawRectangle>
	sprintf(BufferText, "Speed       :", "");
 800185c:	4a27      	ldr	r2, [pc, #156]	; (80018fc <ILI9341_ShowParametersV2+0x118>)
 800185e:	492c      	ldr	r1, [pc, #176]	; (8001910 <ILI9341_ShowParametersV2+0x12c>)
 8001860:	4828      	ldr	r0, [pc, #160]	; (8001904 <ILI9341_ShowParametersV2+0x120>)
 8001862:	f002 fa8d 	bl	8003d80 <siprintf>
	ILI9341_DrawText(BufferText, FONT4, 75, 139, BLACK, GREEN);
 8001866:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	2300      	movs	r3, #0
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	238b      	movs	r3, #139	; 0x8b
 8001872:	224b      	movs	r2, #75	; 0x4b
 8001874:	4924      	ldr	r1, [pc, #144]	; (8001908 <ILI9341_ShowParametersV2+0x124>)
 8001876:	4823      	ldr	r0, [pc, #140]	; (8001904 <ILI9341_ShowParametersV2+0x120>)
 8001878:	f7ff ff2e 	bl	80016d8 <ILI9341_DrawText>
	sprintf(BufferText, "%d KPH", Speed);
 800187c:	797b      	ldrb	r3, [r7, #5]
 800187e:	461a      	mov	r2, r3
 8001880:	4924      	ldr	r1, [pc, #144]	; (8001914 <ILI9341_ShowParametersV2+0x130>)
 8001882:	4820      	ldr	r0, [pc, #128]	; (8001904 <ILI9341_ShowParametersV2+0x120>)
 8001884:	f002 fa7c 	bl	8003d80 <siprintf>
	ILI9341_DrawText(BufferText, FONT4, 75, 176, BLACK, GREEN);
 8001888:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	2300      	movs	r3, #0
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	23b0      	movs	r3, #176	; 0xb0
 8001894:	224b      	movs	r2, #75	; 0x4b
 8001896:	491c      	ldr	r1, [pc, #112]	; (8001908 <ILI9341_ShowParametersV2+0x124>)
 8001898:	481a      	ldr	r0, [pc, #104]	; (8001904 <ILI9341_ShowParametersV2+0x120>)
 800189a:	f7ff ff1d 	bl	80016d8 <ILI9341_DrawText>
	ILI9341_DrawRectangle(0, 213, 240, 106, CYAN);
 800189e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	236a      	movs	r3, #106	; 0x6a
 80018a6:	22f0      	movs	r2, #240	; 0xf0
 80018a8:	21d5      	movs	r1, #213	; 0xd5
 80018aa:	2000      	movs	r0, #0
 80018ac:	f000 fcc0 	bl	8002230 <ILI9341_DrawRectangle>
	sprintf(BufferText, "HeartRate   :", "");
 80018b0:	4a12      	ldr	r2, [pc, #72]	; (80018fc <ILI9341_ShowParametersV2+0x118>)
 80018b2:	4919      	ldr	r1, [pc, #100]	; (8001918 <ILI9341_ShowParametersV2+0x134>)
 80018b4:	4813      	ldr	r0, [pc, #76]	; (8001904 <ILI9341_ShowParametersV2+0x120>)
 80018b6:	f002 fa63 	bl	8003d80 <siprintf>
	ILI9341_DrawText(BufferText, FONT4, 75, 246, BLACK, CYAN);
 80018ba:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	2300      	movs	r3, #0
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	23f6      	movs	r3, #246	; 0xf6
 80018c6:	224b      	movs	r2, #75	; 0x4b
 80018c8:	490f      	ldr	r1, [pc, #60]	; (8001908 <ILI9341_ShowParametersV2+0x124>)
 80018ca:	480e      	ldr	r0, [pc, #56]	; (8001904 <ILI9341_ShowParametersV2+0x120>)
 80018cc:	f7ff ff04 	bl	80016d8 <ILI9341_DrawText>
	sprintf(BufferText, "%d BPM", HeartRate);
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	461a      	mov	r2, r3
 80018d4:	4911      	ldr	r1, [pc, #68]	; (800191c <ILI9341_ShowParametersV2+0x138>)
 80018d6:	480b      	ldr	r0, [pc, #44]	; (8001904 <ILI9341_ShowParametersV2+0x120>)
 80018d8:	f002 fa52 	bl	8003d80 <siprintf>
	ILI9341_DrawText(BufferText, FONT4, 75, 283, BLACK, CYAN);
 80018dc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	2300      	movs	r3, #0
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	f240 131b 	movw	r3, #283	; 0x11b
 80018ea:	224b      	movs	r2, #75	; 0x4b
 80018ec:	4906      	ldr	r1, [pc, #24]	; (8001908 <ILI9341_ShowParametersV2+0x124>)
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <ILI9341_ShowParametersV2+0x120>)
 80018f0:	f7ff fef2 	bl	80016d8 <ILI9341_DrawText>
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	08004668 	.word	0x08004668
 8001900:	0800466c 	.word	0x0800466c
 8001904:	200000bc 	.word	0x200000bc
 8001908:	08005064 	.word	0x08005064
 800190c:	0800467c 	.word	0x0800467c
 8001910:	08004684 	.word	0x08004684
 8001914:	08004694 	.word	0x08004694
 8001918:	0800469c 	.word	0x0800469c
 800191c:	080046ac 	.word	0x080046ac

08001920 <ILI9341_ShowRoadSigns>:

void ILI9341_ShowRoadSigns(signs road)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af02      	add	r7, sp, #8
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]

    switch(road)
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	2b08      	cmp	r3, #8
 800192e:	f200 80e9 	bhi.w	8001b04 <ILI9341_ShowRoadSigns+0x1e4>
 8001932:	a201      	add	r2, pc, #4	; (adr r2, 8001938 <ILI9341_ShowRoadSigns+0x18>)
 8001934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001938:	08001a9b 	.word	0x08001a9b
 800193c:	0800195d 	.word	0x0800195d
 8001940:	08001a31 	.word	0x08001a31
 8001944:	08001b05 	.word	0x08001b05
 8001948:	08001b05 	.word	0x08001b05
 800194c:	08001b05 	.word	0x08001b05
 8001950:	08001b05 	.word	0x08001b05
 8001954:	08001b05 	.word	0x08001b05
 8001958:	080019c7 	.word	0x080019c7
    {
    case residential:
    	ILI9341_FillScreen(WHITE);
 800195c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001960:	f000 fbca 	bl	80020f8 <ILI9341_FillScreen>
    	ILI9341_DrawHollowRectangleCoord(1, 70, 200, 190, BLACK);
 8001964:	2300      	movs	r3, #0
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	23be      	movs	r3, #190	; 0xbe
 800196a:	22c8      	movs	r2, #200	; 0xc8
 800196c:	2146      	movs	r1, #70	; 0x46
 800196e:	2001      	movs	r0, #1
 8001970:	f7ff fd5e 	bl	8001430 <ILI9341_DrawHollowRectangleCoord>
    	ILI9341_DrawHollowRectangleCoord(5, 100, 100, 140, BLUE);
 8001974:	231f      	movs	r3, #31
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	238c      	movs	r3, #140	; 0x8c
 800197a:	2264      	movs	r2, #100	; 0x64
 800197c:	2164      	movs	r1, #100	; 0x64
 800197e:	2005      	movs	r0, #5
 8001980:	f7ff fd56 	bl	8001430 <ILI9341_DrawHollowRectangleCoord>
    	ILI9341_DrawFilledRectangleCoord(5, 100, 100, 140, RED);
 8001984:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	238c      	movs	r3, #140	; 0x8c
 800198c:	2264      	movs	r2, #100	; 0x64
 800198e:	2164      	movs	r1, #100	; 0x64
 8001990:	2005      	movs	r0, #5
 8001992:	f7ff fdce 	bl	8001532 <ILI9341_DrawFilledRectangleCoord>
        ILI9341_DrawText("Road Sign", FONT3, 10, 110, WHITE, RED);
 8001996:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	236e      	movs	r3, #110	; 0x6e
 80019a4:	220a      	movs	r2, #10
 80019a6:	495a      	ldr	r1, [pc, #360]	; (8001b10 <ILI9341_ShowRoadSigns+0x1f0>)
 80019a8:	485a      	ldr	r0, [pc, #360]	; (8001b14 <ILI9341_ShowRoadSigns+0x1f4>)
 80019aa:	f7ff fe95 	bl	80016d8 <ILI9341_DrawText>
    	ILI9341_DrawText("Residential Area", FONT4, 30, 150, BLACK, WHITE);
 80019ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	2300      	movs	r3, #0
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2396      	movs	r3, #150	; 0x96
 80019ba:	221e      	movs	r2, #30
 80019bc:	4956      	ldr	r1, [pc, #344]	; (8001b18 <ILI9341_ShowRoadSigns+0x1f8>)
 80019be:	4857      	ldr	r0, [pc, #348]	; (8001b1c <ILI9341_ShowRoadSigns+0x1fc>)
 80019c0:	f7ff fe8a 	bl	80016d8 <ILI9341_DrawText>
    	break;
 80019c4:	e09f      	b.n	8001b06 <ILI9341_ShowRoadSigns+0x1e6>
    case stop:
    	ILI9341_FillScreen(WHITE);
 80019c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019ca:	f000 fb95 	bl	80020f8 <ILI9341_FillScreen>
    	ILI9341_DrawHollowRectangleCoord(1, 70, 200, 190, BLACK);
 80019ce:	2300      	movs	r3, #0
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	23be      	movs	r3, #190	; 0xbe
 80019d4:	22c8      	movs	r2, #200	; 0xc8
 80019d6:	2146      	movs	r1, #70	; 0x46
 80019d8:	2001      	movs	r0, #1
 80019da:	f7ff fd29 	bl	8001430 <ILI9341_DrawHollowRectangleCoord>
    	ILI9341_DrawHollowRectangleCoord(5, 100, 100, 140, BLUE);
 80019de:	231f      	movs	r3, #31
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	238c      	movs	r3, #140	; 0x8c
 80019e4:	2264      	movs	r2, #100	; 0x64
 80019e6:	2164      	movs	r1, #100	; 0x64
 80019e8:	2005      	movs	r0, #5
 80019ea:	f7ff fd21 	bl	8001430 <ILI9341_DrawHollowRectangleCoord>
    	ILI9341_DrawFilledRectangleCoord(5, 100, 100, 140, RED);
 80019ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	238c      	movs	r3, #140	; 0x8c
 80019f6:	2264      	movs	r2, #100	; 0x64
 80019f8:	2164      	movs	r1, #100	; 0x64
 80019fa:	2005      	movs	r0, #5
 80019fc:	f7ff fd99 	bl	8001532 <ILI9341_DrawFilledRectangleCoord>
        ILI9341_DrawText("Road Sign", FONT3, 10, 110, WHITE, RED);
 8001a00:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a04:	9301      	str	r3, [sp, #4]
 8001a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	236e      	movs	r3, #110	; 0x6e
 8001a0e:	220a      	movs	r2, #10
 8001a10:	493f      	ldr	r1, [pc, #252]	; (8001b10 <ILI9341_ShowRoadSigns+0x1f0>)
 8001a12:	4840      	ldr	r0, [pc, #256]	; (8001b14 <ILI9341_ShowRoadSigns+0x1f4>)
 8001a14:	f7ff fe60 	bl	80016d8 <ILI9341_DrawText>
		ILI9341_DrawText("STOP", FONT4, 30, 150, BLACK, WHITE);
 8001a18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	2396      	movs	r3, #150	; 0x96
 8001a24:	221e      	movs	r2, #30
 8001a26:	493c      	ldr	r1, [pc, #240]	; (8001b18 <ILI9341_ShowRoadSigns+0x1f8>)
 8001a28:	483d      	ldr	r0, [pc, #244]	; (8001b20 <ILI9341_ShowRoadSigns+0x200>)
 8001a2a:	f7ff fe55 	bl	80016d8 <ILI9341_DrawText>
		break;
 8001a2e:	e06a      	b.n	8001b06 <ILI9341_ShowRoadSigns+0x1e6>
    case nocycling:
    	ILI9341_FillScreen(WHITE);
 8001a30:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a34:	f000 fb60 	bl	80020f8 <ILI9341_FillScreen>
    	ILI9341_DrawHollowRectangleCoord(1, 70, 200, 190, BLACK);
 8001a38:	2300      	movs	r3, #0
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	23be      	movs	r3, #190	; 0xbe
 8001a3e:	22c8      	movs	r2, #200	; 0xc8
 8001a40:	2146      	movs	r1, #70	; 0x46
 8001a42:	2001      	movs	r0, #1
 8001a44:	f7ff fcf4 	bl	8001430 <ILI9341_DrawHollowRectangleCoord>
    	ILI9341_DrawHollowRectangleCoord(5, 100, 100, 140, BLUE);
 8001a48:	231f      	movs	r3, #31
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	238c      	movs	r3, #140	; 0x8c
 8001a4e:	2264      	movs	r2, #100	; 0x64
 8001a50:	2164      	movs	r1, #100	; 0x64
 8001a52:	2005      	movs	r0, #5
 8001a54:	f7ff fcec 	bl	8001430 <ILI9341_DrawHollowRectangleCoord>
    	ILI9341_DrawFilledRectangleCoord(5, 100, 100, 140, RED);
 8001a58:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	238c      	movs	r3, #140	; 0x8c
 8001a60:	2264      	movs	r2, #100	; 0x64
 8001a62:	2164      	movs	r1, #100	; 0x64
 8001a64:	2005      	movs	r0, #5
 8001a66:	f7ff fd64 	bl	8001532 <ILI9341_DrawFilledRectangleCoord>
        ILI9341_DrawText("Road Sign", FONT3, 10, 110, WHITE, RED);
 8001a6a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	236e      	movs	r3, #110	; 0x6e
 8001a78:	220a      	movs	r2, #10
 8001a7a:	4925      	ldr	r1, [pc, #148]	; (8001b10 <ILI9341_ShowRoadSigns+0x1f0>)
 8001a7c:	4825      	ldr	r0, [pc, #148]	; (8001b14 <ILI9341_ShowRoadSigns+0x1f4>)
 8001a7e:	f7ff fe2b 	bl	80016d8 <ILI9341_DrawText>
		ILI9341_DrawText("NO CYCLING", FONT4, 30, 150, BLACK, WHITE);
 8001a82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2396      	movs	r3, #150	; 0x96
 8001a8e:	221e      	movs	r2, #30
 8001a90:	4921      	ldr	r1, [pc, #132]	; (8001b18 <ILI9341_ShowRoadSigns+0x1f8>)
 8001a92:	4824      	ldr	r0, [pc, #144]	; (8001b24 <ILI9341_ShowRoadSigns+0x204>)
 8001a94:	f7ff fe20 	bl	80016d8 <ILI9341_DrawText>
		break;
 8001a98:	e035      	b.n	8001b06 <ILI9341_ShowRoadSigns+0x1e6>
    case yeild:
    	ILI9341_FillScreen(WHITE);
 8001a9a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a9e:	f000 fb2b 	bl	80020f8 <ILI9341_FillScreen>
    	ILI9341_DrawHollowRectangleCoord(1, 70, 200, 190, BLACK);
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	23be      	movs	r3, #190	; 0xbe
 8001aa8:	22c8      	movs	r2, #200	; 0xc8
 8001aaa:	2146      	movs	r1, #70	; 0x46
 8001aac:	2001      	movs	r0, #1
 8001aae:	f7ff fcbf 	bl	8001430 <ILI9341_DrawHollowRectangleCoord>
    	ILI9341_DrawHollowRectangleCoord(5, 100, 100, 140, BLUE);
 8001ab2:	231f      	movs	r3, #31
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	238c      	movs	r3, #140	; 0x8c
 8001ab8:	2264      	movs	r2, #100	; 0x64
 8001aba:	2164      	movs	r1, #100	; 0x64
 8001abc:	2005      	movs	r0, #5
 8001abe:	f7ff fcb7 	bl	8001430 <ILI9341_DrawHollowRectangleCoord>
    	ILI9341_DrawFilledRectangleCoord(5, 100, 100, 140, RED);
 8001ac2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	238c      	movs	r3, #140	; 0x8c
 8001aca:	2264      	movs	r2, #100	; 0x64
 8001acc:	2164      	movs	r1, #100	; 0x64
 8001ace:	2005      	movs	r0, #5
 8001ad0:	f7ff fd2f 	bl	8001532 <ILI9341_DrawFilledRectangleCoord>
        ILI9341_DrawText("Road Sign", FONT3, 10, 110, WHITE, RED);
 8001ad4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ad8:	9301      	str	r3, [sp, #4]
 8001ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	236e      	movs	r3, #110	; 0x6e
 8001ae2:	220a      	movs	r2, #10
 8001ae4:	490a      	ldr	r1, [pc, #40]	; (8001b10 <ILI9341_ShowRoadSigns+0x1f0>)
 8001ae6:	480b      	ldr	r0, [pc, #44]	; (8001b14 <ILI9341_ShowRoadSigns+0x1f4>)
 8001ae8:	f7ff fdf6 	bl	80016d8 <ILI9341_DrawText>
		ILI9341_DrawText("ROAD WORKS", FONT4, 30, 150, BLACK, WHITE);
 8001aec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	2300      	movs	r3, #0
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2396      	movs	r3, #150	; 0x96
 8001af8:	221e      	movs	r2, #30
 8001afa:	4907      	ldr	r1, [pc, #28]	; (8001b18 <ILI9341_ShowRoadSigns+0x1f8>)
 8001afc:	480a      	ldr	r0, [pc, #40]	; (8001b28 <ILI9341_ShowRoadSigns+0x208>)
 8001afe:	f7ff fdeb 	bl	80016d8 <ILI9341_DrawText>
		break;
 8001b02:	e000      	b.n	8001b06 <ILI9341_ShowRoadSigns+0x1e6>
    default:
    	break;
 8001b04:	bf00      	nop
    }
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	08004700 	.word	0x08004700
 8001b14:	080046b4 	.word	0x080046b4
 8001b18:	08005064 	.word	0x08005064
 8001b1c:	080046c0 	.word	0x080046c0
 8001b20:	080046d4 	.word	0x080046d4
 8001b24:	080046dc 	.word	0x080046dc
 8001b28:	080046e8 	.word	0x080046e8

08001b2c <ILI9341_SPI_Tx>:
#include	"../Inc/MCAL/SYSTIC/STK_interface.h"

volatile u16 LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile u16 LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;
static void ILI9341_SPI_Tx(u8 data)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
	//HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
	//SPI_transmit(HSPI_INSTANCE, &data, 1,10);
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
	//SPI_transmit(&data, 1);
	//SPI_voidSendRecSynch(SPI1 , data);
	SPI_transmit(SPI1 , &data, 1);
 8001b36:	1dfb      	adds	r3, r7, #7
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f001 fadf 	bl	8003100 <SPI_transmit>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(u8 *buffer, u8 len)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	460b      	mov	r3, r1
 8001b54:	70fb      	strb	r3, [r7, #3]
	//u16 vounter=0;
	//while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
	//HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
	//SPI_transmit(HSPI_INSTANCE, buffer, len,10);
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
	SPI_transmit(SPI1 , buffer, len);
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f001 face 	bl	8003100 <SPI_transmit>
	/*while(vounter<len)
	{
		SPI_voidSendRecSynch(SPI1 , buffer[vounter]);
		vounter++;
	}*/
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(u8 cmd)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
	// RESET DC PIN    RESET CS PIN
	MGPIO_voidSetPinValue(LCD_DC_PORT, LCD_DC_PIN, GPIO_LOW);	//command
 8001b76:	2200      	movs	r2, #0
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f7ff fa6e 	bl	800105c <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(LCD_CS_PORT, LCD_CS_PIN, GPIO_LOW);	//select
 8001b80:	2200      	movs	r2, #0
 8001b82:	210a      	movs	r1, #10
 8001b84:	2001      	movs	r0, #1
 8001b86:	f7ff fa69 	bl	800105c <MGPIO_voidSetPinValue>
	ILI9341_SPI_Tx(cmd);
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ffcd 	bl	8001b2c <ILI9341_SPI_Tx>
	MGPIO_voidSetPinValue    (LCD_CS_PORT , LCD_CS_PIN  , GPIO_HIGH);
 8001b92:	2201      	movs	r2, #1
 8001b94:	210a      	movs	r1, #10
 8001b96:	2001      	movs	r0, #1
 8001b98:	f7ff fa60 	bl	800105c <MGPIO_voidSetPinValue>

	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <ILI9341_WriteData>:

void ILI9341_WriteData(u8 data)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
	// SET DC PIN    RESET CS PIN
	MGPIO_voidSetPinValue(LCD_DC_PORT, LCD_DC_PIN, GPIO_HIGH);	//data
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	f7ff fa52 	bl	800105c <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(LCD_CS_PORT, LCD_CS_PIN, GPIO_LOW);	//select
 8001bb8:	2200      	movs	r2, #0
 8001bba:	210a      	movs	r1, #10
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f7ff fa4d 	bl	800105c <MGPIO_voidSetPinValue>
	ILI9341_SPI_Tx(data);
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ffb1 	bl	8001b2c <ILI9341_SPI_Tx>
	MGPIO_voidSetPinValue    (LCD_CS_PORT , LCD_CS_PIN  , GPIO_HIGH);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	210a      	movs	r1, #10
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f7ff fa44 	bl	800105c <MGPIO_voidSetPinValue>

	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(u8 *buffer, u16 len)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
	//u16 counter=0;
	MGPIO_voidSetPinValue(LCD_DC_PORT, LCD_DC_PIN, GPIO_HIGH);	//data
 8001be8:	2201      	movs	r2, #1
 8001bea:	2100      	movs	r1, #0
 8001bec:	2001      	movs	r0, #1
 8001bee:	f7ff fa35 	bl	800105c <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(LCD_CS_PORT, LCD_CS_PIN, GPIO_LOW);	//select
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	210a      	movs	r1, #10
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f7ff fa30 	bl	800105c <MGPIO_voidSetPinValue>
	ILI9341_SPI_TxBuffer(buffer, len);
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	4619      	mov	r1, r3
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ffa1 	bl	8001b4a <ILI9341_SPI_TxBuffer>
	MGPIO_voidSetPinValue    (LCD_CS_PORT , LCD_CS_PIN  , GPIO_HIGH);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	210a      	movs	r1, #10
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f7ff fa25 	bl	800105c <MGPIO_voidSetPinValue>
		SPI_voidSendRecSynch (SPI1 , buffer[counter]);
	}
	MGPIO_voidSetPinValue    (LCD_CS_PORT , LCD_CS_PIN  , GPIO_HIGH);*/

	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <ILI9341_SetAddress>:

void ILI9341_SetAddress(u16 x1, u16 y1, u16 x2, u16 y2)
{
 8001c1a:	b590      	push	{r4, r7, lr}
 8001c1c:	b085      	sub	sp, #20
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4604      	mov	r4, r0
 8001c22:	4608      	mov	r0, r1
 8001c24:	4611      	mov	r1, r2
 8001c26:	461a      	mov	r2, r3
 8001c28:	4623      	mov	r3, r4
 8001c2a:	80fb      	strh	r3, [r7, #6]
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	80bb      	strh	r3, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	807b      	strh	r3, [r7, #2]
 8001c34:	4613      	mov	r3, r2
 8001c36:	803b      	strh	r3, [r7, #0]
	u8 buffer[4];
	buffer[0] = x1 >> 8;
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	0a1b      	lsrs	r3, r3, #8
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8001c48:	887b      	ldrh	r3, [r7, #2]
 8001c4a:	0a1b      	lsrs	r3, r3, #8
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8001c52:	887b      	ldrh	r3, [r7, #2]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8001c58:	202a      	movs	r0, #42	; 0x2a
 8001c5a:	f7ff ff87 	bl	8001b6c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001c5e:	f107 030c 	add.w	r3, r7, #12
 8001c62:	2104      	movs	r1, #4
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ffb9 	bl	8001bdc <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8001c6a:	88bb      	ldrh	r3, [r7, #4]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8001c74:	88bb      	ldrh	r3, [r7, #4]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8001c7a:	883b      	ldrh	r3, [r7, #0]
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8001c84:	883b      	ldrh	r3, [r7, #0]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8001c8a:	202b      	movs	r0, #43	; 0x2b
 8001c8c:	f7ff ff6e 	bl	8001b6c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	2104      	movs	r1, #4
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ffa0 	bl	8001bdc <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8001c9c:	202c      	movs	r0, #44	; 0x2c
 8001c9e:	f7ff ff65 	bl	8001b6c <ILI9341_WriteCommand>
}
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd90      	pop	{r4, r7, pc}

08001caa <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	af00      	add	r7, sp, #0
	MGPIO_voidSetPinValue(LCD_RST_PORT, LCD_RST_PIN, GPIO_LOW);	//Disable
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f7ff f9d2 	bl	800105c <MGPIO_voidSetPinValue>
	MSTK_voidSetBusyWait 		  (10000);
 8001cb8:	f242 7010 	movw	r0, #10000	; 0x2710
 8001cbc:	f001 fac6 	bl	800324c <MSTK_voidSetBusyWait>
	MGPIO_voidSetPinValue(LCD_CS_PORT, LCD_CS_PIN, GPIO_LOW);		//Select
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	210a      	movs	r1, #10
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f7ff f9c9 	bl	800105c <MGPIO_voidSetPinValue>
	MSTK_voidSetBusyWait 		  (10000);
 8001cca:	f242 7010 	movw	r0, #10000	; 0x2710
 8001cce:	f001 fabd 	bl	800324c <MSTK_voidSetBusyWait>
	MGPIO_voidSetPinValue(LCD_RST_PORT, LCD_RST_PIN, GPIO_HIGH);		//Enable
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	f7ff f9c0 	bl	800105c <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(LCD_CS_PORT, LCD_CS_PIN, GPIO_HIGH); 		//Deselect
 8001cdc:	2201      	movs	r2, #1
 8001cde:	210a      	movs	r1, #10
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f7ff f9bb 	bl	800105c <MGPIO_voidSetPinValue>
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	af00      	add	r7, sp, #0
	MGPIO_voidSetPinValue(LCD_RST_PORT, LCD_RST_PIN, GPIO_HIGH);		//Enable
 8001cee:	2201      	movs	r2, #1
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	f7ff f9b2 	bl	800105c <MGPIO_voidSetPinValue>
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <ILI9341_Init>:

void ILI9341_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	MGPIO_voidSetPinDirection   (LCD_CS_PORT , LCD_CS_PIN  , OUTPUT_SPEED_10MHZ_PP);
 8001d00:	2201      	movs	r2, #1
 8001d02:	210a      	movs	r1, #10
 8001d04:	2001      	movs	r0, #1
 8001d06:	f7ff f8cb 	bl	8000ea0 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection   (LCD_DC_PORT , LCD_DC_PIN  ,  OUTPUT_SPEED_10MHZ_PP);
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2001      	movs	r0, #1
 8001d10:	f7ff f8c6 	bl	8000ea0 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection   (LCD_RST_PORT , LCD_RST_PIN  ,  OUTPUT_SPEED_10MHZ_PP);
 8001d14:	2201      	movs	r2, #1
 8001d16:	2101      	movs	r1, #1
 8001d18:	2001      	movs	r0, #1
 8001d1a:	f7ff f8c1 	bl	8000ea0 <MGPIO_voidSetPinDirection>
	ILI9341_Enable();
 8001d1e:	f7ff ffe4 	bl	8001cea <ILI9341_Enable>
	ILI9341_Reset();
 8001d22:	f7ff ffc2 	bl	8001caa <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8001d26:	2001      	movs	r0, #1
 8001d28:	f7ff ff20 	bl	8001b6c <ILI9341_WriteCommand>
	MSTK_voidSetBusyWait 		  (10000);
 8001d2c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001d30:	f001 fa8c 	bl	800324c <MSTK_voidSetBusyWait>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8001d34:	20cb      	movs	r0, #203	; 0xcb
 8001d36:	f7ff ff19 	bl	8001b6c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8001d3a:	2039      	movs	r0, #57	; 0x39
 8001d3c:	f7ff ff32 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8001d40:	202c      	movs	r0, #44	; 0x2c
 8001d42:	f7ff ff2f 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001d46:	2000      	movs	r0, #0
 8001d48:	f7ff ff2c 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8001d4c:	2034      	movs	r0, #52	; 0x34
 8001d4e:	f7ff ff29 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8001d52:	2002      	movs	r0, #2
 8001d54:	f7ff ff26 	bl	8001ba4 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8001d58:	20cf      	movs	r0, #207	; 0xcf
 8001d5a:	f7ff ff07 	bl	8001b6c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f7ff ff20 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001d64:	20c1      	movs	r0, #193	; 0xc1
 8001d66:	f7ff ff1d 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8001d6a:	2030      	movs	r0, #48	; 0x30
 8001d6c:	f7ff ff1a 	bl	8001ba4 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8001d70:	20e8      	movs	r0, #232	; 0xe8
 8001d72:	f7ff fefb 	bl	8001b6c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8001d76:	2085      	movs	r0, #133	; 0x85
 8001d78:	f7ff ff14 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff ff11 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8001d82:	2078      	movs	r0, #120	; 0x78
 8001d84:	f7ff ff0e 	bl	8001ba4 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8001d88:	20ea      	movs	r0, #234	; 0xea
 8001d8a:	f7ff feef 	bl	8001b6c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f7ff ff08 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7ff ff05 	bl	8001ba4 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8001d9a:	20ed      	movs	r0, #237	; 0xed
 8001d9c:	f7ff fee6 	bl	8001b6c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8001da0:	2064      	movs	r0, #100	; 0x64
 8001da2:	f7ff feff 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001da6:	2003      	movs	r0, #3
 8001da8:	f7ff fefc 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8001dac:	2012      	movs	r0, #18
 8001dae:	f7ff fef9 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8001db2:	2081      	movs	r0, #129	; 0x81
 8001db4:	f7ff fef6 	bl	8001ba4 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8001db8:	20f7      	movs	r0, #247	; 0xf7
 8001dba:	f7ff fed7 	bl	8001b6c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8001dbe:	2020      	movs	r0, #32
 8001dc0:	f7ff fef0 	bl	8001ba4 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8001dc4:	20c0      	movs	r0, #192	; 0xc0
 8001dc6:	f7ff fed1 	bl	8001b6c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8001dca:	2023      	movs	r0, #35	; 0x23
 8001dcc:	f7ff feea 	bl	8001ba4 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8001dd0:	20c1      	movs	r0, #193	; 0xc1
 8001dd2:	f7ff fecb 	bl	8001b6c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8001dd6:	2010      	movs	r0, #16
 8001dd8:	f7ff fee4 	bl	8001ba4 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8001ddc:	20c5      	movs	r0, #197	; 0xc5
 8001dde:	f7ff fec5 	bl	8001b6c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8001de2:	203e      	movs	r0, #62	; 0x3e
 8001de4:	f7ff fede 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8001de8:	2028      	movs	r0, #40	; 0x28
 8001dea:	f7ff fedb 	bl	8001ba4 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8001dee:	20c7      	movs	r0, #199	; 0xc7
 8001df0:	f7ff febc 	bl	8001b6c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8001df4:	2086      	movs	r0, #134	; 0x86
 8001df6:	f7ff fed5 	bl	8001ba4 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8001dfa:	2036      	movs	r0, #54	; 0x36
 8001dfc:	f7ff feb6 	bl	8001b6c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8001e00:	2048      	movs	r0, #72	; 0x48
 8001e02:	f7ff fecf 	bl	8001ba4 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8001e06:	203a      	movs	r0, #58	; 0x3a
 8001e08:	f7ff feb0 	bl	8001b6c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8001e0c:	2055      	movs	r0, #85	; 0x55
 8001e0e:	f7ff fec9 	bl	8001ba4 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8001e12:	20b1      	movs	r0, #177	; 0xb1
 8001e14:	f7ff feaa 	bl	8001b6c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f7ff fec3 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8001e1e:	2018      	movs	r0, #24
 8001e20:	f7ff fec0 	bl	8001ba4 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8001e24:	20b6      	movs	r0, #182	; 0xb6
 8001e26:	f7ff fea1 	bl	8001b6c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8001e2a:	2008      	movs	r0, #8
 8001e2c:	f7ff feba 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8001e30:	2082      	movs	r0, #130	; 0x82
 8001e32:	f7ff feb7 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8001e36:	2027      	movs	r0, #39	; 0x27
 8001e38:	f7ff feb4 	bl	8001ba4 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8001e3c:	20f2      	movs	r0, #242	; 0xf2
 8001e3e:	f7ff fe95 	bl	8001b6c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001e42:	2000      	movs	r0, #0
 8001e44:	f7ff feae 	bl	8001ba4 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8001e48:	2026      	movs	r0, #38	; 0x26
 8001e4a:	f7ff fe8f 	bl	8001b6c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8001e4e:	2001      	movs	r0, #1
 8001e50:	f7ff fea8 	bl	8001ba4 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8001e54:	20e0      	movs	r0, #224	; 0xe0
 8001e56:	f7ff fe89 	bl	8001b6c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8001e5a:	200f      	movs	r0, #15
 8001e5c:	f7ff fea2 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001e60:	2031      	movs	r0, #49	; 0x31
 8001e62:	f7ff fe9f 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8001e66:	202b      	movs	r0, #43	; 0x2b
 8001e68:	f7ff fe9c 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001e6c:	200c      	movs	r0, #12
 8001e6e:	f7ff fe99 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001e72:	200e      	movs	r0, #14
 8001e74:	f7ff fe96 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001e78:	2008      	movs	r0, #8
 8001e7a:	f7ff fe93 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8001e7e:	204e      	movs	r0, #78	; 0x4e
 8001e80:	f7ff fe90 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8001e84:	20f1      	movs	r0, #241	; 0xf1
 8001e86:	f7ff fe8d 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8001e8a:	2037      	movs	r0, #55	; 0x37
 8001e8c:	f7ff fe8a 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001e90:	2007      	movs	r0, #7
 8001e92:	f7ff fe87 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8001e96:	2010      	movs	r0, #16
 8001e98:	f7ff fe84 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	f7ff fe81 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001ea2:	200e      	movs	r0, #14
 8001ea4:	f7ff fe7e 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8001ea8:	2009      	movs	r0, #9
 8001eaa:	f7ff fe7b 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f7ff fe78 	bl	8001ba4 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8001eb4:	20e1      	movs	r0, #225	; 0xe1
 8001eb6:	f7ff fe59 	bl	8001b6c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7ff fe72 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001ec0:	200e      	movs	r0, #14
 8001ec2:	f7ff fe6f 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8001ec6:	2014      	movs	r0, #20
 8001ec8:	f7ff fe6c 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001ecc:	2003      	movs	r0, #3
 8001ece:	f7ff fe69 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8001ed2:	2011      	movs	r0, #17
 8001ed4:	f7ff fe66 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001ed8:	2007      	movs	r0, #7
 8001eda:	f7ff fe63 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001ede:	2031      	movs	r0, #49	; 0x31
 8001ee0:	f7ff fe60 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001ee4:	20c1      	movs	r0, #193	; 0xc1
 8001ee6:	f7ff fe5d 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8001eea:	2048      	movs	r0, #72	; 0x48
 8001eec:	f7ff fe5a 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001ef0:	2008      	movs	r0, #8
 8001ef2:	f7ff fe57 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001ef6:	200f      	movs	r0, #15
 8001ef8:	f7ff fe54 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001efc:	200c      	movs	r0, #12
 8001efe:	f7ff fe51 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001f02:	2031      	movs	r0, #49	; 0x31
 8001f04:	f7ff fe4e 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8001f08:	2036      	movs	r0, #54	; 0x36
 8001f0a:	f7ff fe4b 	bl	8001ba4 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001f0e:	200f      	movs	r0, #15
 8001f10:	f7ff fe48 	bl	8001ba4 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8001f14:	2011      	movs	r0, #17
 8001f16:	f7ff fe29 	bl	8001b6c <ILI9341_WriteCommand>
	MSTK_voidSetBusyWait 		  (100000);
 8001f1a:	4805      	ldr	r0, [pc, #20]	; (8001f30 <ILI9341_Init+0x234>)
 8001f1c:	f001 f996 	bl	800324c <MSTK_voidSetBusyWait>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8001f20:	2029      	movs	r0, #41	; 0x29
 8001f22:	f7ff fe23 	bl	8001b6c <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_2);
 8001f26:	2002      	movs	r0, #2
 8001f28:	f000 f804 	bl	8001f34 <ILI9341_SetRotation>
}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	000186a0 	.word	0x000186a0

08001f34 <ILI9341_SetRotation>:

void ILI9341_SetRotation(u8 rotation)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8001f3e:	2036      	movs	r0, #54	; 0x36
 8001f40:	f7ff fe14 	bl	8001b6c <ILI9341_WriteCommand>
	MSTK_voidSetBusyWait 		  (1000);
 8001f44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f48:	f001 f980 	bl	800324c <MSTK_voidSetBusyWait>

	switch(rotation)
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d836      	bhi.n	8001fc0 <ILI9341_SetRotation+0x8c>
 8001f52:	a201      	add	r2, pc, #4	; (adr r2, 8001f58 <ILI9341_SetRotation+0x24>)
 8001f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f58:	08001f69 	.word	0x08001f69
 8001f5c:	08001f7f 	.word	0x08001f7f
 8001f60:	08001f95 	.word	0x08001f95
 8001f64:	08001fab 	.word	0x08001fab
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8001f68:	2048      	movs	r0, #72	; 0x48
 8001f6a:	f7ff fe1b 	bl	8001ba4 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8001f6e:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <ILI9341_SetRotation+0x98>)
 8001f70:	22f0      	movs	r2, #240	; 0xf0
 8001f72:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001f74:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <ILI9341_SetRotation+0x9c>)
 8001f76:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f7a:	801a      	strh	r2, [r3, #0]
		break;
 8001f7c:	e021      	b.n	8001fc2 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8001f7e:	2028      	movs	r0, #40	; 0x28
 8001f80:	f7ff fe10 	bl	8001ba4 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <ILI9341_SetRotation+0x98>)
 8001f86:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f8a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001f8c:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <ILI9341_SetRotation+0x9c>)
 8001f8e:	22f0      	movs	r2, #240	; 0xf0
 8001f90:	801a      	strh	r2, [r3, #0]
		break;
 8001f92:	e016      	b.n	8001fc2 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8001f94:	2088      	movs	r0, #136	; 0x88
 8001f96:	f7ff fe05 	bl	8001ba4 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <ILI9341_SetRotation+0x98>)
 8001f9c:	22f0      	movs	r2, #240	; 0xf0
 8001f9e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <ILI9341_SetRotation+0x9c>)
 8001fa2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001fa6:	801a      	strh	r2, [r3, #0]
		break;
 8001fa8:	e00b      	b.n	8001fc2 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8001faa:	20e8      	movs	r0, #232	; 0xe8
 8001fac:	f7ff fdfa 	bl	8001ba4 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <ILI9341_SetRotation+0x98>)
 8001fb2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001fb6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <ILI9341_SetRotation+0x9c>)
 8001fba:	22f0      	movs	r2, #240	; 0xf0
 8001fbc:	801a      	strh	r2, [r3, #0]
		break;
 8001fbe:	e000      	b.n	8001fc2 <ILI9341_SetRotation+0x8e>
	default:
		break;
 8001fc0:	bf00      	nop
	}
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000002 	.word	0x20000002
 8001fd0:	20000000 	.word	0x20000000

08001fd4 <ILI9341_DrawColorBurst>:
	u8 buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(u16 color, u32 size)
{
 8001fd4:	b5b0      	push	{r4, r5, r7, lr}
 8001fd6:	b08c      	sub	sp, #48	; 0x30
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	80fb      	strh	r3, [r7, #6]
 8001fe0:	466b      	mov	r3, sp
 8001fe2:	461d      	mov	r5, r3
	u32 BufferSize = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ff0:	d202      	bcs.n	8001ff8 <ILI9341_DrawColorBurst+0x24>
	{
		BufferSize = size;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff6:	e002      	b.n	8001ffe <ILI9341_DrawColorBurst+0x2a>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8001ff8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
	}

	MGPIO_voidSetPinValue(LCD_DC_PORT, LCD_DC_PIN, GPIO_HIGH);
 8001ffe:	2201      	movs	r2, #1
 8002000:	2100      	movs	r1, #0
 8002002:	2001      	movs	r0, #1
 8002004:	f7ff f82a 	bl	800105c <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(LCD_CS_PORT, LCD_CS_PIN, GPIO_LOW);
 8002008:	2200      	movs	r2, #0
 800200a:	210a      	movs	r1, #10
 800200c:	2001      	movs	r0, #1
 800200e:	f7ff f825 	bl	800105c <MGPIO_voidSetPinValue>

	u8 chifted = color>>8;
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	b29b      	uxth	r3, r3
 8002018:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	u8 BurstBuffer[BufferSize];
 800201c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800201e:	4623      	mov	r3, r4
 8002020:	3b01      	subs	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	4620      	mov	r0, r4
 8002026:	f04f 0100 	mov.w	r1, #0
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	00cb      	lsls	r3, r1, #3
 8002034:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002038:	00c2      	lsls	r2, r0, #3
 800203a:	4620      	mov	r0, r4
 800203c:	f04f 0100 	mov.w	r1, #0
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	00cb      	lsls	r3, r1, #3
 800204a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800204e:	00c2      	lsls	r2, r0, #3
 8002050:	1de3      	adds	r3, r4, #7
 8002052:	08db      	lsrs	r3, r3, #3
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	ebad 0d03 	sub.w	sp, sp, r3
 800205a:	466b      	mov	r3, sp
 800205c:	3300      	adds	r3, #0
 800205e:	61bb      	str	r3, [r7, #24]

	for(u32 j = 0; j < BufferSize; j+=2)
 8002060:	2300      	movs	r3, #0
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
 8002064:	e00e      	b.n	8002084 <ILI9341_DrawColorBurst+0xb0>
	{
		BurstBuffer[j] = chifted;
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206a:	4413      	add	r3, r2
 800206c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002070:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8002072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002074:	3301      	adds	r3, #1
 8002076:	88fa      	ldrh	r2, [r7, #6]
 8002078:	b2d1      	uxtb	r1, r2
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	54d1      	strb	r1, [r2, r3]
	for(u32 j = 0; j < BufferSize; j+=2)
 800207e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002080:	3302      	adds	r3, #2
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
 8002084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	429a      	cmp	r2, r3
 800208a:	d3ec      	bcc.n	8002066 <ILI9341_DrawColorBurst+0x92>
	}

	u32 SendingSize = size * 2;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	617b      	str	r3, [r7, #20]
	u32 SendingInBlock = SendingSize / BufferSize;
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	fbb2 f3f3 	udiv	r3, r2, r3
 800209a:	613b      	str	r3, [r7, #16]
	u32 RemainderFromBlock = SendingSize % BufferSize;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80020a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020a6:	fb01 f202 	mul.w	r2, r1, r2
 80020aa:	1a9b      	subs	r3, r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d010      	beq.n	80020d6 <ILI9341_DrawColorBurst+0x102>
	{
		for(u32 j = 0; j < (SendingInBlock); j++)
 80020b4:	2300      	movs	r3, #0
 80020b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020b8:	e009      	b.n	80020ce <ILI9341_DrawColorBurst+0xfa>
		{
			ILI9341_WriteBuffer(BurstBuffer, BufferSize);
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020be:	b292      	uxth	r2, r2
 80020c0:	4611      	mov	r1, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fd8a 	bl	8001bdc <ILI9341_WriteBuffer>
		for(u32 j = 0; j < (SendingInBlock); j++)
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	3301      	adds	r3, #1
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d3f1      	bcc.n	80020ba <ILI9341_DrawColorBurst+0xe6>
		}
	}

	ILI9341_WriteBuffer(BurstBuffer, RemainderFromBlock);
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	b292      	uxth	r2, r2
 80020dc:	4611      	mov	r1, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fd7c 	bl	8001bdc <ILI9341_WriteBuffer>

	MGPIO_voidSetPinValue(LCD_CS_PORT, LCD_CS_PIN, GPIO_HIGH);
 80020e4:	2201      	movs	r2, #1
 80020e6:	210a      	movs	r1, #10
 80020e8:	2001      	movs	r0, #1
 80020ea:	f7fe ffb7 	bl	800105c <MGPIO_voidSetPinValue>
 80020ee:	46ad      	mov	sp, r5
}
 80020f0:	bf00      	nop
 80020f2:	3730      	adds	r7, #48	; 0x30
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bdb0      	pop	{r4, r5, r7, pc}

080020f8 <ILI9341_FillScreen>:

void ILI9341_FillScreen(u16 color)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <ILI9341_FillScreen+0x60>)
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	b29a      	uxth	r2, r3
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <ILI9341_FillScreen+0x64>)
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	b29b      	uxth	r3, r3
 800210e:	2100      	movs	r1, #0
 8002110:	2000      	movs	r0, #0
 8002112:	f7ff fd82 	bl	8001c1a <ILI9341_SetAddress>
	//ILI9341_DrawColor(color);
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT*2.25);
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <ILI9341_FillScreen+0x60>)
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	4b0f      	ldr	r3, [pc, #60]	; (800215c <ILI9341_FillScreen+0x64>)
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	fb03 f302 	mul.w	r3, r3, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fa27 	bl	800057c <__aeabi_i2d>
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <ILI9341_FillScreen+0x68>)
 8002134:	f7fe fa8c 	bl	8000650 <__aeabi_dmul>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4610      	mov	r0, r2
 800213e:	4619      	mov	r1, r3
 8002140:	f7fe fc98 	bl	8000a74 <__aeabi_d2uiz>
 8002144:	4602      	mov	r2, r0
 8002146:	88fb      	ldrh	r3, [r7, #6]
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff ff42 	bl	8001fd4 <ILI9341_DrawColorBurst>

}
 8002150:	bf00      	nop
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000002 	.word	0x20000002
 800215c:	20000000 	.word	0x20000000
 8002160:	40020000 	.word	0x40020000

08002164 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(u16 x,u16 y,u16 color)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	80fb      	strh	r3, [r7, #6]
 800216e:	460b      	mov	r3, r1
 8002170:	80bb      	strh	r3, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8002176:	4b2c      	ldr	r3, [pc, #176]	; (8002228 <ILI9341_DrawPixel+0xc4>)
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	b29b      	uxth	r3, r3
 800217c:	88fa      	ldrh	r2, [r7, #6]
 800217e:	429a      	cmp	r2, r3
 8002180:	d24d      	bcs.n	800221e <ILI9341_DrawPixel+0xba>
 8002182:	4b2a      	ldr	r3, [pc, #168]	; (800222c <ILI9341_DrawPixel+0xc8>)
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	b29b      	uxth	r3, r3
 8002188:	88ba      	ldrh	r2, [r7, #4]
 800218a:	429a      	cmp	r2, r3
 800218c:	d247      	bcs.n	800221e <ILI9341_DrawPixel+0xba>

	u8 bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	b29b      	uxth	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	753b      	strb	r3, [r7, #20]
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	757b      	strb	r3, [r7, #21]
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	3301      	adds	r3, #1
 80021a2:	121b      	asrs	r3, r3, #8
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	75bb      	strb	r3, [r7, #22]
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	3301      	adds	r3, #1
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	75fb      	strb	r3, [r7, #23]
	u8 bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 80021b2:	88bb      	ldrh	r3, [r7, #4]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	743b      	strb	r3, [r7, #16]
 80021bc:	88bb      	ldrh	r3, [r7, #4]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	747b      	strb	r3, [r7, #17]
 80021c2:	88bb      	ldrh	r3, [r7, #4]
 80021c4:	3301      	adds	r3, #1
 80021c6:	121b      	asrs	r3, r3, #8
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	74bb      	strb	r3, [r7, #18]
 80021cc:	88bb      	ldrh	r3, [r7, #4]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	3301      	adds	r3, #1
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	74fb      	strb	r3, [r7, #19]
	u8 bufferC[2] = {color>>8, color};
 80021d6:	887b      	ldrh	r3, [r7, #2]
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	b29b      	uxth	r3, r3
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	733b      	strb	r3, [r7, #12]
 80021e0:	887b      	ldrh	r3, [r7, #2]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A); //ADDRESS
 80021e6:	202a      	movs	r0, #42	; 0x2a
 80021e8:	f7ff fcc0 	bl	8001b6c <ILI9341_WriteCommand>
	/*ILI9341_WriteData(bufferX[0]);
	ILI9341_WriteData(bufferX[1]);
	ILI9341_WriteData(bufferX[2]);
	ILI9341_WriteData(bufferX[3]);*/

	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	2104      	movs	r1, #4
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fcf2 	bl	8001bdc <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);	//ADDRESS
 80021f8:	202b      	movs	r0, #43	; 0x2b
 80021fa:	f7ff fcb7 	bl	8001b6c <ILI9341_WriteCommand>
	/*ILI9341_WriteData(bufferY[0]);
	ILI9341_WriteData(bufferY[1]);
	ILI9341_WriteData(bufferY[2]);
	ILI9341_WriteData(bufferY[3]);*/
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 80021fe:	f107 0310 	add.w	r3, r7, #16
 8002202:	2104      	movs	r1, #4
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fce9 	bl	8001bdc <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 800220a:	202c      	movs	r0, #44	; 0x2c
 800220c:	f7ff fcae 	bl	8001b6c <ILI9341_WriteCommand>
	/*ILI9341_WriteData(bufferC[0]);
	ILI9341_WriteData(bufferC[1]);*/
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	2102      	movs	r1, #2
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fce0 	bl	8001bdc <ILI9341_WriteBuffer>
 800221c:	e000      	b.n	8002220 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800221e:	bf00      	nop
}
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000002 	.word	0x20000002
 800222c:	20000000 	.word	0x20000000

08002230 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(u16 x, u16 y, u16 width, u16 height, u16 color)
{
 8002230:	b590      	push	{r4, r7, lr}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	4604      	mov	r4, r0
 8002238:	4608      	mov	r0, r1
 800223a:	4611      	mov	r1, r2
 800223c:	461a      	mov	r2, r3
 800223e:	4623      	mov	r3, r4
 8002240:	80fb      	strh	r3, [r7, #6]
 8002242:	4603      	mov	r3, r0
 8002244:	80bb      	strh	r3, [r7, #4]
 8002246:	460b      	mov	r3, r1
 8002248:	807b      	strh	r3, [r7, #2]
 800224a:	4613      	mov	r3, r2
 800224c:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800224e:	4b2b      	ldr	r3, [pc, #172]	; (80022fc <ILI9341_DrawRectangle+0xcc>)
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	88fa      	ldrh	r2, [r7, #6]
 8002256:	429a      	cmp	r2, r3
 8002258:	d24b      	bcs.n	80022f2 <ILI9341_DrawRectangle+0xc2>
 800225a:	4b29      	ldr	r3, [pc, #164]	; (8002300 <ILI9341_DrawRectangle+0xd0>)
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	88ba      	ldrh	r2, [r7, #4]
 8002262:	429a      	cmp	r2, r3
 8002264:	d245      	bcs.n	80022f2 <ILI9341_DrawRectangle+0xc2>

	if((x+width-1)>=LCD_WIDTH)
 8002266:	88fa      	ldrh	r2, [r7, #6]
 8002268:	887b      	ldrh	r3, [r7, #2]
 800226a:	4413      	add	r3, r2
 800226c:	4a23      	ldr	r2, [pc, #140]	; (80022fc <ILI9341_DrawRectangle+0xcc>)
 800226e:	8812      	ldrh	r2, [r2, #0]
 8002270:	b292      	uxth	r2, r2
 8002272:	4293      	cmp	r3, r2
 8002274:	dd05      	ble.n	8002282 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8002276:	4b21      	ldr	r3, [pc, #132]	; (80022fc <ILI9341_DrawRectangle+0xcc>)
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	b29a      	uxth	r2, r3
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8002282:	88ba      	ldrh	r2, [r7, #4]
 8002284:	883b      	ldrh	r3, [r7, #0]
 8002286:	4413      	add	r3, r2
 8002288:	4a1d      	ldr	r2, [pc, #116]	; (8002300 <ILI9341_DrawRectangle+0xd0>)
 800228a:	8812      	ldrh	r2, [r2, #0]
 800228c:	b292      	uxth	r2, r2
 800228e:	4293      	cmp	r3, r2
 8002290:	dd05      	ble.n	800229e <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8002292:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <ILI9341_DrawRectangle+0xd0>)
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	b29a      	uxth	r2, r3
 8002298:	88bb      	ldrh	r3, [r7, #4]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 800229e:	88fa      	ldrh	r2, [r7, #6]
 80022a0:	887b      	ldrh	r3, [r7, #2]
 80022a2:	4413      	add	r3, r2
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29c      	uxth	r4, r3
 80022aa:	88ba      	ldrh	r2, [r7, #4]
 80022ac:	883b      	ldrh	r3, [r7, #0]
 80022ae:	4413      	add	r3, r2
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	88b9      	ldrh	r1, [r7, #4]
 80022b8:	88f8      	ldrh	r0, [r7, #6]
 80022ba:	4622      	mov	r2, r4
 80022bc:	f7ff fcad 	bl	8001c1a <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width*2.25);
 80022c0:	883b      	ldrh	r3, [r7, #0]
 80022c2:	887a      	ldrh	r2, [r7, #2]
 80022c4:	fb02 f303 	mul.w	r3, r2, r3
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe f957 	bl	800057c <__aeabi_i2d>
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <ILI9341_DrawRectangle+0xd4>)
 80022d4:	f7fe f9bc 	bl	8000650 <__aeabi_dmul>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	f7fe fbc8 	bl	8000a74 <__aeabi_d2uiz>
 80022e4:	4602      	mov	r2, r0
 80022e6:	8b3b      	ldrh	r3, [r7, #24]
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fe72 	bl	8001fd4 <ILI9341_DrawColorBurst>
 80022f0:	e000      	b.n	80022f4 <ILI9341_DrawRectangle+0xc4>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80022f2:	bf00      	nop
}
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd90      	pop	{r4, r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000002 	.word	0x20000002
 8002300:	20000000 	.word	0x20000000
 8002304:	40020000 	.word	0x40020000

08002308 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(u16 x, u16 y, u16 width, u16 color)
{
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4604      	mov	r4, r0
 8002310:	4608      	mov	r0, r1
 8002312:	4611      	mov	r1, r2
 8002314:	461a      	mov	r2, r3
 8002316:	4623      	mov	r3, r4
 8002318:	80fb      	strh	r3, [r7, #6]
 800231a:	4603      	mov	r3, r0
 800231c:	80bb      	strh	r3, [r7, #4]
 800231e:	460b      	mov	r3, r1
 8002320:	807b      	strh	r3, [r7, #2]
 8002322:	4613      	mov	r3, r2
 8002324:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8002326:	4b18      	ldr	r3, [pc, #96]	; (8002388 <ILI9341_DrawHLine+0x80>)
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	88fa      	ldrh	r2, [r7, #6]
 800232e:	429a      	cmp	r2, r3
 8002330:	d225      	bcs.n	800237e <ILI9341_DrawHLine+0x76>
 8002332:	4b16      	ldr	r3, [pc, #88]	; (800238c <ILI9341_DrawHLine+0x84>)
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	88ba      	ldrh	r2, [r7, #4]
 800233a:	429a      	cmp	r2, r3
 800233c:	d21f      	bcs.n	800237e <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 800233e:	88fa      	ldrh	r2, [r7, #6]
 8002340:	887b      	ldrh	r3, [r7, #2]
 8002342:	4413      	add	r3, r2
 8002344:	4a10      	ldr	r2, [pc, #64]	; (8002388 <ILI9341_DrawHLine+0x80>)
 8002346:	8812      	ldrh	r2, [r2, #0]
 8002348:	b292      	uxth	r2, r2
 800234a:	4293      	cmp	r3, r2
 800234c:	dd05      	ble.n	800235a <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 800234e:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <ILI9341_DrawHLine+0x80>)
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	b29a      	uxth	r2, r3
 8002354:	88fb      	ldrh	r3, [r7, #6]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 800235a:	88fa      	ldrh	r2, [r7, #6]
 800235c:	887b      	ldrh	r3, [r7, #2]
 800235e:	4413      	add	r3, r2
 8002360:	b29b      	uxth	r3, r3
 8002362:	3b01      	subs	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	88bb      	ldrh	r3, [r7, #4]
 8002368:	88b9      	ldrh	r1, [r7, #4]
 800236a:	88f8      	ldrh	r0, [r7, #6]
 800236c:	f7ff fc55 	bl	8001c1a <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 8002370:	887a      	ldrh	r2, [r7, #2]
 8002372:	883b      	ldrh	r3, [r7, #0]
 8002374:	4611      	mov	r1, r2
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fe2c 	bl	8001fd4 <ILI9341_DrawColorBurst>
 800237c:	e000      	b.n	8002380 <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800237e:	bf00      	nop
}
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bd90      	pop	{r4, r7, pc}
 8002386:	bf00      	nop
 8002388:	20000002 	.word	0x20000002
 800238c:	20000000 	.word	0x20000000

08002390 <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(u16 x, u16 y, u16 height, u16 color)
{
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4604      	mov	r4, r0
 8002398:	4608      	mov	r0, r1
 800239a:	4611      	mov	r1, r2
 800239c:	461a      	mov	r2, r3
 800239e:	4623      	mov	r3, r4
 80023a0:	80fb      	strh	r3, [r7, #6]
 80023a2:	4603      	mov	r3, r0
 80023a4:	80bb      	strh	r3, [r7, #4]
 80023a6:	460b      	mov	r3, r1
 80023a8:	807b      	strh	r3, [r7, #2]
 80023aa:	4613      	mov	r3, r2
 80023ac:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80023ae:	4b18      	ldr	r3, [pc, #96]	; (8002410 <ILI9341_DrawVLine+0x80>)
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	88fa      	ldrh	r2, [r7, #6]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d225      	bcs.n	8002406 <ILI9341_DrawVLine+0x76>
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <ILI9341_DrawVLine+0x84>)
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	88ba      	ldrh	r2, [r7, #4]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d21f      	bcs.n	8002406 <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 80023c6:	88ba      	ldrh	r2, [r7, #4]
 80023c8:	887b      	ldrh	r3, [r7, #2]
 80023ca:	4413      	add	r3, r2
 80023cc:	4a11      	ldr	r2, [pc, #68]	; (8002414 <ILI9341_DrawVLine+0x84>)
 80023ce:	8812      	ldrh	r2, [r2, #0]
 80023d0:	b292      	uxth	r2, r2
 80023d2:	4293      	cmp	r3, r2
 80023d4:	dd05      	ble.n	80023e2 <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <ILI9341_DrawVLine+0x84>)
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	b29a      	uxth	r2, r3
 80023dc:	88bb      	ldrh	r3, [r7, #4]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 80023e2:	88ba      	ldrh	r2, [r7, #4]
 80023e4:	887b      	ldrh	r3, [r7, #2]
 80023e6:	4413      	add	r3, r2
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	88fa      	ldrh	r2, [r7, #6]
 80023f0:	88b9      	ldrh	r1, [r7, #4]
 80023f2:	88f8      	ldrh	r0, [r7, #6]
 80023f4:	f7ff fc11 	bl	8001c1a <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 80023f8:	887a      	ldrh	r2, [r7, #2]
 80023fa:	883b      	ldrh	r3, [r7, #0]
 80023fc:	4611      	mov	r1, r2
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fde8 	bl	8001fd4 <ILI9341_DrawColorBurst>
 8002404:	e000      	b.n	8002408 <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8002406:	bf00      	nop
}
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	bd90      	pop	{r4, r7, pc}
 800240e:	bf00      	nop
 8002410:	20000002 	.word	0x20000002
 8002414:	20000000 	.word	0x20000000

08002418 <HMD_voidInit>:
#include "../Inc/HAL/MD/MD_interface.h"
#include "../Inc/HAL/MD/MD_config.h"
#include "../Inc/HAL/MD/MD_private.h"

void HMD_voidInit(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
	MADC_Init();
 800241c:	f7fe fcfc 	bl	8000e18 <MADC_Init>
	MPWM_voidInit(TIMER2, CH1,8000);
 8002420:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002424:	2100      	movs	r1, #0
 8002426:	2000      	movs	r0, #0
 8002428:	f000 f98c 	bl	8002744 <MPWM_voidInit>
	MPWM_SETValuesOfPWM(TIMER2, CH1, 0);
 800242c:	2200      	movs	r2, #0
 800242e:	2100      	movs	r1, #0
 8002430:	2000      	movs	r0, #0
 8002432:	f000 fb2d 	bl	8002a90 <MPWM_SETValuesOfPWM>
	MGPIO_voidSetPinDirection(GPIOA , PIN2  , OUTPUT_SPEED_10MHZ_PP);
 8002436:	2201      	movs	r2, #1
 8002438:	2102      	movs	r1, #2
 800243a:	2000      	movs	r0, #0
 800243c:	f7fe fd30 	bl	8000ea0 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIOA , PIN3  , OUTPUT_SPEED_10MHZ_PP);
 8002440:	2201      	movs	r2, #1
 8002442:	2103      	movs	r1, #3
 8002444:	2000      	movs	r0, #0
 8002446:	f7fe fd2b 	bl	8000ea0 <MGPIO_voidSetPinDirection>
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HMD_voidForward>:


void HMD_voidForward(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0

	static s16 new=0,old=1000;
		new=MADC_Read(1);
 8002456:	2001      	movs	r0, #1
 8002458:	f7fe fcf4 	bl	8000e44 <MADC_Read>
 800245c:	4603      	mov	r3, r0
 800245e:	b21a      	sxth	r2, r3
 8002460:	4b9d      	ldr	r3, [pc, #628]	; (80026d8 <HMD_voidForward+0x288>)
 8002462:	801a      	strh	r2, [r3, #0]
		for(u32 i=0;i<5;i++);
 8002464:	2300      	movs	r3, #0
 8002466:	607b      	str	r3, [r7, #4]
 8002468:	e002      	b.n	8002470 <HMD_voidForward+0x20>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3301      	adds	r3, #1
 800246e:	607b      	str	r3, [r7, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b04      	cmp	r3, #4
 8002474:	d9f9      	bls.n	800246a <HMD_voidForward+0x1a>
		//MSTK_voidSetBusyWait 		  (500000);
		if(new-old>5)
 8002476:	4b98      	ldr	r3, [pc, #608]	; (80026d8 <HMD_voidForward+0x288>)
 8002478:	f9b3 3000 	ldrsh.w	r3, [r3]
 800247c:	461a      	mov	r2, r3
 800247e:	4b97      	ldr	r3, [pc, #604]	; (80026dc <HMD_voidForward+0x28c>)
 8002480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b05      	cmp	r3, #5
 8002488:	dd21      	ble.n	80024ce <HMD_voidForward+0x7e>
		{
			MPWM_SETValuesOfPWM(TIMER2, CH1, (new*1.9+2150));
 800248a:	4b93      	ldr	r3, [pc, #588]	; (80026d8 <HMD_voidForward+0x288>)
 800248c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe f873 	bl	800057c <__aeabi_i2d>
 8002496:	a382      	add	r3, pc, #520	; (adr r3, 80026a0 <HMD_voidForward+0x250>)
 8002498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249c:	f7fe f8d8 	bl	8000650 <__aeabi_dmul>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	a37f      	add	r3, pc, #508	; (adr r3, 80026a8 <HMD_voidForward+0x258>)
 80024aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ae:	f7fd ff19 	bl	80002e4 <__adddf3>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4610      	mov	r0, r2
 80024b8:	4619      	mov	r1, r3
 80024ba:	f7fe fadb 	bl	8000a74 <__aeabi_d2uiz>
 80024be:	4603      	mov	r3, r0
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	2100      	movs	r1, #0
 80024c6:	2000      	movs	r0, #0
 80024c8:	f000 fae2 	bl	8002a90 <MPWM_SETValuesOfPWM>
 80024cc:	e0d1      	b.n	8002672 <HMD_voidForward+0x222>
		}
		else if(old-new>40)
 80024ce:	4b83      	ldr	r3, [pc, #524]	; (80026dc <HMD_voidForward+0x28c>)
 80024d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b80      	ldr	r3, [pc, #512]	; (80026d8 <HMD_voidForward+0x288>)
 80024d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b28      	cmp	r3, #40	; 0x28
 80024e0:	dd18      	ble.n	8002514 <HMD_voidForward+0xc4>
		{
			MPWM_SETValuesOfPWM(TIMER2, CH1, (new*1.4));
 80024e2:	4b7d      	ldr	r3, [pc, #500]	; (80026d8 <HMD_voidForward+0x288>)
 80024e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe f847 	bl	800057c <__aeabi_i2d>
 80024ee:	a370      	add	r3, pc, #448	; (adr r3, 80026b0 <HMD_voidForward+0x260>)
 80024f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f4:	f7fe f8ac 	bl	8000650 <__aeabi_dmul>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4610      	mov	r0, r2
 80024fe:	4619      	mov	r1, r3
 8002500:	f7fe fab8 	bl	8000a74 <__aeabi_d2uiz>
 8002504:	4603      	mov	r3, r0
 8002506:	b29b      	uxth	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	2100      	movs	r1, #0
 800250c:	2000      	movs	r0, #0
 800250e:	f000 fabf 	bl	8002a90 <MPWM_SETValuesOfPWM>
 8002512:	e0ae      	b.n	8002672 <HMD_voidForward+0x222>
		}
		else if(old-new>90)
 8002514:	4b71      	ldr	r3, [pc, #452]	; (80026dc <HMD_voidForward+0x28c>)
 8002516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800251a:	461a      	mov	r2, r3
 800251c:	4b6e      	ldr	r3, [pc, #440]	; (80026d8 <HMD_voidForward+0x288>)
 800251e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b5a      	cmp	r3, #90	; 0x5a
 8002526:	dd18      	ble.n	800255a <HMD_voidForward+0x10a>
		{
			MPWM_SETValuesOfPWM(TIMER2, CH1, (new*1.3));
 8002528:	4b6b      	ldr	r3, [pc, #428]	; (80026d8 <HMD_voidForward+0x288>)
 800252a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe f824 	bl	800057c <__aeabi_i2d>
 8002534:	a360      	add	r3, pc, #384	; (adr r3, 80026b8 <HMD_voidForward+0x268>)
 8002536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253a:	f7fe f889 	bl	8000650 <__aeabi_dmul>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4610      	mov	r0, r2
 8002544:	4619      	mov	r1, r3
 8002546:	f7fe fa95 	bl	8000a74 <__aeabi_d2uiz>
 800254a:	4603      	mov	r3, r0
 800254c:	b29b      	uxth	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	2100      	movs	r1, #0
 8002552:	2000      	movs	r0, #0
 8002554:	f000 fa9c 	bl	8002a90 <MPWM_SETValuesOfPWM>
 8002558:	e08b      	b.n	8002672 <HMD_voidForward+0x222>
		}
		else if(old-new>120)
 800255a:	4b60      	ldr	r3, [pc, #384]	; (80026dc <HMD_voidForward+0x28c>)
 800255c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002560:	461a      	mov	r2, r3
 8002562:	4b5d      	ldr	r3, [pc, #372]	; (80026d8 <HMD_voidForward+0x288>)
 8002564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b78      	cmp	r3, #120	; 0x78
 800256c:	dd18      	ble.n	80025a0 <HMD_voidForward+0x150>
		{
			MPWM_SETValuesOfPWM(TIMER2, CH1, (new*1.2));
 800256e:	4b5a      	ldr	r3, [pc, #360]	; (80026d8 <HMD_voidForward+0x288>)
 8002570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe f801 	bl	800057c <__aeabi_i2d>
 800257a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800257e:	4b58      	ldr	r3, [pc, #352]	; (80026e0 <HMD_voidForward+0x290>)
 8002580:	f7fe f866 	bl	8000650 <__aeabi_dmul>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	f7fe fa72 	bl	8000a74 <__aeabi_d2uiz>
 8002590:	4603      	mov	r3, r0
 8002592:	b29b      	uxth	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	2100      	movs	r1, #0
 8002598:	2000      	movs	r0, #0
 800259a:	f000 fa79 	bl	8002a90 <MPWM_SETValuesOfPWM>
 800259e:	e068      	b.n	8002672 <HMD_voidForward+0x222>
		}
		else if(old-new>150)
 80025a0:	4b4e      	ldr	r3, [pc, #312]	; (80026dc <HMD_voidForward+0x28c>)
 80025a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a6:	461a      	mov	r2, r3
 80025a8:	4b4b      	ldr	r3, [pc, #300]	; (80026d8 <HMD_voidForward+0x288>)
 80025aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b96      	cmp	r3, #150	; 0x96
 80025b2:	dd18      	ble.n	80025e6 <HMD_voidForward+0x196>
		{
			MPWM_SETValuesOfPWM(TIMER2, CH1, (new*1.1));
 80025b4:	4b48      	ldr	r3, [pc, #288]	; (80026d8 <HMD_voidForward+0x288>)
 80025b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fd ffde 	bl	800057c <__aeabi_i2d>
 80025c0:	a33f      	add	r3, pc, #252	; (adr r3, 80026c0 <HMD_voidForward+0x270>)
 80025c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c6:	f7fe f843 	bl	8000650 <__aeabi_dmul>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4610      	mov	r0, r2
 80025d0:	4619      	mov	r1, r3
 80025d2:	f7fe fa4f 	bl	8000a74 <__aeabi_d2uiz>
 80025d6:	4603      	mov	r3, r0
 80025d8:	b29b      	uxth	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	2100      	movs	r1, #0
 80025de:	2000      	movs	r0, #0
 80025e0:	f000 fa56 	bl	8002a90 <MPWM_SETValuesOfPWM>
 80025e4:	e045      	b.n	8002672 <HMD_voidForward+0x222>
		}
		else if(old-new>190)
 80025e6:	4b3d      	ldr	r3, [pc, #244]	; (80026dc <HMD_voidForward+0x28c>)
 80025e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b3a      	ldr	r3, [pc, #232]	; (80026d8 <HMD_voidForward+0x288>)
 80025f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2bbe      	cmp	r3, #190	; 0xbe
 80025f8:	dd18      	ble.n	800262c <HMD_voidForward+0x1dc>
		{
			MPWM_SETValuesOfPWM(TIMER2, CH1, (new*.95));
 80025fa:	4b37      	ldr	r3, [pc, #220]	; (80026d8 <HMD_voidForward+0x288>)
 80025fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002600:	4618      	mov	r0, r3
 8002602:	f7fd ffbb 	bl	800057c <__aeabi_i2d>
 8002606:	a330      	add	r3, pc, #192	; (adr r3, 80026c8 <HMD_voidForward+0x278>)
 8002608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260c:	f7fe f820 	bl	8000650 <__aeabi_dmul>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	f7fe fa2c 	bl	8000a74 <__aeabi_d2uiz>
 800261c:	4603      	mov	r3, r0
 800261e:	b29b      	uxth	r3, r3
 8002620:	461a      	mov	r2, r3
 8002622:	2100      	movs	r1, #0
 8002624:	2000      	movs	r0, #0
 8002626:	f000 fa33 	bl	8002a90 <MPWM_SETValuesOfPWM>
 800262a:	e022      	b.n	8002672 <HMD_voidForward+0x222>
		}
		else if(old-new>350)
 800262c:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <HMD_voidForward+0x28c>)
 800262e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002632:	461a      	mov	r2, r3
 8002634:	4b28      	ldr	r3, [pc, #160]	; (80026d8 <HMD_voidForward+0x288>)
 8002636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002640:	dd17      	ble.n	8002672 <HMD_voidForward+0x222>
		{
			MPWM_SETValuesOfPWM(TIMER2, CH1, (new*.44));
 8002642:	4b25      	ldr	r3, [pc, #148]	; (80026d8 <HMD_voidForward+0x288>)
 8002644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002648:	4618      	mov	r0, r3
 800264a:	f7fd ff97 	bl	800057c <__aeabi_i2d>
 800264e:	a320      	add	r3, pc, #128	; (adr r3, 80026d0 <HMD_voidForward+0x280>)
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	f7fd fffc 	bl	8000650 <__aeabi_dmul>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	f7fe fa08 	bl	8000a74 <__aeabi_d2uiz>
 8002664:	4603      	mov	r3, r0
 8002666:	b29b      	uxth	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	2100      	movs	r1, #0
 800266c:	2000      	movs	r0, #0
 800266e:	f000 fa0f 	bl	8002a90 <MPWM_SETValuesOfPWM>
		}
		if(new<1090)
 8002672:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HMD_voidForward+0x288>)
 8002674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002678:	f240 4241 	movw	r2, #1089	; 0x441
 800267c:	4293      	cmp	r3, r2
 800267e:	dc04      	bgt.n	800268a <HMD_voidForward+0x23a>
		{
			MPWM_SETValuesOfPWM(TIMER2, CH1, 0);
 8002680:	2200      	movs	r2, #0
 8002682:	2100      	movs	r1, #0
 8002684:	2000      	movs	r0, #0
 8002686:	f000 fa03 	bl	8002a90 <MPWM_SETValuesOfPWM>
		}
		old=new;
 800268a:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <HMD_voidForward+0x288>)
 800268c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HMD_voidForward+0x28c>)
 8002692:	801a      	strh	r2, [r3, #0]
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	f3af 8000 	nop.w
 80026a0:	66666666 	.word	0x66666666
 80026a4:	3ffe6666 	.word	0x3ffe6666
 80026a8:	00000000 	.word	0x00000000
 80026ac:	40a0cc00 	.word	0x40a0cc00
 80026b0:	66666666 	.word	0x66666666
 80026b4:	3ff66666 	.word	0x3ff66666
 80026b8:	cccccccd 	.word	0xcccccccd
 80026bc:	3ff4cccc 	.word	0x3ff4cccc
 80026c0:	9999999a 	.word	0x9999999a
 80026c4:	3ff19999 	.word	0x3ff19999
 80026c8:	66666666 	.word	0x66666666
 80026cc:	3fee6666 	.word	0x3fee6666
 80026d0:	c28f5c29 	.word	0xc28f5c29
 80026d4:	3fdc28f5 	.word	0x3fdc28f5
 80026d8:	200000e4 	.word	0x200000e4
 80026dc:	20000004 	.word	0x20000004
 80026e0:	3ff33333 	.word	0x3ff33333

080026e4 <MNVIC_voidInit>:
#include"../Inc/MCAL/NVIC/NVIC_private.h"
#include"../Inc/MCAL/NVIC/NVIC_interface.h"
#include"../Inc/MCAL/NVIC/NVIC_config.h"

void MNVIC_voidInit(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
	
	SCB_AIRCR = MNVIC_GROUB_SUB_DISTRIBUTION;
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <MNVIC_voidInit+0x14>)
 80026ea:	4a04      	ldr	r2, [pc, #16]	; (80026fc <MNVIC_voidInit+0x18>)
 80026ec:	601a      	str	r2, [r3, #0]
}
 80026ee:	bf00      	nop
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000ed0c 	.word	0xe000ed0c
 80026fc:	05fa0500 	.word	0x05fa0500

08002700 <MNVIC_voidEnableInterrupt>:

void MNVIC_voidEnableInterrupt(NVIC_Per_Position Copy_IntNumber)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
	if(Copy_IntNumber <= 31 )
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	2b1f      	cmp	r3, #31
 800270e:	d805      	bhi.n	800271c <MNVIC_voidEnableInterrupt+0x1c>
	{
		NVIC_ISER0 = (1 << Copy_IntNumber);
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	2201      	movs	r2, #1
 8002714:	409a      	lsls	r2, r3
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <MNVIC_voidEnableInterrupt+0x3c>)
 8002718:	601a      	str	r2, [r3, #0]
	{
		/* return error */
	}


}
 800271a:	e00a      	b.n	8002732 <MNVIC_voidEnableInterrupt+0x32>
	else if(Copy_IntNumber <=59 )
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	2b3b      	cmp	r3, #59	; 0x3b
 8002720:	d807      	bhi.n	8002732 <MNVIC_voidEnableInterrupt+0x32>
		Copy_IntNumber -=32;
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	3b20      	subs	r3, #32
 8002726:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1 = (1 << Copy_IntNumber);
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	2201      	movs	r2, #1
 800272c:	409a      	lsls	r2, r3
 800272e:	4b04      	ldr	r3, [pc, #16]	; (8002740 <MNVIC_voidEnableInterrupt+0x40>)
 8002730:	601a      	str	r2, [r3, #0]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	e000e100 	.word	0xe000e100
 8002740:	e000e104 	.word	0xe000e104

08002744 <MPWM_voidInit>:
#include "../Inc/MCAL/PWM/PWM_private.h"

#include "../Inc/MCAL/RCC/RCC_interface.h"
#include "../Inc/MCAL/DIO/DIO_interface.h"
void MPWM_voidInit(TIM_T Timer, CH_T CHANNEL, u16 AutoReload_Val)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
 800274e:	460b      	mov	r3, r1
 8002750:	71bb      	strb	r3, [r7, #6]
 8002752:	4613      	mov	r3, r2
 8002754:	80bb      	strh	r3, [r7, #4]
	MRCC_voidPerClock_State(APB1 , Timer , PClock_enable );
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	2201      	movs	r2, #1
 800275a:	4619      	mov	r1, r3
 800275c:	2001      	movs	r0, #1
 800275e:	f000 f9fb 	bl	8002b58 <MRCC_voidPerClock_State>
	/*auto reload preload*/
	SET_BIT(TIM[Timer]->CR1,ARPE);
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	4aa0      	ldr	r2, [pc, #640]	; (80029e8 <MPWM_voidInit+0x2a4>)
 8002766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	499e      	ldr	r1, [pc, #632]	; (80029e8 <MPWM_voidInit+0x2a4>)
 8002770:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002774:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002778:	601a      	str	r2, [r3, #0]
	/*Edge Aligned*/
	CLR_BIT(TIM[Timer]->CR1,CMS1);
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	4a9a      	ldr	r2, [pc, #616]	; (80029e8 <MPWM_voidInit+0x2a4>)
 800277e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	4998      	ldr	r1, [pc, #608]	; (80029e8 <MPWM_voidInit+0x2a4>)
 8002788:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800278c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002790:	601a      	str	r2, [r3, #0]
	CLR_BIT(TIM[Timer]->CR1,CMS0);
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	4a94      	ldr	r2, [pc, #592]	; (80029e8 <MPWM_voidInit+0x2a4>)
 8002796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	4992      	ldr	r1, [pc, #584]	; (80029e8 <MPWM_voidInit+0x2a4>)
 80027a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027a4:	f022 0220 	bic.w	r2, r2, #32
 80027a8:	601a      	str	r2, [r3, #0]
	/*upcounting DIR ARR is the destination*/
	CLR_BIT(TIM[Timer]->CR1,DIR);
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	4a8e      	ldr	r2, [pc, #568]	; (80029e8 <MPWM_voidInit+0x2a4>)
 80027ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	498c      	ldr	r1, [pc, #560]	; (80029e8 <MPWM_voidInit+0x2a4>)
 80027b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027bc:	f022 0210 	bic.w	r2, r2, #16
 80027c0:	601a      	str	r2, [r3, #0]
	/*set prescaler*/
	TIM[Timer]->PSC = TIMER_PRESCALLER-1;
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	4a88      	ldr	r2, [pc, #544]	; (80029e8 <MPWM_voidInit+0x2a4>)
 80027c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ca:	2200      	movs	r2, #0
 80027cc:	629a      	str	r2, [r3, #40]	; 0x28
	TIM[Timer]->ARR = AutoReload_Val-1;
 80027ce:	88bb      	ldrh	r3, [r7, #4]
 80027d0:	1e59      	subs	r1, r3, #1
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	4a84      	ldr	r2, [pc, #528]	; (80029e8 <MPWM_voidInit+0x2a4>)
 80027d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027da:	460a      	mov	r2, r1
 80027dc:	62da      	str	r2, [r3, #44]	; 0x2c
	switch(CHANNEL)
 80027de:	79bb      	ldrb	r3, [r7, #6]
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	f200 8136 	bhi.w	8002a52 <MPWM_voidInit+0x30e>
 80027e6:	a201      	add	r2, pc, #4	; (adr r2, 80027ec <MPWM_voidInit+0xa8>)
 80027e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ec:	080027fd 	.word	0x080027fd
 80027f0:	0800289f 	.word	0x0800289f
 80027f4:	08002929 	.word	0x08002929
 80027f8:	080029b3 	.word	0x080029b3
	{
		case CH1:
		if(Timer == TIMER2)
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d105      	bne.n	800280e <MPWM_voidInit+0xca>
		{
			MGPIO_voidSetPinDirection(GPIOA , PIN0  , OUTPUT_SPEED_10MHZ_AFPP);
 8002802:	2209      	movs	r2, #9
 8002804:	2100      	movs	r1, #0
 8002806:	2000      	movs	r0, #0
 8002808:	f7fe fb4a 	bl	8000ea0 <MGPIO_voidSetPinDirection>
 800280c:	e010      	b.n	8002830 <MPWM_voidInit+0xec>
		}
		else if(Timer == TIMER3)
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d105      	bne.n	8002820 <MPWM_voidInit+0xdc>
		{
			MGPIO_voidSetPinDirection(GPIOA , PIN6  , OUTPUT_SPEED_10MHZ_AFPP);
 8002814:	2209      	movs	r2, #9
 8002816:	2106      	movs	r1, #6
 8002818:	2000      	movs	r0, #0
 800281a:	f7fe fb41 	bl	8000ea0 <MGPIO_voidSetPinDirection>
 800281e:	e007      	b.n	8002830 <MPWM_voidInit+0xec>
		}
		else if(Timer == TIMER4)
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d104      	bne.n	8002830 <MPWM_voidInit+0xec>
		{
			MGPIO_voidSetPinDirection(GPIOB , PIN6  , OUTPUT_SPEED_10MHZ_AFPP);
 8002826:	2209      	movs	r2, #9
 8002828:	2106      	movs	r1, #6
 800282a:	2001      	movs	r0, #1
 800282c:	f7fe fb38 	bl	8000ea0 <MGPIO_voidSetPinDirection>
		{
		}
		else
		{	
		}
		SET_BIT(TIM[Timer]->CCER,CC1E);
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	4a6d      	ldr	r2, [pc, #436]	; (80029e8 <MPWM_voidInit+0x2a4>)
 8002834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002838:	6a1a      	ldr	r2, [r3, #32]
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	496a      	ldr	r1, [pc, #424]	; (80029e8 <MPWM_voidInit+0x2a4>)
 800283e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	621a      	str	r2, [r3, #32]
		SET_BIT(TIM[Timer]->CCMR1,OC1PE);
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	4a67      	ldr	r2, [pc, #412]	; (80029e8 <MPWM_voidInit+0x2a4>)
 800284c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	4964      	ldr	r1, [pc, #400]	; (80029e8 <MPWM_voidInit+0x2a4>)
 8002856:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800285a:	f042 0208 	orr.w	r2, r2, #8
 800285e:	619a      	str	r2, [r3, #24]
		TIM[Timer]->CCMR1 &= ~(0b111<<OC1M);
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	4a61      	ldr	r2, [pc, #388]	; (80029e8 <MPWM_voidInit+0x2a4>)
 8002864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002868:	699a      	ldr	r2, [r3, #24]
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	495e      	ldr	r1, [pc, #376]	; (80029e8 <MPWM_voidInit+0x2a4>)
 800286e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002872:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002876:	619a      	str	r2, [r3, #24]
		TIM[Timer]->CCMR1 |=  (PWM_MODE<<OC1M);
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	4a5b      	ldr	r2, [pc, #364]	; (80029e8 <MPWM_voidInit+0x2a4>)
 800287c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	4958      	ldr	r1, [pc, #352]	; (80029e8 <MPWM_voidInit+0x2a4>)
 8002886:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800288a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800288e:	619a      	str	r2, [r3, #24]
		TIM[Timer]->CCR1 = AutoReload_Val;
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	4a55      	ldr	r2, [pc, #340]	; (80029e8 <MPWM_voidInit+0x2a4>)
 8002894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002898:	88ba      	ldrh	r2, [r7, #4]
 800289a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800289c:	e0da      	b.n	8002a54 <MPWM_voidInit+0x310>
		case CH2:
		if(Timer == TIMER2)
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d105      	bne.n	80028b0 <MPWM_voidInit+0x16c>
		{
			MGPIO_voidSetPinDirection(GPIOA , PIN1  , OUTPUT_SPEED_10MHZ_AFPP);
 80028a4:	2209      	movs	r2, #9
 80028a6:	2101      	movs	r1, #1
 80028a8:	2000      	movs	r0, #0
 80028aa:	f7fe faf9 	bl	8000ea0 <MGPIO_voidSetPinDirection>
 80028ae:	e010      	b.n	80028d2 <MPWM_voidInit+0x18e>
		}
		else if(Timer == TIMER3)
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d105      	bne.n	80028c2 <MPWM_voidInit+0x17e>
		{
			MGPIO_voidSetPinDirection(GPIOA , PIN7  , OUTPUT_SPEED_10MHZ_AFPP);
 80028b6:	2209      	movs	r2, #9
 80028b8:	2107      	movs	r1, #7
 80028ba:	2000      	movs	r0, #0
 80028bc:	f7fe faf0 	bl	8000ea0 <MGPIO_voidSetPinDirection>
 80028c0:	e007      	b.n	80028d2 <MPWM_voidInit+0x18e>
		}
		else if(Timer == TIMER4)
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d104      	bne.n	80028d2 <MPWM_voidInit+0x18e>
		{
			MGPIO_voidSetPinDirection(GPIOB , PIN7  , OUTPUT_SPEED_10MHZ_AFPP);
 80028c8:	2209      	movs	r2, #9
 80028ca:	2107      	movs	r1, #7
 80028cc:	2001      	movs	r0, #1
 80028ce:	f7fe fae7 	bl	8000ea0 <MGPIO_voidSetPinDirection>
		{
		}
		else
		{
		}
		SET_BIT(TIM[Timer]->CCMR1,OC2PE);
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	4a44      	ldr	r2, [pc, #272]	; (80029e8 <MPWM_voidInit+0x2a4>)
 80028d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028da:	699a      	ldr	r2, [r3, #24]
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	4942      	ldr	r1, [pc, #264]	; (80029e8 <MPWM_voidInit+0x2a4>)
 80028e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80028e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028e8:	619a      	str	r2, [r3, #24]
		TIM[Timer]->CCMR1 &= ~(0b111<<OC2M);
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	4a3e      	ldr	r2, [pc, #248]	; (80029e8 <MPWM_voidInit+0x2a4>)
 80028ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f2:	699a      	ldr	r2, [r3, #24]
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	493c      	ldr	r1, [pc, #240]	; (80029e8 <MPWM_voidInit+0x2a4>)
 80028f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80028fc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002900:	619a      	str	r2, [r3, #24]
		TIM[Timer]->CCMR1 |=  (PWM_MODE<<OC2M);
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	4a38      	ldr	r2, [pc, #224]	; (80029e8 <MPWM_voidInit+0x2a4>)
 8002906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290a:	699a      	ldr	r2, [r3, #24]
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	4936      	ldr	r1, [pc, #216]	; (80029e8 <MPWM_voidInit+0x2a4>)
 8002910:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002914:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8002918:	619a      	str	r2, [r3, #24]
		TIM[Timer]->CCR2 = AutoReload_Val;
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	4a32      	ldr	r2, [pc, #200]	; (80029e8 <MPWM_voidInit+0x2a4>)
 800291e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002922:	88ba      	ldrh	r2, [r7, #4]
 8002924:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8002926:	e095      	b.n	8002a54 <MPWM_voidInit+0x310>
		case CH3:
		if(Timer == TIMER2)
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d105      	bne.n	800293a <MPWM_voidInit+0x1f6>
		{
			MGPIO_voidSetPinDirection(GPIOA , PIN2  , OUTPUT_SPEED_10MHZ_AFPP);
 800292e:	2209      	movs	r2, #9
 8002930:	2102      	movs	r1, #2
 8002932:	2000      	movs	r0, #0
 8002934:	f7fe fab4 	bl	8000ea0 <MGPIO_voidSetPinDirection>
 8002938:	e010      	b.n	800295c <MPWM_voidInit+0x218>
		}
		else if(Timer == TIMER3)
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d105      	bne.n	800294c <MPWM_voidInit+0x208>
		{
			MGPIO_voidSetPinDirection(GPIOB , PIN0  , OUTPUT_SPEED_10MHZ_AFPP);
 8002940:	2209      	movs	r2, #9
 8002942:	2100      	movs	r1, #0
 8002944:	2001      	movs	r0, #1
 8002946:	f7fe faab 	bl	8000ea0 <MGPIO_voidSetPinDirection>
 800294a:	e007      	b.n	800295c <MPWM_voidInit+0x218>
		}
		else if(Timer == TIMER4)
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d104      	bne.n	800295c <MPWM_voidInit+0x218>
		{
			MGPIO_voidSetPinDirection(GPIOB , PIN8  , OUTPUT_SPEED_10MHZ_AFPP);
 8002952:	2209      	movs	r2, #9
 8002954:	2108      	movs	r1, #8
 8002956:	2001      	movs	r0, #1
 8002958:	f7fe faa2 	bl	8000ea0 <MGPIO_voidSetPinDirection>
		{
		}
		else
		{
		}
		SET_BIT(TIM[Timer]->CCMR2,OC3PE);
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	4a22      	ldr	r2, [pc, #136]	; (80029e8 <MPWM_voidInit+0x2a4>)
 8002960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002964:	69da      	ldr	r2, [r3, #28]
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	491f      	ldr	r1, [pc, #124]	; (80029e8 <MPWM_voidInit+0x2a4>)
 800296a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800296e:	f042 0208 	orr.w	r2, r2, #8
 8002972:	61da      	str	r2, [r3, #28]
		TIM[Timer]->CCMR2 &= ~(0b111<<OC3M);
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	4a1c      	ldr	r2, [pc, #112]	; (80029e8 <MPWM_voidInit+0x2a4>)
 8002978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	4919      	ldr	r1, [pc, #100]	; (80029e8 <MPWM_voidInit+0x2a4>)
 8002982:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002986:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800298a:	61da      	str	r2, [r3, #28]
		TIM[Timer]->CCMR2 |=  (PWM_MODE<<OC3M);
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	4a16      	ldr	r2, [pc, #88]	; (80029e8 <MPWM_voidInit+0x2a4>)
 8002990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002994:	69da      	ldr	r2, [r3, #28]
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	4913      	ldr	r1, [pc, #76]	; (80029e8 <MPWM_voidInit+0x2a4>)
 800299a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800299e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80029a2:	61da      	str	r2, [r3, #28]
		TIM[Timer]->CCR3 = AutoReload_Val;
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	4a10      	ldr	r2, [pc, #64]	; (80029e8 <MPWM_voidInit+0x2a4>)
 80029a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ac:	88ba      	ldrh	r2, [r7, #4]
 80029ae:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80029b0:	e050      	b.n	8002a54 <MPWM_voidInit+0x310>
		case CH4:
		if(Timer == TIMER2)
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d105      	bne.n	80029c4 <MPWM_voidInit+0x280>
		{
			MGPIO_voidSetPinDirection(GPIOA , PIN3  , OUTPUT_SPEED_10MHZ_AFPP);
 80029b8:	2209      	movs	r2, #9
 80029ba:	2103      	movs	r1, #3
 80029bc:	2000      	movs	r0, #0
 80029be:	f7fe fa6f 	bl	8000ea0 <MGPIO_voidSetPinDirection>
 80029c2:	e01b      	b.n	80029fc <MPWM_voidInit+0x2b8>
		}
		else if(Timer == TIMER3)
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d105      	bne.n	80029d6 <MPWM_voidInit+0x292>
		{
			MGPIO_voidSetPinDirection(GPIOB , PIN1  , OUTPUT_SPEED_10MHZ_AFPP);
 80029ca:	2209      	movs	r2, #9
 80029cc:	2101      	movs	r1, #1
 80029ce:	2001      	movs	r0, #1
 80029d0:	f7fe fa66 	bl	8000ea0 <MGPIO_voidSetPinDirection>
 80029d4:	e012      	b.n	80029fc <MPWM_voidInit+0x2b8>
		}
		else if(Timer == TIMER4)
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d107      	bne.n	80029ec <MPWM_voidInit+0x2a8>
		{
			MGPIO_voidSetPinDirection(GPIOB , PIN9  , OUTPUT_SPEED_10MHZ_AFPP);
 80029dc:	2209      	movs	r2, #9
 80029de:	2109      	movs	r1, #9
 80029e0:	2001      	movs	r0, #1
 80029e2:	f7fe fa5d 	bl	8000ea0 <MGPIO_voidSetPinDirection>
 80029e6:	e009      	b.n	80029fc <MPWM_voidInit+0x2b8>
 80029e8:	20000008 	.word	0x20000008
		}
		else if(Timer == TIMER5)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d104      	bne.n	80029fc <MPWM_voidInit+0x2b8>
		{
			MGPIO_voidSetPinDirection(GPIOA , PIN3  , OUTPUT_SPEED_10MHZ_AFPP);
 80029f2:	2209      	movs	r2, #9
 80029f4:	2103      	movs	r1, #3
 80029f6:	2000      	movs	r0, #0
 80029f8:	f7fe fa52 	bl	8000ea0 <MGPIO_voidSetPinDirection>
		}
		else
		{
		}
		SET_BIT(TIM[Timer]->CCMR2,OC4PE);
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	4a23      	ldr	r2, [pc, #140]	; (8002a8c <MPWM_voidInit+0x348>)
 8002a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a04:	69da      	ldr	r2, [r3, #28]
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	4920      	ldr	r1, [pc, #128]	; (8002a8c <MPWM_voidInit+0x348>)
 8002a0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a12:	61da      	str	r2, [r3, #28]
		TIM[Timer]->CCMR2 &= ~(0b111<<OC4M);
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <MPWM_voidInit+0x348>)
 8002a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	491a      	ldr	r1, [pc, #104]	; (8002a8c <MPWM_voidInit+0x348>)
 8002a22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a26:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002a2a:	61da      	str	r2, [r3, #28]
		TIM[Timer]->CCMR2 |=  (PWM_MODE<<OC4M);
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	4a17      	ldr	r2, [pc, #92]	; (8002a8c <MPWM_voidInit+0x348>)
 8002a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	4914      	ldr	r1, [pc, #80]	; (8002a8c <MPWM_voidInit+0x348>)
 8002a3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a3e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8002a42:	61da      	str	r2, [r3, #28]
		TIM[Timer]->CCR4 = AutoReload_Val;
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	4a11      	ldr	r2, [pc, #68]	; (8002a8c <MPWM_voidInit+0x348>)
 8002a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4c:	88ba      	ldrh	r2, [r7, #4]
 8002a4e:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002a50:	e000      	b.n	8002a54 <MPWM_voidInit+0x310>
		default:
		break;
 8002a52:	bf00      	nop
	}
	SET_BIT(TIM[Timer]->EGR, UG);
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	4a0d      	ldr	r2, [pc, #52]	; (8002a8c <MPWM_voidInit+0x348>)
 8002a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	490a      	ldr	r1, [pc, #40]	; (8002a8c <MPWM_voidInit+0x348>)
 8002a62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	615a      	str	r2, [r3, #20]
	SET_BIT(TIM[Timer]->CR1, CEN);
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	4a07      	ldr	r2, [pc, #28]	; (8002a8c <MPWM_voidInit+0x348>)
 8002a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	4904      	ldr	r1, [pc, #16]	; (8002a8c <MPWM_voidInit+0x348>)
 8002a7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	20000008 	.word	0x20000008

08002a90 <MPWM_SETValuesOfPWM>:
void MPWM_SETValuesOfPWM(TIM_T Timer, CH_T CHANNEL, u16  MCopy_u16CompareVal)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	71bb      	strb	r3, [r7, #6]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	80bb      	strh	r3, [r7, #4]
	switch(CHANNEL)
 8002aa2:	79bb      	ldrb	r3, [r7, #6]
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d827      	bhi.n	8002af8 <MPWM_SETValuesOfPWM+0x68>
 8002aa8:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <MPWM_SETValuesOfPWM+0x20>)
 8002aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aae:	bf00      	nop
 8002ab0:	08002ac1 	.word	0x08002ac1
 8002ab4:	08002acf 	.word	0x08002acf
 8002ab8:	08002add 	.word	0x08002add
 8002abc:	08002aeb 	.word	0x08002aeb
	{
		case CH1:
		TIM[Timer]->CCR1 = MCopy_u16CompareVal;
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	4a16      	ldr	r2, [pc, #88]	; (8002b1c <MPWM_SETValuesOfPWM+0x8c>)
 8002ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac8:	88ba      	ldrh	r2, [r7, #4]
 8002aca:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8002acc:	e015      	b.n	8002afa <MPWM_SETValuesOfPWM+0x6a>
		case CH2:
		TIM[Timer]->CCR2 = MCopy_u16CompareVal;
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	4a12      	ldr	r2, [pc, #72]	; (8002b1c <MPWM_SETValuesOfPWM+0x8c>)
 8002ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad6:	88ba      	ldrh	r2, [r7, #4]
 8002ad8:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8002ada:	e00e      	b.n	8002afa <MPWM_SETValuesOfPWM+0x6a>
		case CH3:
		TIM[Timer]->CCR3 = MCopy_u16CompareVal;
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	4a0f      	ldr	r2, [pc, #60]	; (8002b1c <MPWM_SETValuesOfPWM+0x8c>)
 8002ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae4:	88ba      	ldrh	r2, [r7, #4]
 8002ae6:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8002ae8:	e007      	b.n	8002afa <MPWM_SETValuesOfPWM+0x6a>
		case CH4:
		TIM[Timer]->CCR4 = MCopy_u16CompareVal;
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	4a0b      	ldr	r2, [pc, #44]	; (8002b1c <MPWM_SETValuesOfPWM+0x8c>)
 8002aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af2:	88ba      	ldrh	r2, [r7, #4]
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002af6:	e000      	b.n	8002afa <MPWM_SETValuesOfPWM+0x6a>
		default:
			break;
 8002af8:	bf00      	nop
	}
	SET_BIT(TIM[Timer]->EGR, UG);
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <MPWM_SETValuesOfPWM+0x8c>)
 8002afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	4905      	ldr	r1, [pc, #20]	; (8002b1c <MPWM_SETValuesOfPWM+0x8c>)
 8002b08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b0c:	f042 0201 	orr.w	r2, r2, #1
 8002b10:	615a      	str	r2, [r3, #20]
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	20000008 	.word	0x20000008

08002b20 <MRCC_voidInit>:
#include "../Inc/MCAL/RCC/RCC_interface.h"
#include "../Inc/MCAL/RCC/RCC_private.h"
#include "../Inc/MCAL/RCC/RCC_configuration.h"

void MRCC_voidInit(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
#if CLK_SOURCE == HSI
	// Turn on HSI
	MRCC_voidClkEnable(HSI);
 8002b24:	2000      	movs	r0, #0
 8002b26:	f000 f88f 	bl	8002c48 <MRCC_voidClkEnable>
	// Check HSI Ready
	while (MRCC_u8CheckClockReady(HSI) == NOT_READY);
 8002b2a:	bf00      	nop
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f000 f8e3 	bl	8002cf8 <MRCC_u8CheckClockReady>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f9      	beq.n	8002b2c <MRCC_voidInit+0xc>
	// Set Buses Prescaler
	MRCC_voidSetBusesPrescaler(AHB_PRESCALER, ABP1_PRESCALER, ABP2_PRESCALER);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f000 f94b 	bl	8002dd8 <MRCC_voidSetBusesPrescaler>
	// Switch to HSI Clock
	MRCC_voidSetClkSource(HSI);
 8002b42:	2000      	movs	r0, #0
 8002b44:	f000 f90a 	bl	8002d5c <MRCC_voidSetClkSource>
	// Turn off HSE and PLL
	MRCC_voidClkDisable(HSE);
 8002b48:	2001      	movs	r0, #1
 8002b4a:	f000 f8a9 	bl	8002ca0 <MRCC_voidClkDisable>
	MRCC_voidClkDisable(PLL);
 8002b4e:	2002      	movs	r0, #2
 8002b50:	f000 f8a6 	bl	8002ca0 <MRCC_voidClkDisable>

#else
#error CLOCK Source isn not configured in the right way
#endif

}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <MRCC_voidPerClock_State>:

void MRCC_voidPerClock_State(Buses_t A_bus ,u8  A_peripheral ,PClock_State_t A_state )
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
 8002b62:	460b      	mov	r3, r1
 8002b64:	71bb      	strb	r3, [r7, #6]
 8002b66:	4613      	mov	r3, r2
 8002b68:	717b      	strb	r3, [r7, #5]
	  switch (A_bus) {
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d040      	beq.n	8002bf2 <MRCC_voidPerClock_State+0x9a>
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	dc5b      	bgt.n	8002c2c <MRCC_voidPerClock_State+0xd4>
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <MRCC_voidPerClock_State+0x26>
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d01d      	beq.n	8002bb8 <MRCC_voidPerClock_State+0x60>
	        	{
	        		CLR_BIT (RCC->APB2ENR  , A_peripheral );
	        	}
	        	break;

	        default       : break;
 8002b7c:	e056      	b.n	8002c2c <MRCC_voidPerClock_State+0xd4>
	        	if(A_state == PClock_enable)
 8002b7e:	797b      	ldrb	r3, [r7, #5]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d10a      	bne.n	8002b9a <MRCC_voidPerClock_State+0x42>
	        		SET_BIT (RCC->AHBENR  , A_peripheral );
 8002b84:	4b2f      	ldr	r3, [pc, #188]	; (8002c44 <MRCC_voidPerClock_State+0xec>)
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	79ba      	ldrb	r2, [r7, #6]
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b90:	4611      	mov	r1, r2
 8002b92:	4a2c      	ldr	r2, [pc, #176]	; (8002c44 <MRCC_voidPerClock_State+0xec>)
 8002b94:	430b      	orrs	r3, r1
 8002b96:	6153      	str	r3, [r2, #20]
	        	break;
 8002b98:	e04a      	b.n	8002c30 <MRCC_voidPerClock_State+0xd8>
	        	else if(A_state == PClock_disable)
 8002b9a:	797b      	ldrb	r3, [r7, #5]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d147      	bne.n	8002c30 <MRCC_voidPerClock_State+0xd8>
		        	CLR_BIT (RCC->AHBENR  , A_peripheral );
 8002ba0:	4b28      	ldr	r3, [pc, #160]	; (8002c44 <MRCC_voidPerClock_State+0xec>)
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	79ba      	ldrb	r2, [r7, #6]
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bac:	43d2      	mvns	r2, r2
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4a24      	ldr	r2, [pc, #144]	; (8002c44 <MRCC_voidPerClock_State+0xec>)
 8002bb2:	400b      	ands	r3, r1
 8002bb4:	6153      	str	r3, [r2, #20]
	        	break;
 8002bb6:	e03b      	b.n	8002c30 <MRCC_voidPerClock_State+0xd8>
	        	if(A_state == PClock_enable)
 8002bb8:	797b      	ldrb	r3, [r7, #5]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d10a      	bne.n	8002bd4 <MRCC_voidPerClock_State+0x7c>
	        		SET_BIT (RCC->APB1ENR  , A_peripheral );
 8002bbe:	4b21      	ldr	r3, [pc, #132]	; (8002c44 <MRCC_voidPerClock_State+0xec>)
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	79ba      	ldrb	r2, [r7, #6]
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bca:	4611      	mov	r1, r2
 8002bcc:	4a1d      	ldr	r2, [pc, #116]	; (8002c44 <MRCC_voidPerClock_State+0xec>)
 8002bce:	430b      	orrs	r3, r1
 8002bd0:	61d3      	str	r3, [r2, #28]
	        	break;
 8002bd2:	e02f      	b.n	8002c34 <MRCC_voidPerClock_State+0xdc>
	        	else if(A_state == PClock_disable)
 8002bd4:	797b      	ldrb	r3, [r7, #5]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d12c      	bne.n	8002c34 <MRCC_voidPerClock_State+0xdc>
	        		CLR_BIT (RCC->APB1ENR  , A_peripheral );
 8002bda:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <MRCC_voidPerClock_State+0xec>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	79ba      	ldrb	r2, [r7, #6]
 8002be0:	2101      	movs	r1, #1
 8002be2:	fa01 f202 	lsl.w	r2, r1, r2
 8002be6:	43d2      	mvns	r2, r2
 8002be8:	4611      	mov	r1, r2
 8002bea:	4a16      	ldr	r2, [pc, #88]	; (8002c44 <MRCC_voidPerClock_State+0xec>)
 8002bec:	400b      	ands	r3, r1
 8002bee:	61d3      	str	r3, [r2, #28]
	        	break;
 8002bf0:	e020      	b.n	8002c34 <MRCC_voidPerClock_State+0xdc>
	        	if(A_state == PClock_enable)
 8002bf2:	797b      	ldrb	r3, [r7, #5]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d10a      	bne.n	8002c0e <MRCC_voidPerClock_State+0xb6>
	        		SET_BIT (RCC->APB2ENR  , A_peripheral );
 8002bf8:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <MRCC_voidPerClock_State+0xec>)
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	79ba      	ldrb	r2, [r7, #6]
 8002bfe:	2101      	movs	r1, #1
 8002c00:	fa01 f202 	lsl.w	r2, r1, r2
 8002c04:	4611      	mov	r1, r2
 8002c06:	4a0f      	ldr	r2, [pc, #60]	; (8002c44 <MRCC_voidPerClock_State+0xec>)
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	6193      	str	r3, [r2, #24]
	        	break;
 8002c0c:	e014      	b.n	8002c38 <MRCC_voidPerClock_State+0xe0>
	        	else if(A_state == PClock_disable)
 8002c0e:	797b      	ldrb	r3, [r7, #5]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d111      	bne.n	8002c38 <MRCC_voidPerClock_State+0xe0>
	        		CLR_BIT (RCC->APB2ENR  , A_peripheral );
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <MRCC_voidPerClock_State+0xec>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	79ba      	ldrb	r2, [r7, #6]
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c20:	43d2      	mvns	r2, r2
 8002c22:	4611      	mov	r1, r2
 8002c24:	4a07      	ldr	r2, [pc, #28]	; (8002c44 <MRCC_voidPerClock_State+0xec>)
 8002c26:	400b      	ands	r3, r1
 8002c28:	6193      	str	r3, [r2, #24]
	        	break;
 8002c2a:	e005      	b.n	8002c38 <MRCC_voidPerClock_State+0xe0>
	        default       : break;
 8002c2c:	bf00      	nop
 8002c2e:	e004      	b.n	8002c3a <MRCC_voidPerClock_State+0xe2>
	        	break;
 8002c30:	bf00      	nop
 8002c32:	e002      	b.n	8002c3a <MRCC_voidPerClock_State+0xe2>
	        	break;
 8002c34:	bf00      	nop
 8002c36:	e000      	b.n	8002c3a <MRCC_voidPerClock_State+0xe2>
	        	break;
 8002c38:	bf00      	nop
	      }
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	40021000 	.word	0x40021000

08002c48 <MRCC_voidClkEnable>:
		break;
	}
}

void MRCC_voidClkEnable(u8 A_u8ClkSource)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]
	switch (A_u8ClkSource)
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d014      	beq.n	8002c82 <MRCC_voidClkEnable+0x3a>
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	dc19      	bgt.n	8002c90 <MRCC_voidClkEnable+0x48>
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <MRCC_voidClkEnable+0x1e>
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d007      	beq.n	8002c74 <MRCC_voidClkEnable+0x2c>
		break;
	case PLL:
		SET_BIT(RCC->CR, PLL_ON_BIT);
		break;
	}
}
 8002c64:	e014      	b.n	8002c90 <MRCC_voidClkEnable+0x48>
		SET_BIT(RCC->CR, HSI_ON_BIT);
 8002c66:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <MRCC_voidClkEnable+0x54>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a0c      	ldr	r2, [pc, #48]	; (8002c9c <MRCC_voidClkEnable+0x54>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6013      	str	r3, [r2, #0]
		break;
 8002c72:	e00d      	b.n	8002c90 <MRCC_voidClkEnable+0x48>
		SET_BIT(RCC->CR, HSE_ON_BIT);
 8002c74:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <MRCC_voidClkEnable+0x54>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a08      	ldr	r2, [pc, #32]	; (8002c9c <MRCC_voidClkEnable+0x54>)
 8002c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7e:	6013      	str	r3, [r2, #0]
		break;
 8002c80:	e006      	b.n	8002c90 <MRCC_voidClkEnable+0x48>
		SET_BIT(RCC->CR, PLL_ON_BIT);
 8002c82:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <MRCC_voidClkEnable+0x54>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a05      	ldr	r2, [pc, #20]	; (8002c9c <MRCC_voidClkEnable+0x54>)
 8002c88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c8c:	6013      	str	r3, [r2, #0]
		break;
 8002c8e:	bf00      	nop
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000

08002ca0 <MRCC_voidClkDisable>:

void MRCC_voidClkDisable(u8 A_u8ClkSource)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
	switch (A_u8ClkSource)
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d014      	beq.n	8002cda <MRCC_voidClkDisable+0x3a>
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	dc19      	bgt.n	8002ce8 <MRCC_voidClkDisable+0x48>
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d002      	beq.n	8002cbe <MRCC_voidClkDisable+0x1e>
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d007      	beq.n	8002ccc <MRCC_voidClkDisable+0x2c>
		break;
	case PLL:
		CLR_BIT(RCC->CR, PLL_ON_BIT);
		break;
	}
}
 8002cbc:	e014      	b.n	8002ce8 <MRCC_voidClkDisable+0x48>
		CLR_BIT(RCC->CR, HSI_ON_BIT);
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <MRCC_voidClkDisable+0x54>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a0c      	ldr	r2, [pc, #48]	; (8002cf4 <MRCC_voidClkDisable+0x54>)
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	6013      	str	r3, [r2, #0]
		break;
 8002cca:	e00d      	b.n	8002ce8 <MRCC_voidClkDisable+0x48>
		CLR_BIT(RCC->CR, HSE_ON_BIT);
 8002ccc:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <MRCC_voidClkDisable+0x54>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a08      	ldr	r2, [pc, #32]	; (8002cf4 <MRCC_voidClkDisable+0x54>)
 8002cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd6:	6013      	str	r3, [r2, #0]
		break;
 8002cd8:	e006      	b.n	8002ce8 <MRCC_voidClkDisable+0x48>
		CLR_BIT(RCC->CR, PLL_ON_BIT);
 8002cda:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <MRCC_voidClkDisable+0x54>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a05      	ldr	r2, [pc, #20]	; (8002cf4 <MRCC_voidClkDisable+0x54>)
 8002ce0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ce4:	6013      	str	r3, [r2, #0]
		break;
 8002ce6:	bf00      	nop
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000

08002cf8 <MRCC_u8CheckClockReady>:

u8 MRCC_u8CheckClockReady(u8 A_u8ClkSource)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	71fb      	strb	r3, [r7, #7]
	u8 local_u8ReadyFlag = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	73fb      	strb	r3, [r7, #15]
	switch (A_u8ClkSource)
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d016      	beq.n	8002d3a <MRCC_u8CheckClockReady+0x42>
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	dc1c      	bgt.n	8002d4a <MRCC_u8CheckClockReady+0x52>
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <MRCC_u8CheckClockReady+0x22>
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d008      	beq.n	8002d2a <MRCC_u8CheckClockReady+0x32>
 8002d18:	e017      	b.n	8002d4a <MRCC_u8CheckClockReady+0x52>
	{
	case HSI:
		local_u8ReadyFlag = GET_BIT(RCC->CR, HSI_RDY_BIT);
 8002d1a:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <MRCC_u8CheckClockReady+0x60>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	085b      	lsrs	r3, r3, #1
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
		break;
 8002d28:	e00f      	b.n	8002d4a <MRCC_u8CheckClockReady+0x52>
	case HSE:
		local_u8ReadyFlag = GET_BIT(RCC->CR, HSE_RDY_BIT);
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <MRCC_u8CheckClockReady+0x60>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	0c5b      	lsrs	r3, r3, #17
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
		break;
 8002d38:	e007      	b.n	8002d4a <MRCC_u8CheckClockReady+0x52>
	case PLL:
		local_u8ReadyFlag = GET_BIT(RCC->CR, PLL_RDY_BIT);
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <MRCC_u8CheckClockReady+0x60>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	0e5b      	lsrs	r3, r3, #25
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
		break;
 8002d48:	bf00      	nop
	}
	return local_u8ReadyFlag;
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000

08002d5c <MRCC_voidSetClkSource>:

void MRCC_voidSetClkSource(u8 A_u8ClkSource)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	71fb      	strb	r3, [r7, #7]
	switch (A_u8ClkSource)
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d020      	beq.n	8002dae <MRCC_voidSetClkSource+0x52>
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	dc2b      	bgt.n	8002dc8 <MRCC_voidSetClkSource+0x6c>
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <MRCC_voidSetClkSource+0x1e>
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d00d      	beq.n	8002d94 <MRCC_voidSetClkSource+0x38>
	case PLL:
		CLR_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT0);
		SET_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT1);
		break;
	}
}
 8002d78:	e026      	b.n	8002dc8 <MRCC_voidSetClkSource+0x6c>
		CLR_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT0);
 8002d7a:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <MRCC_voidSetClkSource+0x78>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4a15      	ldr	r2, [pc, #84]	; (8002dd4 <MRCC_voidSetClkSource+0x78>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	6053      	str	r3, [r2, #4]
		CLR_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT1);
 8002d86:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <MRCC_voidSetClkSource+0x78>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4a12      	ldr	r2, [pc, #72]	; (8002dd4 <MRCC_voidSetClkSource+0x78>)
 8002d8c:	f023 0302 	bic.w	r3, r3, #2
 8002d90:	6053      	str	r3, [r2, #4]
		break;
 8002d92:	e019      	b.n	8002dc8 <MRCC_voidSetClkSource+0x6c>
		SET_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT0);
 8002d94:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <MRCC_voidSetClkSource+0x78>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4a0e      	ldr	r2, [pc, #56]	; (8002dd4 <MRCC_voidSetClkSource+0x78>)
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	6053      	str	r3, [r2, #4]
		CLR_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT1);
 8002da0:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <MRCC_voidSetClkSource+0x78>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a0b      	ldr	r2, [pc, #44]	; (8002dd4 <MRCC_voidSetClkSource+0x78>)
 8002da6:	f023 0302 	bic.w	r3, r3, #2
 8002daa:	6053      	str	r3, [r2, #4]
		break;
 8002dac:	e00c      	b.n	8002dc8 <MRCC_voidSetClkSource+0x6c>
		CLR_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT0);
 8002dae:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <MRCC_voidSetClkSource+0x78>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4a08      	ldr	r2, [pc, #32]	; (8002dd4 <MRCC_voidSetClkSource+0x78>)
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT1);
 8002dba:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <MRCC_voidSetClkSource+0x78>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4a05      	ldr	r2, [pc, #20]	; (8002dd4 <MRCC_voidSetClkSource+0x78>)
 8002dc0:	f043 0302 	orr.w	r3, r3, #2
 8002dc4:	6053      	str	r3, [r2, #4]
		break;
 8002dc6:	bf00      	nop
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40021000 	.word	0x40021000

08002dd8 <MRCC_voidSetBusesPrescaler>:

void MRCC_voidSetBusesPrescaler(u8 A_u8AHBPrescaler, u8 A_u8APB1Prescaler, u8 A_u8APB2Prescaler)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
 8002de2:	460b      	mov	r3, r1
 8002de4:	71bb      	strb	r3, [r7, #6]
 8002de6:	4613      	mov	r3, r2
 8002de8:	717b      	strb	r3, [r7, #5]
	RCC->CFGR &= ~(BUSES_PRESCALER_RESET_MASK << AHB_PRESCALER_FBIT);
 8002dea:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <MRCC_voidSetBusesPrescaler+0x5c>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4a11      	ldr	r2, [pc, #68]	; (8002e34 <MRCC_voidSetBusesPrescaler+0x5c>)
 8002df0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002df4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002df8:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (A_u8AHBPrescaler << AHB_PRESCALER_FBIT);
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <MRCC_voidSetBusesPrescaler+0x5c>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	79fa      	ldrb	r2, [r7, #7]
 8002e00:	0112      	lsls	r2, r2, #4
 8002e02:	4611      	mov	r1, r2
 8002e04:	4a0b      	ldr	r2, [pc, #44]	; (8002e34 <MRCC_voidSetBusesPrescaler+0x5c>)
 8002e06:	430b      	orrs	r3, r1
 8002e08:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (A_u8APB1Prescaler << APB1_PRESCALER_FBIT);
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <MRCC_voidSetBusesPrescaler+0x5c>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	79ba      	ldrb	r2, [r7, #6]
 8002e10:	0212      	lsls	r2, r2, #8
 8002e12:	4611      	mov	r1, r2
 8002e14:	4a07      	ldr	r2, [pc, #28]	; (8002e34 <MRCC_voidSetBusesPrescaler+0x5c>)
 8002e16:	430b      	orrs	r3, r1
 8002e18:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (A_u8APB2Prescaler << APB2_PRESCALER_FBIT);
 8002e1a:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <MRCC_voidSetBusesPrescaler+0x5c>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	797a      	ldrb	r2, [r7, #5]
 8002e20:	02d2      	lsls	r2, r2, #11
 8002e22:	4611      	mov	r1, r2
 8002e24:	4a03      	ldr	r2, [pc, #12]	; (8002e34 <MRCC_voidSetBusesPrescaler+0x5c>)
 8002e26:	430b      	orrs	r3, r1
 8002e28:	6053      	str	r3, [r2, #4]
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr
 8002e34:	40021000 	.word	0x40021000

08002e38 <SPI_u8ConfigureCh>:
void (*callBackFunc[SPI_MAX_CH])(u16);

/****** Public fucntions *******/

u8 SPI_u8ConfigureCh(SPI_Ch_t copy_channel , SPI_config_t *copy_config)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	6039      	str	r1, [r7, #0]
 8002e42:	71fb      	strb	r3, [r7, #7]
	u8 local_u8ErrorCode = 0 ;
 8002e44:	2300      	movs	r3, #0
 8002e46:	73fb      	strb	r3, [r7, #15]

	/* Intialize the register */
	(*(SPI[copy_channel] + CR1 ))  = 0;
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	4aa0      	ldr	r2, [pc, #640]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]


	/* Configure polarity in in idle */
	switch (copy_config -> u8CPOL){
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	785b      	ldrb	r3, [r3, #1]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00e      	beq.n	8002e7a <SPI_u8ConfigureCh+0x42>
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d119      	bne.n	8002e94 <SPI_u8ConfigureCh+0x5c>
		case 1  :
			SET_BIT  ((*(SPI[copy_channel] + CR1 )) , CPOL);
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	4a9a      	ldr	r2, [pc, #616]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	4997      	ldr	r1, [pc, #604]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002e6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e72:	f042 0202 	orr.w	r2, r2, #2
 8002e76:	601a      	str	r2, [r3, #0]
			break ;
 8002e78:	e00f      	b.n	8002e9a <SPI_u8ConfigureCh+0x62>
		case 0  :
			CLR_BIT((*(SPI[copy_channel] + CR1 )) , CPOL);
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	4a93      	ldr	r2, [pc, #588]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	4991      	ldr	r1, [pc, #580]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002e88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e8c:	f022 0202 	bic.w	r2, r2, #2
 8002e90:	601a      	str	r2, [r3, #0]
			break;
 8002e92:	e002      	b.n	8002e9a <SPI_u8ConfigureCh+0x62>
		default :
			local_u8ErrorCode = 1 ;
 8002e94:	2301      	movs	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
		break ;
 8002e98:	bf00      	nop
	}

	/* Configure phase */
	switch (copy_config -> u8CPHA){
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	789b      	ldrb	r3, [r3, #2]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00e      	beq.n	8002ec0 <SPI_u8ConfigureCh+0x88>
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d119      	bne.n	8002eda <SPI_u8ConfigureCh+0xa2>
		case 1  :
			SET_BIT  ((*(SPI[copy_channel] + CR1 )) , CPHA);
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	4a88      	ldr	r2, [pc, #544]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	4986      	ldr	r1, [pc, #536]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002eb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002eb8:	f042 0201 	orr.w	r2, r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]
			break ;
 8002ebe:	e00f      	b.n	8002ee0 <SPI_u8ConfigureCh+0xa8>
		case 0  :
			CLR_BIT((*(SPI[copy_channel] + CR1 )) , CPHA);
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	4a82      	ldr	r2, [pc, #520]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	497f      	ldr	r1, [pc, #508]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002ece:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
			break;
 8002ed8:	e002      	b.n	8002ee0 <SPI_u8ConfigureCh+0xa8>
		default :
			local_u8ErrorCode = 1 ;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
		break ;
 8002ede:	bf00      	nop
	}

	/* Configure Frame format MSB or LSB first */
	switch (copy_config -> u8FrameFormat){
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	78db      	ldrb	r3, [r3, #3]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00e      	beq.n	8002f06 <SPI_u8ConfigureCh+0xce>
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d119      	bne.n	8002f20 <SPI_u8ConfigureCh+0xe8>
		case 1  :
			SET_BIT  ((*(SPI[copy_channel] + CR1 )) , LSBFIRST);
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	4a77      	ldr	r2, [pc, #476]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	4974      	ldr	r1, [pc, #464]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002efa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002efe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f02:	601a      	str	r2, [r3, #0]
			break ;
 8002f04:	e00f      	b.n	8002f26 <SPI_u8ConfigureCh+0xee>
		case 0  :
			CLR_BIT((*(SPI[copy_channel] + CR1 )) , LSBFIRST);
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	4a70      	ldr	r2, [pc, #448]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	496e      	ldr	r1, [pc, #440]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002f14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f1c:	601a      	str	r2, [r3, #0]
			break;
 8002f1e:	e002      	b.n	8002f26 <SPI_u8ConfigureCh+0xee>
		default :
			local_u8ErrorCode = 1 ;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
		break ;
 8002f24:	bf00      	nop
	}

	/* Configure Frame size 8 or 16 bit */
	switch (copy_config -> u8FrameSize){
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	791b      	ldrb	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00e      	beq.n	8002f4c <SPI_u8ConfigureCh+0x114>
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d119      	bne.n	8002f66 <SPI_u8ConfigureCh+0x12e>
		case 1  :
			SET_BIT  ((*(SPI[copy_channel] + CR1 )) , DFF);
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	4a65      	ldr	r2, [pc, #404]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	4963      	ldr	r1, [pc, #396]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002f40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f48:	601a      	str	r2, [r3, #0]
			break ;
 8002f4a:	e00f      	b.n	8002f6c <SPI_u8ConfigureCh+0x134>
		case 0  :
			CLR_BIT((*(SPI[copy_channel] + CR1 )) , DFF);
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	4a5f      	ldr	r2, [pc, #380]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	495c      	ldr	r1, [pc, #368]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002f5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f62:	601a      	str	r2, [r3, #0]
			break;
 8002f64:	e002      	b.n	8002f6c <SPI_u8ConfigureCh+0x134>
		default :
			local_u8ErrorCode = 1 ;
 8002f66:	2301      	movs	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
		break ;
 8002f6a:	bf00      	nop
	}

	/* Enable or disable S.W slave mangement */
	switch (copy_config -> u8SSM){
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	795b      	ldrb	r3, [r3, #5]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d01a      	beq.n	8002faa <SPI_u8ConfigureCh+0x172>
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d125      	bne.n	8002fc4 <SPI_u8ConfigureCh+0x18c>
		case 1  :
			SET_BIT  ((*(SPI[copy_channel] + CR1 )) , SSM);
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	4a54      	ldr	r2, [pc, #336]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	4951      	ldr	r1, [pc, #324]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002f86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f8e:	601a      	str	r2, [r3, #0]
			SET_BIT  ((*(SPI[copy_channel] + CR1 ))  , SS1);
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	4a4e      	ldr	r2, [pc, #312]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	494b      	ldr	r1, [pc, #300]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002f9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa6:	601a      	str	r2, [r3, #0]
			break ;
 8002fa8:	e00f      	b.n	8002fca <SPI_u8ConfigureCh+0x192>
		case 0  :
			CLR_BIT((*(SPI[copy_channel] + CR1 )) , SSM);
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	4a47      	ldr	r2, [pc, #284]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	4945      	ldr	r1, [pc, #276]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002fb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fc0:	601a      	str	r2, [r3, #0]
			break;
 8002fc2:	e002      	b.n	8002fca <SPI_u8ConfigureCh+0x192>
		default :
			local_u8ErrorCode = 1 ;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
		break ;
 8002fc8:	bf00      	nop
	}

	/* Full duplex or Receive only  */
	switch (copy_config -> u8TransmissonMode){
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	799b      	ldrb	r3, [r3, #6]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00e      	beq.n	8002ff0 <SPI_u8ConfigureCh+0x1b8>
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d119      	bne.n	800300a <SPI_u8ConfigureCh+0x1d2>
		case 1  :
			SET_BIT  ((*(SPI[copy_channel] + CR1 )) , RXONLY);
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	4a3c      	ldr	r2, [pc, #240]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	493a      	ldr	r1, [pc, #232]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002fe4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fe8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fec:	601a      	str	r2, [r3, #0]
			break ;
 8002fee:	e00f      	b.n	8003010 <SPI_u8ConfigureCh+0x1d8>
		case 0  :
			CLR_BIT((*(SPI[copy_channel] + CR1 )) , RXONLY);
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	4a36      	ldr	r2, [pc, #216]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	4933      	ldr	r1, [pc, #204]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8002ffe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003006:	601a      	str	r2, [r3, #0]
			break;
 8003008:	e002      	b.n	8003010 <SPI_u8ConfigureCh+0x1d8>
		default :
			local_u8ErrorCode = 1 ;
 800300a:	2301      	movs	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
		break ;
 800300e:	bf00      	nop
	}

	/* Prescaller */
	if (copy_config -> u8Prescaler  <  8 )
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	79db      	ldrb	r3, [r3, #7]
 8003014:	2b07      	cmp	r3, #7
 8003016:	d80f      	bhi.n	8003038 <SPI_u8ConfigureCh+0x200>
	{
		(*(SPI[copy_channel] + CR1 )) |= (copy_config -> u8Prescaler << BR0);
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	4a2c      	ldr	r2, [pc, #176]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 800301c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	79db      	ldrb	r3, [r3, #7]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4618      	mov	r0, r3
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	4927      	ldr	r1, [pc, #156]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 800302e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003032:	4302      	orrs	r2, r0
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	e001      	b.n	800303c <SPI_u8ConfigureCh+0x204>
	}
	else
	{
		local_u8ErrorCode = 1 ;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
	}

	/* Enable or Disable interrupt */
	switch (copy_config -> u8InterruptEnable){
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	7a1b      	ldrb	r3, [r3, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d010      	beq.n	8003066 <SPI_u8ConfigureCh+0x22e>
 8003044:	2b01      	cmp	r3, #1
 8003046:	d11d      	bne.n	8003084 <SPI_u8ConfigureCh+0x24c>
		case 1  :
			SET_BIT  ((*(SPI[copy_channel] + CR2 )) , RXNEIE);
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	4a20      	ldr	r2, [pc, #128]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 800304c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003050:	3304      	adds	r3, #4
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	491d      	ldr	r1, [pc, #116]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8003058:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800305c:	3304      	adds	r3, #4
 800305e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003062:	601a      	str	r2, [r3, #0]
			break ;
 8003064:	e011      	b.n	800308a <SPI_u8ConfigureCh+0x252>
		case 0  :
			CLR_BIT((*(SPI[copy_channel] + CR2 )) , RXNEIE);
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	4a18      	ldr	r2, [pc, #96]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 800306a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800306e:	3304      	adds	r3, #4
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	4915      	ldr	r1, [pc, #84]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 8003076:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800307a:	3304      	adds	r3, #4
 800307c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003080:	601a      	str	r2, [r3, #0]
			break;
 8003082:	e002      	b.n	800308a <SPI_u8ConfigureCh+0x252>
		default :
			local_u8ErrorCode = 1 ;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
		break ;
 8003088:	bf00      	nop
	}

	/* Configure mode master or slave */
	switch (copy_config -> u8Mode){
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00e      	beq.n	80030b0 <SPI_u8ConfigureCh+0x278>
 8003092:	2b01      	cmp	r3, #1
 8003094:	d11c      	bne.n	80030d0 <SPI_u8ConfigureCh+0x298>
		case 1  :
			SET_BIT  ((*(SPI[copy_channel] + CR1 )) , MSTR);
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	4a0c      	ldr	r2, [pc, #48]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 800309a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	490a      	ldr	r1, [pc, #40]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 80030a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030a8:	f042 0204 	orr.w	r2, r2, #4
 80030ac:	601a      	str	r2, [r3, #0]
			break ;
 80030ae:	e012      	b.n	80030d6 <SPI_u8ConfigureCh+0x29e>
		case 0  :
			CLR_BIT((*(SPI[copy_channel] + CR1 )) , MSTR);
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	4a06      	ldr	r2, [pc, #24]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 80030b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	4903      	ldr	r1, [pc, #12]	; (80030cc <SPI_u8ConfigureCh+0x294>)
 80030be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030c2:	f022 0204 	bic.w	r2, r2, #4
 80030c6:	601a      	str	r2, [r3, #0]
			break;
 80030c8:	e005      	b.n	80030d6 <SPI_u8ConfigureCh+0x29e>
 80030ca:	bf00      	nop
 80030cc:	20000018 	.word	0x20000018
		default :
			local_u8ErrorCode = 1 ;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
		break ;
 80030d4:	bf00      	nop
	}

	/* Enable SPI */
	SET_BIT  ((*(SPI[copy_channel] + CR1 )) , SPE);
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	4a08      	ldr	r2, [pc, #32]	; (80030fc <SPI_u8ConfigureCh+0x2c4>)
 80030da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	4906      	ldr	r1, [pc, #24]	; (80030fc <SPI_u8ConfigureCh+0x2c4>)
 80030e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ec:	601a      	str	r2, [r3, #0]

	/* return error state */
	return local_u8ErrorCode ;
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000018 	.word	0x20000018

08003100 <SPI_transmit>:

u8 SPI_transmit(SPI_Ch_t copy_channel , u8 *copy_u8SendData, u16 size)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	6039      	str	r1, [r7, #0]
 800310a:	71fb      	strb	r3, [r7, #7]
 800310c:	4613      	mov	r3, r2
 800310e:	80bb      	strh	r3, [r7, #4]
	u16 initial_TxXferCount= size;
 8003110:	88bb      	ldrh	r3, [r7, #4]
 8003112:	817b      	strh	r3, [r7, #10]
	u16 TxXferCount = size;
 8003114:	88bb      	ldrh	r3, [r7, #4]
 8003116:	82fb      	strh	r3, [r7, #22]
	u8 *Local_u8PtrData ;
	Local_u8PtrData = copy_u8SendData;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	613b      	str	r3, [r7, #16]
	u32 timercounter=0;
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
	while (GET_BIT ( (*(SPI[copy_channel] + SR )) , TXE) == 0 && timercounter<10000000 )
 8003120:	e002      	b.n	8003128 <SPI_transmit+0x28>
	{
		timercounter++;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3301      	adds	r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
	while (GET_BIT ( (*(SPI[copy_channel] + SR )) , TXE) == 0 && timercounter<10000000 )
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <SPI_transmit+0xa8>)
 800312c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003130:	3308      	adds	r3, #8
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	085b      	lsrs	r3, r3, #1
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d103      	bne.n	8003146 <SPI_transmit+0x46>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4a1a      	ldr	r2, [pc, #104]	; (80031ac <SPI_transmit+0xac>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d3ed      	bcc.n	8003122 <SPI_transmit+0x22>
	}
	timercounter=0;
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
	if(initial_TxXferCount == 1)
 800314a:	897b      	ldrh	r3, [r7, #10]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d11f      	bne.n	8003190 <SPI_transmit+0x90>
	{
		*((u8 volatile *)0x4001300C) = *Local_u8PtrData ;
 8003150:	4a17      	ldr	r2, [pc, #92]	; (80031b0 <SPI_transmit+0xb0>)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	7013      	strb	r3, [r2, #0]
		Local_u8PtrData+=sizeof(u8);
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	3301      	adds	r3, #1
 800315c:	613b      	str	r3, [r7, #16]
		TxXferCount--;
 800315e:	8afb      	ldrh	r3, [r7, #22]
 8003160:	3b01      	subs	r3, #1
 8003162:	82fb      	strh	r3, [r7, #22]
	}
	/*while (GET_BIT ( (*(SPI[copy_channel] + SR )) , RXNE) == 0)
	{

	}*/
	while(TxXferCount>0)
 8003164:	e014      	b.n	8003190 <SPI_transmit+0x90>
	{
		if (GET_BIT ( (*(SPI[copy_channel] + SR )) , TXE) == 1 /*&& timercounter<10000000*/)
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	4a0f      	ldr	r2, [pc, #60]	; (80031a8 <SPI_transmit+0xa8>)
 800316a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316e:	3308      	adds	r3, #8
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	085b      	lsrs	r3, r3, #1
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b01      	cmp	r3, #1
 800317a:	d109      	bne.n	8003190 <SPI_transmit+0x90>
		{
			*((u8 volatile *)0x4001300C) = *Local_u8PtrData ;
 800317c:	4a0c      	ldr	r2, [pc, #48]	; (80031b0 <SPI_transmit+0xb0>)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	7013      	strb	r3, [r2, #0]
			Local_u8PtrData+=sizeof(u8);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	3301      	adds	r3, #1
 8003188:	613b      	str	r3, [r7, #16]
			TxXferCount--;
 800318a:	8afb      	ldrh	r3, [r7, #22]
 800318c:	3b01      	subs	r3, #1
 800318e:	82fb      	strh	r3, [r7, #22]
	while(TxXferCount>0)
 8003190:	8afb      	ldrh	r3, [r7, #22]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1e7      	bne.n	8003166 <SPI_transmit+0x66>
			//timercounter++;
		}
	}
	return *((u8 volatile *)0x4001300C);
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <SPI_transmit+0xb0>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	b2db      	uxtb	r3, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	20000018 	.word	0x20000018
 80031ac:	00989680 	.word	0x00989680
 80031b0:	4001300c 	.word	0x4001300c

080031b4 <SPI1_IRQHandler>:
	/* Send data */
	(*(SPI[copy_channel] + DR )) = copy_u16SendData ;
}

/***************** ISR handlers ******************/
void SPI1_IRQHandler (void){
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
	/* clear falg */
	CLR_BIT ((*(SPI[0] + SR )) , RXNE );
 80031ba:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <SPI1_IRQHandler+0x38>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3308      	adds	r3, #8
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <SPI1_IRQHandler+0x38>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3308      	adds	r3, #8
 80031c8:	f022 0201 	bic.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]
	/* Receive data */
	u16 local_u16RecData = (*(SPI[0] + DR )) ;
 80031ce:	4b07      	ldr	r3, [pc, #28]	; (80031ec <SPI1_IRQHandler+0x38>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	330c      	adds	r3, #12
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	80fb      	strh	r3, [r7, #6]
	/* call function*/
	callBackFunc[0](local_u16RecData);
 80031d8:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <SPI1_IRQHandler+0x3c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	88fa      	ldrh	r2, [r7, #6]
 80031de:	4610      	mov	r0, r2
 80031e0:	4798      	blx	r3
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000018 	.word	0x20000018
 80031f0:	2000010c 	.word	0x2000010c

080031f4 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void){
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
	/* clear falg */
	CLR_BIT ((*(SPI[1] + SR )) ,RXNE );
 80031fa:	4b0c      	ldr	r3, [pc, #48]	; (800322c <SPI2_IRQHandler+0x38>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	3308      	adds	r3, #8
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4b0a      	ldr	r3, [pc, #40]	; (800322c <SPI2_IRQHandler+0x38>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	3308      	adds	r3, #8
 8003208:	f022 0201 	bic.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]
	/* Receive data */
	u16 local_u16RecData = (*(SPI[0] + DR )) ;
 800320e:	4b07      	ldr	r3, [pc, #28]	; (800322c <SPI2_IRQHandler+0x38>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	330c      	adds	r3, #12
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	80fb      	strh	r3, [r7, #6]
	/* call function*/
	callBackFunc[1](local_u16RecData);
 8003218:	4b05      	ldr	r3, [pc, #20]	; (8003230 <SPI2_IRQHandler+0x3c>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	88fa      	ldrh	r2, [r7, #6]
 800321e:	4610      	mov	r0, r2
 8003220:	4798      	blx	r3
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000018 	.word	0x20000018
 8003230:	2000010c 	.word	0x2000010c

08003234 <MSTK_voidInit>:
#endif

static	void	(*SysTick_CallBack) (void) = NULL ;
static	u8		MSTK_u8ModeOfInterval ;
void	MSTK_voidInit				(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
	#if		MSTK_CLK_SRC	==	MSTK_SRC_AHB_8
		MSTK -> CTRL	=	0x00000000;
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <MSTK_voidInit+0x14>)
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
	#elif	MSTK_CLK_SRC	==	MSTK_SRC_AHB
		MSTK -> CTRL	=	0x00000004;
	#else
		#error	"Wrong Choice of Clock Source Pre-Scaller"
	#endif
}
 800323e:	bf00      	nop
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	e000e010 	.word	0xe000e010

0800324c <MSTK_voidSetBusyWait>:
void	MSTK_voidSetBusyWait		(u32 Copy_u32Ticks)	//_delay_us
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
	/*	load Ticks to load register		*/
	MSTK -> LOAD	=	Copy_u32Ticks;
 8003254:	4a11      	ldr	r2, [pc, #68]	; (800329c <MSTK_voidSetBusyWait+0x50>)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6053      	str	r3, [r2, #4]
	
	/*	Start Timer 					*/
	SET_BIT(MSTK -> CTRL , 0 );
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <MSTK_voidSetBusyWait+0x50>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a0f      	ldr	r2, [pc, #60]	; (800329c <MSTK_voidSetBusyWait+0x50>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	6013      	str	r3, [r2, #0]
	
	/*	Wait till Flage is raised 		*/
	while((GET_BIT(MSTK -> CTRL , 16)) == 0)
 8003266:	e000      	b.n	800326a <MSTK_voidSetBusyWait+0x1e>
	{
		asm("NOP");
 8003268:	bf00      	nop
	while((GET_BIT(MSTK -> CTRL , 16)) == 0)
 800326a:	4b0c      	ldr	r3, [pc, #48]	; (800329c <MSTK_voidSetBusyWait+0x50>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	0c1b      	lsrs	r3, r3, #16
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f7      	beq.n	8003268 <MSTK_voidSetBusyWait+0x1c>
	}
	
	/*	Stop Timer 						*/
	CLR_BIT(MSTK -> CTRL , 0 );
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <MSTK_voidSetBusyWait+0x50>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a07      	ldr	r2, [pc, #28]	; (800329c <MSTK_voidSetBusyWait+0x50>)
 800327e:	f023 0301 	bic.w	r3, r3, #1
 8003282:	6013      	str	r3, [r2, #0]
	MSTK -> LOAD	=	0;
 8003284:	4b05      	ldr	r3, [pc, #20]	; (800329c <MSTK_voidSetBusyWait+0x50>)
 8003286:	2200      	movs	r2, #0
 8003288:	605a      	str	r2, [r3, #4]
	MSTK -> VAL		=	0;
 800328a:	4b04      	ldr	r3, [pc, #16]	; (800329c <MSTK_voidSetBusyWait+0x50>)
 800328c:	2200      	movs	r2, #0
 800328e:	609a      	str	r2, [r3, #8]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	e000e010 	.word	0xe000e010

080032a0 <SysTick_Handler>:
	
	return	Local_u32RemainingTime;
}

void SysTick_Handler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
	u8 Local_u8Temp;
	
	if(	MSTK_u8ModeOfInterval == MSTK_SINGLE_INTERVAL)
 80032a6:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <SysTick_Handler+0x50>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d111      	bne.n	80032d2 <SysTick_Handler+0x32>
	{
		/*	Disable STK Interrupt 		*/
		CLR_BIT(MSTK -> CTRL , 1 );
 80032ae:	4b11      	ldr	r3, [pc, #68]	; (80032f4 <SysTick_Handler+0x54>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a10      	ldr	r2, [pc, #64]	; (80032f4 <SysTick_Handler+0x54>)
 80032b4:	f023 0302 	bic.w	r3, r3, #2
 80032b8:	6013      	str	r3, [r2, #0]
	
		/*	Stop timer					*/
		CLR_BIT(MSTK -> CTRL , 0 );
 80032ba:	4b0e      	ldr	r3, [pc, #56]	; (80032f4 <SysTick_Handler+0x54>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a0d      	ldr	r2, [pc, #52]	; (80032f4 <SysTick_Handler+0x54>)
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	6013      	str	r3, [r2, #0]
		MSTK -> LOAD	=	0;
 80032c6:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <SysTick_Handler+0x54>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	605a      	str	r2, [r3, #4]
		MSTK -> VAL		=	0;	
 80032cc:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <SysTick_Handler+0x54>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	609a      	str	r2, [r3, #8]
	}
	/*	CallBack notification 			*/
	SysTick_CallBack();
 80032d2:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <SysTick_Handler+0x58>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4798      	blx	r3
	
	/*	Clear Interrupt Flag By reading	*/
	Local_u8Temp = GET_BIT(MSTK -> CTRL , 16);
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <SysTick_Handler+0x54>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	0c1b      	lsrs	r3, r3, #16
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	71fb      	strb	r3, [r7, #7]
}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	200000ec 	.word	0x200000ec
 80032f4:	e000e010 	.word	0xe000e010
 80032f8:	200000e8 	.word	0x200000e8

080032fc <MTIMER2_voidSetinterruptTimer>:
	TIMER2->CR2=0;
	TIMER2->PSC=7;

}
void MTIMER2_voidSetinterruptTimer(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
	SET_BIT(TIMER2->CR1,ARPE);
 8003300:	4b11      	ldr	r3, [pc, #68]	; (8003348 <MTIMER2_voidSetinterruptTimer+0x4c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a10      	ldr	r2, [pc, #64]	; (8003348 <MTIMER2_voidSetinterruptTimer+0x4c>)
 8003306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800330a:	6013      	str	r3, [r2, #0]
	SET_BIT(TIMER2->CR1,DIR);
 800330c:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <MTIMER2_voidSetinterruptTimer+0x4c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a0d      	ldr	r2, [pc, #52]	; (8003348 <MTIMER2_voidSetinterruptTimer+0x4c>)
 8003312:	f043 0310 	orr.w	r3, r3, #16
 8003316:	6013      	str	r3, [r2, #0]
	SET_BIT(TIMER2->DIER,UIE);
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <MTIMER2_voidSetinterruptTimer+0x4c>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <MTIMER2_voidSetinterruptTimer+0x4c>)
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	60d3      	str	r3, [r2, #12]
	TIMER2->PSC=7999;
 8003324:	4b08      	ldr	r3, [pc, #32]	; (8003348 <MTIMER2_voidSetinterruptTimer+0x4c>)
 8003326:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800332a:	629a      	str	r2, [r3, #40]	; 0x28
	TIMER2->ARR = 2999;
 800332c:	4b06      	ldr	r3, [pc, #24]	; (8003348 <MTIMER2_voidSetinterruptTimer+0x4c>)
 800332e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003332:	62da      	str	r2, [r3, #44]	; 0x2c
	SET_BIT(TIMER2->CR1, CEN);
 8003334:	4b04      	ldr	r3, [pc, #16]	; (8003348 <MTIMER2_voidSetinterruptTimer+0x4c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a03      	ldr	r2, [pc, #12]	; (8003348 <MTIMER2_voidSetinterruptTimer+0x4c>)
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	6013      	str	r3, [r2, #0]
}
 8003340:	bf00      	nop
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr
 8003348:	40000400 	.word	0x40000400

0800334c <MTIMER2_voidSetCallBack>:

	}
	CLR_BIT(TIMER2->SR , 0);
}
void MTIMER2_voidSetCallBack(void (*ptr)(void))
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
	if(ptr != NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <MTIMER2_voidSetCallBack+0x14>
	{
		GLOBALPTR_FUNC=ptr;
 800335a:	4a04      	ldr	r2, [pc, #16]	; (800336c <MTIMER2_voidSetCallBack+0x20>)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6013      	str	r3, [r2, #0]
	}
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	200000f0 	.word	0x200000f0

08003370 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
	GLOBALPTR_FUNC();
 8003374:	4b05      	ldr	r3, [pc, #20]	; (800338c <TIM3_IRQHandler+0x1c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4798      	blx	r3
	CLR_BIT(TIMER2->SR,0);
 800337a:	4b05      	ldr	r3, [pc, #20]	; (8003390 <TIM3_IRQHandler+0x20>)
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	4a04      	ldr	r2, [pc, #16]	; (8003390 <TIM3_IRQHandler+0x20>)
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	6113      	str	r3, [r2, #16]
}
 8003386:	bf00      	nop
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	200000f0 	.word	0x200000f0
 8003390:	40000400 	.word	0x40000400

08003394 <MUSART_voidInit>:
s16 GlobalUSART3_s16RecievedRear=-1;

static void (* USART1_CallBack)   (u8 data)=NULL;

void MUSART_voidInit(USART_T USART_NUM)
{
 8003394:	b590      	push	{r4, r7, lr}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	71fb      	strb	r3, [r7, #7]
	/*	Baudrate 	9600					*/
	USART[USART_NUM] -> BRR = MUSART_voidSetBaudrateRegister(Fclock, BUADRATE) ;
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	4a3f      	ldr	r2, [pc, #252]	; (80034a0 <MUSART_voidInit+0x10c>)
 80033a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80033a6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80033aa:	483e      	ldr	r0, [pc, #248]	; (80034a4 <MUSART_voidInit+0x110>)
 80033ac:	f000 f87c 	bl	80034a8 <MUSART_voidSetBaudrateRegister>
 80033b0:	4603      	mov	r3, r0
 80033b2:	60a3      	str	r3, [r4, #8]
	/*	UART EN , TX EN , RX EN 			*/
	SET_BIT((USART[USART_NUM] -> CR[0]),RE);
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	4a3a      	ldr	r2, [pc, #232]	; (80034a0 <MUSART_voidInit+0x10c>)
 80033b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	4937      	ldr	r1, [pc, #220]	; (80034a0 <MUSART_voidInit+0x10c>)
 80033c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033c6:	f042 0204 	orr.w	r2, r2, #4
 80033ca:	60da      	str	r2, [r3, #12]
	SET_BIT((USART[USART_NUM] -> CR[0]),TE);
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	4a34      	ldr	r2, [pc, #208]	; (80034a0 <MUSART_voidInit+0x10c>)
 80033d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	4931      	ldr	r1, [pc, #196]	; (80034a0 <MUSART_voidInit+0x10c>)
 80033da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033de:	f042 0208 	orr.w	r2, r2, #8
 80033e2:	60da      	str	r2, [r3, #12]
	SET_BIT((USART[USART_NUM] -> CR[0]),UE);
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	4a2e      	ldr	r2, [pc, #184]	; (80034a0 <MUSART_voidInit+0x10c>)
 80033e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	492b      	ldr	r1, [pc, #172]	; (80034a0 <MUSART_voidInit+0x10c>)
 80033f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033fa:	60da      	str	r2, [r3, #12]
	USART[USART_NUM] -> SR = 0;
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	4a28      	ldr	r2, [pc, #160]	; (80034a0 <MUSART_voidInit+0x10c>)
 8003400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
	SET_BIT((USART[USART_NUM] -> CR[0]),RXNIE);
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	4a25      	ldr	r2, [pc, #148]	; (80034a0 <MUSART_voidInit+0x10c>)
 800340c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	4922      	ldr	r1, [pc, #136]	; (80034a0 <MUSART_voidInit+0x10c>)
 8003416:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800341a:	f042 0220 	orr.w	r2, r2, #32
 800341e:	60da      	str	r2, [r3, #12]
	MUSART_voidEnableUSART_RecieveInterrupt(USART_NUM);
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fa38 	bl	8003898 <MUSART_voidEnableUSART_RecieveInterrupt>
	if(USART_NUM == USART1)
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10f      	bne.n	800344e <MUSART_voidInit+0xba>
	{
		MRCC_voidPerClock_State(APB2 ,USART1_PERIPHERAL ,PClock_enable );
 800342e:	2201      	movs	r2, #1
 8003430:	210e      	movs	r1, #14
 8003432:	2002      	movs	r0, #2
 8003434:	f7ff fb90 	bl	8002b58 <MRCC_voidPerClock_State>
		MGPIO_voidSetPinDirection(GPIOA , PIN9  , OUTPUT_SPEED_2MHZ_AFPP);
 8003438:	220a      	movs	r2, #10
 800343a:	2109      	movs	r1, #9
 800343c:	2000      	movs	r0, #0
 800343e:	f7fd fd2f 	bl	8000ea0 <MGPIO_voidSetPinDirection>
		MGPIO_voidSetPinDirection(GPIOA , PIN10  , INPUT_PULL_UP_DOWN);
 8003442:	2208      	movs	r2, #8
 8003444:	210a      	movs	r1, #10
 8003446:	2000      	movs	r0, #0
 8003448:	f7fd fd2a 	bl	8000ea0 <MGPIO_voidSetPinDirection>
	{
		MRCC_voidPerClock_State(APB1 ,USART3_PERIPHERAL ,PClock_enable );
		MGPIO_voidSetPinDirection(GPIOB , PIN10  , OUTPUT_SPEED_2MHZ_AFPP);
		MGPIO_voidSetPinDirection(GPIOB , PIN11  , INPUT_FLOATING);
	}
}
 800344c:	e024      	b.n	8003498 <MUSART_voidInit+0x104>
	else if (USART_NUM == USART2)
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d10f      	bne.n	8003474 <MUSART_voidInit+0xe0>
		MRCC_voidPerClock_State(APB1 ,USART2_PERIPHERAL ,PClock_enable );
 8003454:	2201      	movs	r2, #1
 8003456:	2111      	movs	r1, #17
 8003458:	2001      	movs	r0, #1
 800345a:	f7ff fb7d 	bl	8002b58 <MRCC_voidPerClock_State>
		MGPIO_voidSetPinDirection(GPIOA , PIN2  , OUTPUT_SPEED_2MHZ_AFPP);
 800345e:	220a      	movs	r2, #10
 8003460:	2102      	movs	r1, #2
 8003462:	2000      	movs	r0, #0
 8003464:	f7fd fd1c 	bl	8000ea0 <MGPIO_voidSetPinDirection>
		MGPIO_voidSetPinDirection(GPIOA , PIN3  , INPUT_FLOATING);
 8003468:	2204      	movs	r2, #4
 800346a:	2103      	movs	r1, #3
 800346c:	2000      	movs	r0, #0
 800346e:	f7fd fd17 	bl	8000ea0 <MGPIO_voidSetPinDirection>
}
 8003472:	e011      	b.n	8003498 <MUSART_voidInit+0x104>
	else if(USART_NUM == USART3)
 8003474:	79fb      	ldrb	r3, [r7, #7]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d10e      	bne.n	8003498 <MUSART_voidInit+0x104>
		MRCC_voidPerClock_State(APB1 ,USART3_PERIPHERAL ,PClock_enable );
 800347a:	2201      	movs	r2, #1
 800347c:	2112      	movs	r1, #18
 800347e:	2001      	movs	r0, #1
 8003480:	f7ff fb6a 	bl	8002b58 <MRCC_voidPerClock_State>
		MGPIO_voidSetPinDirection(GPIOB , PIN10  , OUTPUT_SPEED_2MHZ_AFPP);
 8003484:	220a      	movs	r2, #10
 8003486:	210a      	movs	r1, #10
 8003488:	2001      	movs	r0, #1
 800348a:	f7fd fd09 	bl	8000ea0 <MGPIO_voidSetPinDirection>
		MGPIO_voidSetPinDirection(GPIOB , PIN11  , INPUT_FLOATING);
 800348e:	2204      	movs	r2, #4
 8003490:	210b      	movs	r1, #11
 8003492:	2001      	movs	r0, #1
 8003494:	f7fd fd04 	bl	8000ea0 <MGPIO_voidSetPinDirection>
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	bd90      	pop	{r4, r7, pc}
 80034a0:	20000020 	.word	0x20000020
 80034a4:	007a1200 	.word	0x007a1200

080034a8 <MUSART_voidSetBaudrateRegister>:
u32 MUSART_voidSetBaudrateRegister(u32 Copy_u32FClock, u32 Copy_u32Baudrate)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
	u32 Local_u32DivFrac;
	u32 Local_u32BRRreturn;
	f32 Local_F32mentissaa;
	f32 Local_f32DivFrac;
	
	Local_u32mentissaa=Copy_u32FClock/(Copy_u32Baudrate*16);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034bc:	61fb      	str	r3, [r7, #28]
	Local_F32mentissaa=Copy_u32FClock/(Copy_u32Baudrate*16);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fd fba9 	bl	8000c20 <__aeabi_ui2f>
 80034ce:	4603      	mov	r3, r0
 80034d0:	617b      	str	r3, [r7, #20]
	Local_u32DivFrac=(Local_u32mentissaa-Local_F32mentissaa)*16;
 80034d2:	69f8      	ldr	r0, [r7, #28]
 80034d4:	f7fd fba4 	bl	8000c20 <__aeabi_ui2f>
 80034d8:	4603      	mov	r3, r0
 80034da:	6979      	ldr	r1, [r7, #20]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd faed 	bl	8000abc <__aeabi_fsub>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fc fe41 	bl	8000170 <__aeabi_fmul>
 80034ee:	4603      	mov	r3, r0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fd fc63 	bl	8000dbc <__aeabi_f2uiz>
 80034f6:	4603      	mov	r3, r0
 80034f8:	61bb      	str	r3, [r7, #24]
	Local_f32DivFrac=(Local_u32mentissaa-Local_F32mentissaa)*16;
 80034fa:	69f8      	ldr	r0, [r7, #28]
 80034fc:	f7fd fb90 	bl	8000c20 <__aeabi_ui2f>
 8003500:	4603      	mov	r3, r0
 8003502:	6979      	ldr	r1, [r7, #20]
 8003504:	4618      	mov	r0, r3
 8003506:	f7fd fad9 	bl	8000abc <__aeabi_fsub>
 800350a:	4603      	mov	r3, r0
 800350c:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8003510:	4618      	mov	r0, r3
 8003512:	f7fc fe2d 	bl	8000170 <__aeabi_fmul>
 8003516:	4603      	mov	r3, r0
 8003518:	613b      	str	r3, [r7, #16]
	if(Local_f32DivFrac>15.5)
 800351a:	4915      	ldr	r1, [pc, #84]	; (8003570 <MUSART_voidSetBaudrateRegister+0xc8>)
 800351c:	6938      	ldr	r0, [r7, #16]
 800351e:	f7fd fc43 	bl	8000da8 <__aeabi_fcmpgt>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <MUSART_voidSetBaudrateRegister+0x8c>
	{
		Local_u32mentissaa++;
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	3301      	adds	r3, #1
 800352c:	61fb      	str	r3, [r7, #28]
		Local_u32DivFrac=0;
 800352e:	2300      	movs	r3, #0
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	e013      	b.n	800355c <MUSART_voidSetBaudrateRegister+0xb4>
	}
	else
	{
		if((Local_f32DivFrac-Local_u32DivFrac)> 0.5 )
 8003534:	69b8      	ldr	r0, [r7, #24]
 8003536:	f7fd fb73 	bl	8000c20 <__aeabi_ui2f>
 800353a:	4603      	mov	r3, r0
 800353c:	4619      	mov	r1, r3
 800353e:	6938      	ldr	r0, [r7, #16]
 8003540:	f7fd fabc 	bl	8000abc <__aeabi_fsub>
 8003544:	4603      	mov	r3, r0
 8003546:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800354a:	4618      	mov	r0, r3
 800354c:	f7fd fc2c 	bl	8000da8 <__aeabi_fcmpgt>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <MUSART_voidSetBaudrateRegister+0xb4>
		{
			Local_u32DivFrac++;
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	3301      	adds	r3, #1
 800355a:	61bb      	str	r3, [r7, #24]
		}
		else
		{/*don't do anything*/}
	}
	Local_u32BRRreturn=(Local_u32mentissaa<<4) | (Local_u32DivFrac);
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
	return Local_u32BRRreturn;
 8003566:	68fb      	ldr	r3, [r7, #12]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3720      	adds	r7, #32
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	41780000 	.word	0x41780000

08003574 <MUSART_SetCallBack>:
	USART[USART_NUM] -> DR = '\0';
	while(GET_BIT(USART[USART_NUM]->SR,TXE) == 0 );

}*/
void MUSART_SetCallBack(void (*PTR)(u8 data))
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	USART1_CallBack=PTR;
 800357c:	4a03      	ldr	r2, [pc, #12]	; (800358c <MUSART_SetCallBack+0x18>)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6013      	str	r3, [r2, #0]
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr
 800358c:	200000f4 	.word	0x200000f4

08003590 <MUSART_u8GetRecievedValue>:
		}
		USART[USART_NUM] -> DR = '\0';
		while(GET_BIT(USART[USART_NUM]->SR,TXE) == 0 );
}
void MUSART_u8GetRecievedValue(USART_T USART_NUM, u8 *Ptr_u8RecievedChar)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	6039      	str	r1, [r7, #0]
 800359a:	71fb      	strb	r3, [r7, #7]
	if(MUSART_u8IsRecieveBufferAvailable(USART_NUM)>0)
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 f8a6 	bl	80036f0 <MUSART_u8IsRecieveBufferAvailable>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8089 	beq.w	80036be <MUSART_u8GetRecievedValue+0x12e>
	{
	if(USART_NUM == USART1)
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d12a      	bne.n	8003608 <MUSART_u8GetRecievedValue+0x78>
	{
		GlobalUSART1_s16RecievedRear=(GlobalUSART1_s16RecievedRear+1)%BUFFER_SIZE;
 80035b2:	4b45      	ldr	r3, [pc, #276]	; (80036c8 <MUSART_u8GetRecievedValue+0x138>)
 80035b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035b8:	3301      	adds	r3, #1
 80035ba:	4a44      	ldr	r2, [pc, #272]	; (80036cc <MUSART_u8GetRecievedValue+0x13c>)
 80035bc:	fb82 1203 	smull	r1, r2, r2, r3
 80035c0:	1151      	asrs	r1, r2, #5
 80035c2:	17da      	asrs	r2, r3, #31
 80035c4:	1a8a      	subs	r2, r1, r2
 80035c6:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80035ca:	fb01 f202 	mul.w	r2, r1, r2
 80035ce:	1a9a      	subs	r2, r3, r2
 80035d0:	b212      	sxth	r2, r2
 80035d2:	4b3d      	ldr	r3, [pc, #244]	; (80036c8 <MUSART_u8GetRecievedValue+0x138>)
 80035d4:	801a      	strh	r2, [r3, #0]
		*Ptr_u8RecievedChar = GlobalUSART1_u8RecievedValue[GlobalUSART1_s16RecievedRear];
 80035d6:	4b3c      	ldr	r3, [pc, #240]	; (80036c8 <MUSART_u8GetRecievedValue+0x138>)
 80035d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035dc:	461a      	mov	r2, r3
 80035de:	4b3c      	ldr	r3, [pc, #240]	; (80036d0 <MUSART_u8GetRecievedValue+0x140>)
 80035e0:	5c9a      	ldrb	r2, [r3, r2]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	701a      	strb	r2, [r3, #0]
		if(GlobalUSART1_s16RecievedFront == GlobalUSART1_s16RecievedRear)
 80035e6:	4b3b      	ldr	r3, [pc, #236]	; (80036d4 <MUSART_u8GetRecievedValue+0x144>)
 80035e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80035ec:	4b36      	ldr	r3, [pc, #216]	; (80036c8 <MUSART_u8GetRecievedValue+0x138>)
 80035ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d163      	bne.n	80036be <MUSART_u8GetRecievedValue+0x12e>
		{
			GlobalUSART1_s16RecievedFront=-1;
 80035f6:	4b37      	ldr	r3, [pc, #220]	; (80036d4 <MUSART_u8GetRecievedValue+0x144>)
 80035f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035fc:	801a      	strh	r2, [r3, #0]
			GlobalUSART1_s16RecievedRear=-1;
 80035fe:	4b32      	ldr	r3, [pc, #200]	; (80036c8 <MUSART_u8GetRecievedValue+0x138>)
 8003600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003604:	801a      	strh	r2, [r3, #0]
			GlobalUSART3_s16RecievedFront=-1;
			GlobalUSART3_s16RecievedRear=-1;
		}
	}
	}
}
 8003606:	e05a      	b.n	80036be <MUSART_u8GetRecievedValue+0x12e>
	else if(USART_NUM == USART2)
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d12a      	bne.n	8003664 <MUSART_u8GetRecievedValue+0xd4>
		GlobalUSART2_s16RecievedRear=(GlobalUSART2_s16RecievedRear+1)%BUFFER_SIZE;
 800360e:	4b32      	ldr	r3, [pc, #200]	; (80036d8 <MUSART_u8GetRecievedValue+0x148>)
 8003610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003614:	3301      	adds	r3, #1
 8003616:	4a2d      	ldr	r2, [pc, #180]	; (80036cc <MUSART_u8GetRecievedValue+0x13c>)
 8003618:	fb82 1203 	smull	r1, r2, r2, r3
 800361c:	1151      	asrs	r1, r2, #5
 800361e:	17da      	asrs	r2, r3, #31
 8003620:	1a8a      	subs	r2, r1, r2
 8003622:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003626:	fb01 f202 	mul.w	r2, r1, r2
 800362a:	1a9a      	subs	r2, r3, r2
 800362c:	b212      	sxth	r2, r2
 800362e:	4b2a      	ldr	r3, [pc, #168]	; (80036d8 <MUSART_u8GetRecievedValue+0x148>)
 8003630:	801a      	strh	r2, [r3, #0]
		*Ptr_u8RecievedChar = GlobalUSART2_u8RecievedValue[GlobalUSART2_s16RecievedRear];
 8003632:	4b29      	ldr	r3, [pc, #164]	; (80036d8 <MUSART_u8GetRecievedValue+0x148>)
 8003634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003638:	461a      	mov	r2, r3
 800363a:	4b28      	ldr	r3, [pc, #160]	; (80036dc <MUSART_u8GetRecievedValue+0x14c>)
 800363c:	5c9a      	ldrb	r2, [r3, r2]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	701a      	strb	r2, [r3, #0]
		if(GlobalUSART2_s16RecievedFront == GlobalUSART2_s16RecievedRear)
 8003642:	4b27      	ldr	r3, [pc, #156]	; (80036e0 <MUSART_u8GetRecievedValue+0x150>)
 8003644:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003648:	4b23      	ldr	r3, [pc, #140]	; (80036d8 <MUSART_u8GetRecievedValue+0x148>)
 800364a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800364e:	429a      	cmp	r2, r3
 8003650:	d135      	bne.n	80036be <MUSART_u8GetRecievedValue+0x12e>
			GlobalUSART2_s16RecievedFront=-1;
 8003652:	4b23      	ldr	r3, [pc, #140]	; (80036e0 <MUSART_u8GetRecievedValue+0x150>)
 8003654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003658:	801a      	strh	r2, [r3, #0]
			GlobalUSART2_s16RecievedRear=-1;
 800365a:	4b1f      	ldr	r3, [pc, #124]	; (80036d8 <MUSART_u8GetRecievedValue+0x148>)
 800365c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003660:	801a      	strh	r2, [r3, #0]
}
 8003662:	e02c      	b.n	80036be <MUSART_u8GetRecievedValue+0x12e>
	else if(USART_NUM == USART3)
 8003664:	79fb      	ldrb	r3, [r7, #7]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d129      	bne.n	80036be <MUSART_u8GetRecievedValue+0x12e>
		GlobalUSART3_s16RecievedRear=(GlobalUSART3_s16RecievedRear+1)%BUFFER_SIZE;
 800366a:	4b1e      	ldr	r3, [pc, #120]	; (80036e4 <MUSART_u8GetRecievedValue+0x154>)
 800366c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003670:	3301      	adds	r3, #1
 8003672:	4a16      	ldr	r2, [pc, #88]	; (80036cc <MUSART_u8GetRecievedValue+0x13c>)
 8003674:	fb82 1203 	smull	r1, r2, r2, r3
 8003678:	1151      	asrs	r1, r2, #5
 800367a:	17da      	asrs	r2, r3, #31
 800367c:	1a8a      	subs	r2, r1, r2
 800367e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003682:	fb01 f202 	mul.w	r2, r1, r2
 8003686:	1a9a      	subs	r2, r3, r2
 8003688:	b212      	sxth	r2, r2
 800368a:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <MUSART_u8GetRecievedValue+0x154>)
 800368c:	801a      	strh	r2, [r3, #0]
		*Ptr_u8RecievedChar = GlobalUSART3_u8RecievedValue[GlobalUSART3_s16RecievedRear];
 800368e:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <MUSART_u8GetRecievedValue+0x154>)
 8003690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003694:	461a      	mov	r2, r3
 8003696:	4b14      	ldr	r3, [pc, #80]	; (80036e8 <MUSART_u8GetRecievedValue+0x158>)
 8003698:	5c9a      	ldrb	r2, [r3, r2]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	701a      	strb	r2, [r3, #0]
		if(GlobalUSART3_s16RecievedFront == GlobalUSART3_s16RecievedRear)
 800369e:	4b13      	ldr	r3, [pc, #76]	; (80036ec <MUSART_u8GetRecievedValue+0x15c>)
 80036a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80036a4:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <MUSART_u8GetRecievedValue+0x154>)
 80036a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d107      	bne.n	80036be <MUSART_u8GetRecievedValue+0x12e>
			GlobalUSART3_s16RecievedFront=-1;
 80036ae:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <MUSART_u8GetRecievedValue+0x15c>)
 80036b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036b4:	801a      	strh	r2, [r3, #0]
			GlobalUSART3_s16RecievedRear=-1;
 80036b6:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <MUSART_u8GetRecievedValue+0x154>)
 80036b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036bc:	801a      	strh	r2, [r3, #0]
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	2000002e 	.word	0x2000002e
 80036cc:	057619f1 	.word	0x057619f1
 80036d0:	20000ccc 	.word	0x20000ccc
 80036d4:	2000002c 	.word	0x2000002c
 80036d8:	20000032 	.word	0x20000032
 80036dc:	20000114 	.word	0x20000114
 80036e0:	20000030 	.word	0x20000030
 80036e4:	20000036 	.word	0x20000036
 80036e8:	200006f0 	.word	0x200006f0
 80036ec:	20000034 	.word	0x20000034

080036f0 <MUSART_u8IsRecieveBufferAvailable>:

u16 MUSART_u8IsRecieveBufferAvailable(USART_T USART_NUM)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	71fb      	strb	r3, [r7, #7]
	u16 Buffer_count;
	if(USART_NUM == USART1)
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d13b      	bne.n	8003778 <MUSART_u8IsRecieveBufferAvailable+0x88>
	{
		if(GlobalUSART1_s16RecievedFront>GlobalUSART1_s16RecievedRear)
 8003700:	4b5f      	ldr	r3, [pc, #380]	; (8003880 <MUSART_u8IsRecieveBufferAvailable+0x190>)
 8003702:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003706:	4b5f      	ldr	r3, [pc, #380]	; (8003884 <MUSART_u8IsRecieveBufferAvailable+0x194>)
 8003708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800370c:	429a      	cmp	r2, r3
 800370e:	dd0a      	ble.n	8003726 <MUSART_u8IsRecieveBufferAvailable+0x36>
		{
			Buffer_count=GlobalUSART1_s16RecievedFront-GlobalUSART1_s16RecievedRear;
 8003710:	4b5b      	ldr	r3, [pc, #364]	; (8003880 <MUSART_u8IsRecieveBufferAvailable+0x190>)
 8003712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003716:	b29a      	uxth	r2, r3
 8003718:	4b5a      	ldr	r3, [pc, #360]	; (8003884 <MUSART_u8IsRecieveBufferAvailable+0x194>)
 800371a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800371e:	b29b      	uxth	r3, r3
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	81fb      	strh	r3, [r7, #14]
 8003724:	e0a5      	b.n	8003872 <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
		else if(GlobalUSART1_s16RecievedFront<GlobalUSART1_s16RecievedRear)
 8003726:	4b56      	ldr	r3, [pc, #344]	; (8003880 <MUSART_u8IsRecieveBufferAvailable+0x190>)
 8003728:	f9b3 2000 	ldrsh.w	r2, [r3]
 800372c:	4b55      	ldr	r3, [pc, #340]	; (8003884 <MUSART_u8IsRecieveBufferAvailable+0x194>)
 800372e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003732:	429a      	cmp	r2, r3
 8003734:	da0d      	bge.n	8003752 <MUSART_u8IsRecieveBufferAvailable+0x62>
		{
			Buffer_count = (BUFFER_SIZE - GlobalUSART1_s16RecievedRear)+ GlobalUSART1_s16RecievedFront;
 8003736:	4b52      	ldr	r3, [pc, #328]	; (8003880 <MUSART_u8IsRecieveBufferAvailable+0x190>)
 8003738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800373c:	b29a      	uxth	r2, r3
 800373e:	4b51      	ldr	r3, [pc, #324]	; (8003884 <MUSART_u8IsRecieveBufferAvailable+0x194>)
 8003740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003744:	b29b      	uxth	r3, r3
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	b29b      	uxth	r3, r3
 800374a:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800374e:	81fb      	strh	r3, [r7, #14]
 8003750:	e08f      	b.n	8003872 <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
		else if (GlobalUSART1_s16RecievedFront== -1 && GlobalUSART1_s16RecievedRear == -1)
 8003752:	4b4b      	ldr	r3, [pc, #300]	; (8003880 <MUSART_u8IsRecieveBufferAvailable+0x190>)
 8003754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375c:	d108      	bne.n	8003770 <MUSART_u8IsRecieveBufferAvailable+0x80>
 800375e:	4b49      	ldr	r3, [pc, #292]	; (8003884 <MUSART_u8IsRecieveBufferAvailable+0x194>)
 8003760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003768:	d102      	bne.n	8003770 <MUSART_u8IsRecieveBufferAvailable+0x80>
		{
			Buffer_count=0;
 800376a:	2300      	movs	r3, #0
 800376c:	81fb      	strh	r3, [r7, #14]
 800376e:	e080      	b.n	8003872 <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
		else 
		{
			Buffer_count = BUFFER_SIZE;
 8003770:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003774:	81fb      	strh	r3, [r7, #14]
 8003776:	e07c      	b.n	8003872 <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
	}
	else if(USART_NUM == USART2)
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d13b      	bne.n	80037f6 <MUSART_u8IsRecieveBufferAvailable+0x106>
	{
		if(GlobalUSART2_s16RecievedFront>GlobalUSART2_s16RecievedRear)
 800377e:	4b42      	ldr	r3, [pc, #264]	; (8003888 <MUSART_u8IsRecieveBufferAvailable+0x198>)
 8003780:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003784:	4b41      	ldr	r3, [pc, #260]	; (800388c <MUSART_u8IsRecieveBufferAvailable+0x19c>)
 8003786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800378a:	429a      	cmp	r2, r3
 800378c:	dd0a      	ble.n	80037a4 <MUSART_u8IsRecieveBufferAvailable+0xb4>
		{
			Buffer_count=GlobalUSART2_s16RecievedFront-GlobalUSART2_s16RecievedRear;
 800378e:	4b3e      	ldr	r3, [pc, #248]	; (8003888 <MUSART_u8IsRecieveBufferAvailable+0x198>)
 8003790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003794:	b29a      	uxth	r2, r3
 8003796:	4b3d      	ldr	r3, [pc, #244]	; (800388c <MUSART_u8IsRecieveBufferAvailable+0x19c>)
 8003798:	f9b3 3000 	ldrsh.w	r3, [r3]
 800379c:	b29b      	uxth	r3, r3
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	81fb      	strh	r3, [r7, #14]
 80037a2:	e066      	b.n	8003872 <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
		else if(GlobalUSART2_s16RecievedFront<GlobalUSART2_s16RecievedRear)
 80037a4:	4b38      	ldr	r3, [pc, #224]	; (8003888 <MUSART_u8IsRecieveBufferAvailable+0x198>)
 80037a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80037aa:	4b38      	ldr	r3, [pc, #224]	; (800388c <MUSART_u8IsRecieveBufferAvailable+0x19c>)
 80037ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	da0d      	bge.n	80037d0 <MUSART_u8IsRecieveBufferAvailable+0xe0>
		{
			Buffer_count = (BUFFER_SIZE - GlobalUSART2_s16RecievedRear)+ GlobalUSART2_s16RecievedFront;
 80037b4:	4b34      	ldr	r3, [pc, #208]	; (8003888 <MUSART_u8IsRecieveBufferAvailable+0x198>)
 80037b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	4b33      	ldr	r3, [pc, #204]	; (800388c <MUSART_u8IsRecieveBufferAvailable+0x19c>)
 80037be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80037cc:	81fb      	strh	r3, [r7, #14]
 80037ce:	e050      	b.n	8003872 <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
		else if (GlobalUSART2_s16RecievedFront== -1 && GlobalUSART2_s16RecievedRear == -1)
 80037d0:	4b2d      	ldr	r3, [pc, #180]	; (8003888 <MUSART_u8IsRecieveBufferAvailable+0x198>)
 80037d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037da:	d108      	bne.n	80037ee <MUSART_u8IsRecieveBufferAvailable+0xfe>
 80037dc:	4b2b      	ldr	r3, [pc, #172]	; (800388c <MUSART_u8IsRecieveBufferAvailable+0x19c>)
 80037de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e6:	d102      	bne.n	80037ee <MUSART_u8IsRecieveBufferAvailable+0xfe>
		{
			Buffer_count=0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	81fb      	strh	r3, [r7, #14]
 80037ec:	e041      	b.n	8003872 <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
		else 
		{
			Buffer_count = BUFFER_SIZE;
 80037ee:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80037f2:	81fb      	strh	r3, [r7, #14]
 80037f4:	e03d      	b.n	8003872 <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
	}
	else if(USART_NUM == USART3)
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d13a      	bne.n	8003872 <MUSART_u8IsRecieveBufferAvailable+0x182>
	{
		if(GlobalUSART3_s16RecievedFront>GlobalUSART3_s16RecievedRear)
 80037fc:	4b24      	ldr	r3, [pc, #144]	; (8003890 <MUSART_u8IsRecieveBufferAvailable+0x1a0>)
 80037fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003802:	4b24      	ldr	r3, [pc, #144]	; (8003894 <MUSART_u8IsRecieveBufferAvailable+0x1a4>)
 8003804:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003808:	429a      	cmp	r2, r3
 800380a:	dd0a      	ble.n	8003822 <MUSART_u8IsRecieveBufferAvailable+0x132>
		{
			Buffer_count=GlobalUSART3_s16RecievedFront-GlobalUSART3_s16RecievedRear;
 800380c:	4b20      	ldr	r3, [pc, #128]	; (8003890 <MUSART_u8IsRecieveBufferAvailable+0x1a0>)
 800380e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003812:	b29a      	uxth	r2, r3
 8003814:	4b1f      	ldr	r3, [pc, #124]	; (8003894 <MUSART_u8IsRecieveBufferAvailable+0x1a4>)
 8003816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800381a:	b29b      	uxth	r3, r3
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	81fb      	strh	r3, [r7, #14]
 8003820:	e027      	b.n	8003872 <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
		else if(GlobalUSART3_s16RecievedFront<GlobalUSART3_s16RecievedRear)
 8003822:	4b1b      	ldr	r3, [pc, #108]	; (8003890 <MUSART_u8IsRecieveBufferAvailable+0x1a0>)
 8003824:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003828:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <MUSART_u8IsRecieveBufferAvailable+0x1a4>)
 800382a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800382e:	429a      	cmp	r2, r3
 8003830:	da0d      	bge.n	800384e <MUSART_u8IsRecieveBufferAvailable+0x15e>
		{
			Buffer_count = (BUFFER_SIZE - GlobalUSART3_s16RecievedRear)+ GlobalUSART3_s16RecievedFront;
 8003832:	4b17      	ldr	r3, [pc, #92]	; (8003890 <MUSART_u8IsRecieveBufferAvailable+0x1a0>)
 8003834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003838:	b29a      	uxth	r2, r3
 800383a:	4b16      	ldr	r3, [pc, #88]	; (8003894 <MUSART_u8IsRecieveBufferAvailable+0x1a4>)
 800383c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003840:	b29b      	uxth	r3, r3
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	b29b      	uxth	r3, r3
 8003846:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800384a:	81fb      	strh	r3, [r7, #14]
 800384c:	e011      	b.n	8003872 <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
		else if (GlobalUSART3_s16RecievedFront== -1 && GlobalUSART3_s16RecievedRear == -1)
 800384e:	4b10      	ldr	r3, [pc, #64]	; (8003890 <MUSART_u8IsRecieveBufferAvailable+0x1a0>)
 8003850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003858:	d108      	bne.n	800386c <MUSART_u8IsRecieveBufferAvailable+0x17c>
 800385a:	4b0e      	ldr	r3, [pc, #56]	; (8003894 <MUSART_u8IsRecieveBufferAvailable+0x1a4>)
 800385c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003864:	d102      	bne.n	800386c <MUSART_u8IsRecieveBufferAvailable+0x17c>
		{
			Buffer_count=0;
 8003866:	2300      	movs	r3, #0
 8003868:	81fb      	strh	r3, [r7, #14]
 800386a:	e002      	b.n	8003872 <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
		else 
		{
			Buffer_count = BUFFER_SIZE;
 800386c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003870:	81fb      	strh	r3, [r7, #14]
		}
	}
	return Buffer_count;
 8003872:	89fb      	ldrh	r3, [r7, #14]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	2000002c 	.word	0x2000002c
 8003884:	2000002e 	.word	0x2000002e
 8003888:	20000030 	.word	0x20000030
 800388c:	20000032 	.word	0x20000032
 8003890:	20000034 	.word	0x20000034
 8003894:	20000036 	.word	0x20000036

08003898 <MUSART_voidEnableUSART_RecieveInterrupt>:
		}
		USART[USART_NUM] -> DR = '\0';
		while(GET_BIT(USART[USART_NUM]->SR,TXE) == 0 );
}
void MUSART_voidEnableUSART_RecieveInterrupt(USART_T USART_NUM)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	71fb      	strb	r3, [r7, #7]
	SET_BIT(USART[USART_NUM]->CR[0],RXNIE);
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	4a07      	ldr	r2, [pc, #28]	; (80038c4 <MUSART_voidEnableUSART_RecieveInterrupt+0x2c>)
 80038a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	79fb      	ldrb	r3, [r7, #7]
 80038ae:	4905      	ldr	r1, [pc, #20]	; (80038c4 <MUSART_voidEnableUSART_RecieveInterrupt+0x2c>)
 80038b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038b4:	f042 0220 	orr.w	r2, r2, #32
 80038b8:	60da      	str	r2, [r3, #12]
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr
 80038c4:	20000020 	.word	0x20000020

080038c8 <USART1_IRQHandler>:
{
	CLR_BIT(USART[USART_NUM]->CR[0],RXNIE);
}
void USART1_IRQHandler(void)

{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
	if(GET_BIT(USART[0]->SR,RXNE) == 1)
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <USART1_IRQHandler+0x30>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	095b      	lsrs	r3, r3, #5
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d108      	bne.n	80038f0 <USART1_IRQHandler+0x28>
		/*if(MUSART_u8IsRecieveBufferAvailable(USART1) < BUFFER_SIZE)
		{
			GlobalUSART1_s16RecievedFront=(GlobalUSART1_s16RecievedFront+1)%BUFFER_SIZE;
			GlobalUSART1_u8RecievedValue[GlobalUSART1_s16RecievedFront] = USART[0]->DR ;
		}*/
		u8 returndata = USART[0]->DR ;
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <USART1_IRQHandler+0x30>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	71fb      	strb	r3, [r7, #7]
		USART1_CallBack(returndata);
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <USART1_IRQHandler+0x34>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	79fa      	ldrb	r2, [r7, #7]
 80038ec:	4610      	mov	r0, r2
 80038ee:	4798      	blx	r3
	}
}
 80038f0:	bf00      	nop
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	20000020 	.word	0x20000020
 80038fc:	200000f4 	.word	0x200000f4

08003900 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
	if(GET_BIT(USART[1]->SR,RXNE) == 1)
 8003904:	4b17      	ldr	r3, [pc, #92]	; (8003964 <USART2_IRQHandler+0x64>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b01      	cmp	r3, #1
 8003912:	d124      	bne.n	800395e <USART2_IRQHandler+0x5e>
	{
		if(MUSART_u8IsRecieveBufferAvailable(USART2) <BUFFER_SIZE)
 8003914:	2001      	movs	r0, #1
 8003916:	f7ff feeb 	bl	80036f0 <MUSART_u8IsRecieveBufferAvailable>
 800391a:	4603      	mov	r3, r0
 800391c:	461a      	mov	r2, r3
 800391e:	f240 53db 	movw	r3, #1499	; 0x5db
 8003922:	429a      	cmp	r2, r3
 8003924:	d81b      	bhi.n	800395e <USART2_IRQHandler+0x5e>
		{
			GlobalUSART2_s16RecievedFront=(GlobalUSART2_s16RecievedFront+1)%BUFFER_SIZE;
 8003926:	4b10      	ldr	r3, [pc, #64]	; (8003968 <USART2_IRQHandler+0x68>)
 8003928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800392c:	3301      	adds	r3, #1
 800392e:	4a0f      	ldr	r2, [pc, #60]	; (800396c <USART2_IRQHandler+0x6c>)
 8003930:	fb82 1203 	smull	r1, r2, r2, r3
 8003934:	1151      	asrs	r1, r2, #5
 8003936:	17da      	asrs	r2, r3, #31
 8003938:	1a8a      	subs	r2, r1, r2
 800393a:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800393e:	fb01 f202 	mul.w	r2, r1, r2
 8003942:	1a9a      	subs	r2, r3, r2
 8003944:	b212      	sxth	r2, r2
 8003946:	4b08      	ldr	r3, [pc, #32]	; (8003968 <USART2_IRQHandler+0x68>)
 8003948:	801a      	strh	r2, [r3, #0]
			GlobalUSART2_u8RecievedValue[GlobalUSART2_s16RecievedFront] = USART[1]->DR ;
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <USART2_IRQHandler+0x64>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <USART2_IRQHandler+0x68>)
 8003952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003956:	461a      	mov	r2, r3
 8003958:	b2c9      	uxtb	r1, r1
 800395a:	4b05      	ldr	r3, [pc, #20]	; (8003970 <USART2_IRQHandler+0x70>)
 800395c:	5499      	strb	r1, [r3, r2]
		}
	}
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000020 	.word	0x20000020
 8003968:	20000030 	.word	0x20000030
 800396c:	057619f1 	.word	0x057619f1
 8003970:	20000114 	.word	0x20000114

08003974 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
	if(GET_BIT(USART[2]->SR,RXNE) == 1)
 8003978:	4b17      	ldr	r3, [pc, #92]	; (80039d8 <USART3_IRQHandler+0x64>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b01      	cmp	r3, #1
 8003986:	d124      	bne.n	80039d2 <USART3_IRQHandler+0x5e>
	{
		if(MUSART_u8IsRecieveBufferAvailable(USART3) <BUFFER_SIZE)
 8003988:	2002      	movs	r0, #2
 800398a:	f7ff feb1 	bl	80036f0 <MUSART_u8IsRecieveBufferAvailable>
 800398e:	4603      	mov	r3, r0
 8003990:	461a      	mov	r2, r3
 8003992:	f240 53db 	movw	r3, #1499	; 0x5db
 8003996:	429a      	cmp	r2, r3
 8003998:	d81b      	bhi.n	80039d2 <USART3_IRQHandler+0x5e>
		{
			GlobalUSART3_s16RecievedFront=(GlobalUSART3_s16RecievedFront+1)%BUFFER_SIZE;
 800399a:	4b10      	ldr	r3, [pc, #64]	; (80039dc <USART3_IRQHandler+0x68>)
 800399c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039a0:	3301      	adds	r3, #1
 80039a2:	4a0f      	ldr	r2, [pc, #60]	; (80039e0 <USART3_IRQHandler+0x6c>)
 80039a4:	fb82 1203 	smull	r1, r2, r2, r3
 80039a8:	1151      	asrs	r1, r2, #5
 80039aa:	17da      	asrs	r2, r3, #31
 80039ac:	1a8a      	subs	r2, r1, r2
 80039ae:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80039b2:	fb01 f202 	mul.w	r2, r1, r2
 80039b6:	1a9a      	subs	r2, r3, r2
 80039b8:	b212      	sxth	r2, r2
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <USART3_IRQHandler+0x68>)
 80039bc:	801a      	strh	r2, [r3, #0]
			GlobalUSART3_u8RecievedValue[GlobalUSART3_s16RecievedFront] = USART[2]->DR ;
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <USART3_IRQHandler+0x64>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	6859      	ldr	r1, [r3, #4]
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <USART3_IRQHandler+0x68>)
 80039c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039ca:	461a      	mov	r2, r3
 80039cc:	b2c9      	uxtb	r1, r1
 80039ce:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <USART3_IRQHandler+0x70>)
 80039d0:	5499      	strb	r1, [r3, r2]
		}
	}
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000020 	.word	0x20000020
 80039dc:	20000034 	.word	0x20000034
 80039e0:	057619f1 	.word	0x057619f1
 80039e4:	200006f0 	.word	0x200006f0

080039e8 <main>:
u8 volatile temperature = 0;
u8 volatile BPM = 0;
u8 volatile speed=0;
u8 GlobalEncoder_u8Counter=0;
int main(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
	MRCC_voidPerClock_State(APB2 ,IOPA_PERIPHERAL ,PClock_enable );
 80039ee:	2201      	movs	r2, #1
 80039f0:	2102      	movs	r1, #2
 80039f2:	2002      	movs	r0, #2
 80039f4:	f7ff f8b0 	bl	8002b58 <MRCC_voidPerClock_State>
	MRCC_voidPerClock_State(APB2 ,IOPB_PERIPHERAL ,PClock_enable );
 80039f8:	2201      	movs	r2, #1
 80039fa:	2103      	movs	r1, #3
 80039fc:	2002      	movs	r0, #2
 80039fe:	f7ff f8ab 	bl	8002b58 <MRCC_voidPerClock_State>
	MRCC_voidPerClock_State(APB2, SPI1_PERIPHERAL, PClock_enable);
 8003a02:	2201      	movs	r2, #1
 8003a04:	210c      	movs	r1, #12
 8003a06:	2002      	movs	r0, #2
 8003a08:	f7ff f8a6 	bl	8002b58 <MRCC_voidPerClock_State>
	MRCC_voidPerClock_State(APB2 ,USART1_PERIPHERAL ,PClock_enable );
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	210e      	movs	r1, #14
 8003a10:	2002      	movs	r0, #2
 8003a12:	f7ff f8a1 	bl	8002b58 <MRCC_voidPerClock_State>
	MRCC_voidPerClock_State(APB1 ,USART2_PERIPHERAL ,PClock_enable );
 8003a16:	2201      	movs	r2, #1
 8003a18:	2111      	movs	r1, #17
 8003a1a:	2001      	movs	r0, #1
 8003a1c:	f7ff f89c 	bl	8002b58 <MRCC_voidPerClock_State>
	MRCC_voidPerClock_State(APB1 ,TIM3_PERIPHERAL ,PClock_enable );
 8003a20:	2201      	movs	r2, #1
 8003a22:	2101      	movs	r1, #1
 8003a24:	2001      	movs	r0, #1
 8003a26:	f7ff f897 	bl	8002b58 <MRCC_voidPerClock_State>
	MRCC_voidPerClock_State(APB1 ,TIM2_PERIPHERAL ,PClock_enable );
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	2001      	movs	r0, #1
 8003a30:	f7ff f892 	bl	8002b58 <MRCC_voidPerClock_State>

	/***********************************************************************************************/
	MRCC_voidInit			();
 8003a34:	f7ff f874 	bl	8002b20 <MRCC_voidInit>
	MSTK_voidInit 			();
 8003a38:	f7ff fbfc 	bl	8003234 <MSTK_voidInit>
	MNVIC_voidInit			();
 8003a3c:	f7fe fe52 	bl	80026e4 <MNVIC_voidInit>
	HMD_voidInit			();
 8003a40:	f7fe fcea 	bl	8002418 <HMD_voidInit>
	/*Node MCU pin*/
	//MGPIO_voidSetPinDirection   (GPIOA , PIN12  , INPUT_FLOATING);


	/*EXTI PIN Speed encoder */
	MGPIO_voidSetPinDirection(GPIOA , PIN15  , INPUT_PULL_UP_DOWN);
 8003a44:	2208      	movs	r2, #8
 8003a46:	210f      	movs	r1, #15
 8003a48:	2000      	movs	r0, #0
 8003a4a:	f7fd fa29 	bl	8000ea0 <MGPIO_voidSetPinDirection>
	MNVIC_voidEnableInterrupt(EXTI15_10);
 8003a4e:	2028      	movs	r0, #40	; 0x28
 8003a50:	f7fe fe56 	bl	8002700 <MNVIC_voidEnableInterrupt>
	MEXTI_voidSetCallBack	(EXTI_CallFuncCounterFunc);
 8003a54:	4839      	ldr	r0, [pc, #228]	; (8003b3c <main+0x154>)
 8003a56:	f7fd fc7f 	bl	8001358 <MEXTI_voidSetCallBack>
	MEXTI_voidSetExtiEdge	(MEXTI_LINE15 , MEXTI_FALLING_EDGE);
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	200f      	movs	r0, #15
 8003a5e:	f7fd fb8d 	bl	800117c <MEXTI_voidSetExtiEdge>
	MEXTI_voidSetEXTILinePin	(MEXTI_LINE15, EXTI_PORTA);
 8003a62:	2100      	movs	r1, #0
 8003a64:	200f      	movs	r0, #15
 8003a66:	f7fd fbed 	bl	8001244 <MEXTI_voidSetEXTILinePin>
	MEXTI_voidEnableExti	(MEXTI_LINE15);
 8003a6a:	200f      	movs	r0, #15
 8003a6c:	f7fd fb70 	bl	8001150 <MEXTI_voidEnableExti>
	/*initialize UART 1 to communicate with arduino*/
	MUSART_SetCallBack(return_uart1);
 8003a70:	4833      	ldr	r0, [pc, #204]	; (8003b40 <main+0x158>)
 8003a72:	f7ff fd7f 	bl	8003574 <MUSART_SetCallBack>
	MUSART_voidInit(USART1);
 8003a76:	2000      	movs	r0, #0
 8003a78:	f7ff fc8c 	bl	8003394 <MUSART_voidInit>
	MNVIC_voidEnableInterrupt(USART11);
 8003a7c:	2025      	movs	r0, #37	; 0x25
 8003a7e:	f7fe fe3f 	bl	8002700 <MNVIC_voidEnableInterrupt>
	MUSART_voidInit(USART2);
 8003a82:	2001      	movs	r0, #1
 8003a84:	f7ff fc86 	bl	8003394 <MUSART_voidInit>
	MNVIC_voidEnableInterrupt(USART22);
 8003a88:	2026      	movs	r0, #38	; 0x26
 8003a8a:	f7fe fe39 	bl	8002700 <MNVIC_voidEnableInterrupt>
/*	MUSART_voidInit(USART2);
	MNVIC_voidEnableInterrupt(USART11);*/

	/*initialize PWM for 38KHZ IR*/
	MPWM_voidInit(TIMER4, CH1,212);
 8003a8e:	22d4      	movs	r2, #212	; 0xd4
 8003a90:	2100      	movs	r1, #0
 8003a92:	2002      	movs	r0, #2
 8003a94:	f7fe fe56 	bl	8002744 <MPWM_voidInit>
	MPWM_SETValuesOfPWM(TIMER4, CH1, 106);
 8003a98:	226a      	movs	r2, #106	; 0x6a
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	2002      	movs	r0, #2
 8003a9e:	f7fe fff7 	bl	8002a90 <MPWM_SETValuesOfPWM>


	/*initialize timer3 for interrupt for speed encoder*/
	MNVIC_voidEnableInterrupt(TIM3);
 8003aa2:	201d      	movs	r0, #29
 8003aa4:	f7fe fe2c 	bl	8002700 <MNVIC_voidEnableInterrupt>
	MTIMER2_voidSetCallBack(timer_CallFuncCalcEq);
 8003aa8:	4826      	ldr	r0, [pc, #152]	; (8003b44 <main+0x15c>)
 8003aaa:	f7ff fc4f 	bl	800334c <MTIMER2_voidSetCallBack>
	MTIMER2_voidSetinterruptTimer();
 8003aae:	f7ff fc25 	bl	80032fc <MTIMER2_voidSetinterruptTimer>
	/*SPI TFT PINS*/
	MGPIO_voidSetPinDirection   (GPIOA , PIN6  , INPUT_FLOATING);
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	2106      	movs	r1, #6
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	f7fd f9f2 	bl	8000ea0 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection   (GPIOA , PIN5  , OUTPUT_SPEED_50MHZ_AFPP);
 8003abc:	220b      	movs	r2, #11
 8003abe:	2105      	movs	r1, #5
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	f7fd f9ed 	bl	8000ea0 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection   (GPIOA , PIN7  , OUTPUT_SPEED_50MHZ_AFPP);
 8003ac6:	220b      	movs	r2, #11
 8003ac8:	2107      	movs	r1, #7
 8003aca:	2000      	movs	r0, #0
 8003acc:	f7fd f9e8 	bl	8000ea0 <MGPIO_voidSetPinDirection>


	/*SPI TFT configuration*/

	SPI_config_t SPI1_config = { 1 , 0 , 0 , 0 , 0 , 1, 0 ,0 ,0 };    /* Loop forever */
 8003ad0:	4a1d      	ldr	r2, [pc, #116]	; (8003b48 <main+0x160>)
 8003ad2:	1d3b      	adds	r3, r7, #4
 8003ad4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ad6:	c303      	stmia	r3!, {r0, r1}
 8003ad8:	701a      	strb	r2, [r3, #0]
	SPI_u8ConfigureCh(SPI1 , &SPI1_config );
 8003ada:	1d3b      	adds	r3, r7, #4
 8003adc:	4619      	mov	r1, r3
 8003ade:	2000      	movs	r0, #0
 8003ae0:	f7ff f9aa 	bl	8002e38 <SPI_u8ConfigureCh>
	MSTK_voidSetBusyWait 		  (1000000);
 8003ae4:	4819      	ldr	r0, [pc, #100]	; (8003b4c <main+0x164>)
 8003ae6:	f7ff fbb1 	bl	800324c <MSTK_voidSetBusyWait>
	ILI9341_Init();
 8003aea:	f7fe f907 	bl	8001cfc <ILI9341_Init>

    u8 traffic=255;
 8003aee:	23ff      	movs	r3, #255	; 0xff
 8003af0:	70fb      	strb	r3, [r7, #3]
    u8 welcoming_flag=0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	73fb      	strb	r3, [r7, #15]
    ILI9341_WelcomingMessage();
 8003af6:	f7fd fe39 	bl	800176c <ILI9341_WelcomingMessage>
	while(1)
	{
		if(/*MGPIO_u8GetPinValue      (GPIOA , PIN12 ) == GPIO_HIGH*/1)
		{
			if(welcoming_flag == 1)
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d103      	bne.n	8003b08 <main+0x120>
			{
			    ILI9341_WelcomingMessage();
 8003b00:	f7fd fe34 	bl	800176c <ILI9341_WelcomingMessage>
			    welcoming_flag = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	73fb      	strb	r3, [r7, #15]
			}
			MUSART_u8GetRecievedValue(USART2, &traffic);
 8003b08:	1cfb      	adds	r3, r7, #3
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	f7ff fd3f 	bl	8003590 <MUSART_u8GetRecievedValue>
			ILI9341_ShowParametersV2(BPM, temperature, speed);
 8003b12:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <main+0x168>)
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	4a0e      	ldr	r2, [pc, #56]	; (8003b54 <main+0x16c>)
 8003b1a:	7812      	ldrb	r2, [r2, #0]
 8003b1c:	b2d1      	uxtb	r1, r2
 8003b1e:	4a0e      	ldr	r2, [pc, #56]	; (8003b58 <main+0x170>)
 8003b20:	7812      	ldrb	r2, [r2, #0]
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fd fe5d 	bl	80017e4 <ILI9341_ShowParametersV2>
			ILI9341_ShowRoadSigns(traffic);
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fd fef7 	bl	8001920 <ILI9341_ShowRoadSigns>
			traffic=255;
 8003b32:	23ff      	movs	r3, #255	; 0xff
 8003b34:	70fb      	strb	r3, [r7, #3]
			HMD_voidForward();
 8003b36:	f7fe fc8b 	bl	8002450 <HMD_voidForward>
		if(/*MGPIO_u8GetPinValue      (GPIOA , PIN12 ) == GPIO_HIGH*/1)
 8003b3a:	e7de      	b.n	8003afa <main+0x112>
 8003b3c:	08003c51 	.word	0x08003c51
 8003b40:	08003b5d 	.word	0x08003b5d
 8003b44:	08003bc1 	.word	0x08003bc1
 8003b48:	080046f4 	.word	0x080046f4
 8003b4c:	000f4240 	.word	0x000f4240
 8003b50:	200000f9 	.word	0x200000f9
 8003b54:	200000f8 	.word	0x200000f8
 8003b58:	200000fa 	.word	0x200000fa

08003b5c <return_uart1>:
			welcoming_flag = 1;
		}
	}
}
void return_uart1(u8 data)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	71fb      	strb	r3, [r7, #7]
	static u8 flag=0;
	if (flag == 1)
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <return_uart1+0x58>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d106      	bne.n	8003b7c <return_uart1+0x20>
	{
		BPM = data;
 8003b6e:	4a12      	ldr	r2, [pc, #72]	; (8003bb8 <return_uart1+0x5c>)
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	7013      	strb	r3, [r2, #0]
		flag = 0;
 8003b74:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <return_uart1+0x58>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	701a      	strb	r2, [r3, #0]
 8003b7a:	e009      	b.n	8003b90 <return_uart1+0x34>
	}
	else if(flag == 2)
 8003b7c:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <return_uart1+0x58>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d105      	bne.n	8003b90 <return_uart1+0x34>
	{
		temperature = data;
 8003b84:	4a0d      	ldr	r2, [pc, #52]	; (8003bbc <return_uart1+0x60>)
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	7013      	strb	r3, [r2, #0]
		flag = 0;
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <return_uart1+0x58>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
	}
	if(data == '*')
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	2b2a      	cmp	r3, #42	; 0x2a
 8003b94:	d103      	bne.n	8003b9e <return_uart1+0x42>
	{
		flag=1;
 8003b96:	4b07      	ldr	r3, [pc, #28]	; (8003bb4 <return_uart1+0x58>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	701a      	strb	r2, [r3, #0]
	else if(data == '&')
	{
		flag=2;
	}

}
 8003b9c:	e005      	b.n	8003baa <return_uart1+0x4e>
	else if(data == '&')
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	2b26      	cmp	r3, #38	; 0x26
 8003ba2:	d102      	bne.n	8003baa <return_uart1+0x4e>
		flag=2;
 8003ba4:	4b03      	ldr	r3, [pc, #12]	; (8003bb4 <return_uart1+0x58>)
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	701a      	strb	r2, [r3, #0]
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr
 8003bb4:	200000fc 	.word	0x200000fc
 8003bb8:	200000f9 	.word	0x200000f9
 8003bbc:	200000f8 	.word	0x200000f8

08003bc0 <timer_CallFuncCalcEq>:
void	timer_CallFuncCalcEq	(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
	speed = ((GlobalEncoder_u8Counter*207.345115137/3) *.036)/1.5;
 8003bc4:	4b1e      	ldr	r3, [pc, #120]	; (8003c40 <timer_CallFuncCalcEq+0x80>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fc fcd7 	bl	800057c <__aeabi_i2d>
 8003bce:	a318      	add	r3, pc, #96	; (adr r3, 8003c30 <timer_CallFuncCalcEq+0x70>)
 8003bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd4:	f7fc fd3c 	bl	8000650 <__aeabi_dmul>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4610      	mov	r0, r2
 8003bde:	4619      	mov	r1, r3
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	4b17      	ldr	r3, [pc, #92]	; (8003c44 <timer_CallFuncCalcEq+0x84>)
 8003be6:	f7fc fe5d 	bl	80008a4 <__aeabi_ddiv>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	4610      	mov	r0, r2
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	a311      	add	r3, pc, #68	; (adr r3, 8003c38 <timer_CallFuncCalcEq+0x78>)
 8003bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf8:	f7fc fd2a 	bl	8000650 <__aeabi_dmul>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4610      	mov	r0, r2
 8003c02:	4619      	mov	r1, r3
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <timer_CallFuncCalcEq+0x88>)
 8003c0a:	f7fc fe4b 	bl	80008a4 <__aeabi_ddiv>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4610      	mov	r0, r2
 8003c14:	4619      	mov	r1, r3
 8003c16:	f7fc ff2d 	bl	8000a74 <__aeabi_d2uiz>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <timer_CallFuncCalcEq+0x8c>)
 8003c20:	701a      	strb	r2, [r3, #0]
	GlobalEncoder_u8Counter=0;
 8003c22:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <timer_CallFuncCalcEq+0x80>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	701a      	strb	r2, [r3, #0]
}
 8003c28:	bf00      	nop
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	f3af 8000 	nop.w
 8003c30:	2ee658a0 	.word	0x2ee658a0
 8003c34:	4069eb0b 	.word	0x4069eb0b
 8003c38:	8d4fdf3b 	.word	0x8d4fdf3b
 8003c3c:	3fa26e97 	.word	0x3fa26e97
 8003c40:	200000fb 	.word	0x200000fb
 8003c44:	40080000 	.word	0x40080000
 8003c48:	3ff80000 	.word	0x3ff80000
 8003c4c:	200000fa 	.word	0x200000fa

08003c50 <EXTI_CallFuncCounterFunc>:
void EXTI_CallFuncCounterFunc(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
	GlobalEncoder_u8Counter++;
 8003c54:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <EXTI_CallFuncCounterFunc+0x18>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	4b02      	ldr	r3, [pc, #8]	; (8003c68 <EXTI_CallFuncCounterFunc+0x18>)
 8003c5e:	701a      	strb	r2, [r3, #0]
}
 8003c60:	bf00      	nop
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr
 8003c68:	200000fb 	.word	0x200000fb

08003c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c74:	4a14      	ldr	r2, [pc, #80]	; (8003cc8 <_sbrk+0x5c>)
 8003c76:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <_sbrk+0x60>)
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c80:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <_sbrk+0x64>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d102      	bne.n	8003c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c88:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <_sbrk+0x64>)
 8003c8a:	4a12      	ldr	r2, [pc, #72]	; (8003cd4 <_sbrk+0x68>)
 8003c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c8e:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <_sbrk+0x64>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d207      	bcs.n	8003cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c9c:	f000 f846 	bl	8003d2c <__errno>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	220c      	movs	r2, #12
 8003ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8003caa:	e009      	b.n	8003cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cac:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <_sbrk+0x64>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cb2:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <_sbrk+0x64>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4413      	add	r3, r2
 8003cba:	4a05      	ldr	r2, [pc, #20]	; (8003cd0 <_sbrk+0x64>)
 8003cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20005000 	.word	0x20005000
 8003ccc:	00000400 	.word	0x00000400
 8003cd0:	20000100 	.word	0x20000100
 8003cd4:	200012b8 	.word	0x200012b8

08003cd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003cd8:	480d      	ldr	r0, [pc, #52]	; (8003d10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003cda:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003cdc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ce0:	480c      	ldr	r0, [pc, #48]	; (8003d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ce2:	490d      	ldr	r1, [pc, #52]	; (8003d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ce4:	4a0d      	ldr	r2, [pc, #52]	; (8003d1c <LoopForever+0xe>)
  movs r3, #0
 8003ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ce8:	e002      	b.n	8003cf0 <LoopCopyDataInit>

08003cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cee:	3304      	adds	r3, #4

08003cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cf4:	d3f9      	bcc.n	8003cea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cf6:	4a0a      	ldr	r2, [pc, #40]	; (8003d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003cf8:	4c0a      	ldr	r4, [pc, #40]	; (8003d24 <LoopForever+0x16>)
  movs r3, #0
 8003cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cfc:	e001      	b.n	8003d02 <LoopFillZerobss>

08003cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d00:	3204      	adds	r2, #4

08003d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d04:	d3fb      	bcc.n	8003cfe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003d06:	f000 f817 	bl	8003d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d0a:	f7ff fe6d 	bl	80039e8 <main>

08003d0e <LoopForever>:

LoopForever:
    b LoopForever
 8003d0e:	e7fe      	b.n	8003d0e <LoopForever>
  ldr   r0, =_estack
 8003d10:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d18:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8003d1c:	080061e4 	.word	0x080061e4
  ldr r2, =_sbss
 8003d20:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8003d24:	200012b8 	.word	0x200012b8

08003d28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d28:	e7fe      	b.n	8003d28 <ADC1_2_IRQHandler>
	...

08003d2c <__errno>:
 8003d2c:	4b01      	ldr	r3, [pc, #4]	; (8003d34 <__errno+0x8>)
 8003d2e:	6818      	ldr	r0, [r3, #0]
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20000038 	.word	0x20000038

08003d38 <__libc_init_array>:
 8003d38:	b570      	push	{r4, r5, r6, lr}
 8003d3a:	2600      	movs	r6, #0
 8003d3c:	4d0c      	ldr	r5, [pc, #48]	; (8003d70 <__libc_init_array+0x38>)
 8003d3e:	4c0d      	ldr	r4, [pc, #52]	; (8003d74 <__libc_init_array+0x3c>)
 8003d40:	1b64      	subs	r4, r4, r5
 8003d42:	10a4      	asrs	r4, r4, #2
 8003d44:	42a6      	cmp	r6, r4
 8003d46:	d109      	bne.n	8003d5c <__libc_init_array+0x24>
 8003d48:	f000 fc54 	bl	80045f4 <_init>
 8003d4c:	2600      	movs	r6, #0
 8003d4e:	4d0a      	ldr	r5, [pc, #40]	; (8003d78 <__libc_init_array+0x40>)
 8003d50:	4c0a      	ldr	r4, [pc, #40]	; (8003d7c <__libc_init_array+0x44>)
 8003d52:	1b64      	subs	r4, r4, r5
 8003d54:	10a4      	asrs	r4, r4, #2
 8003d56:	42a6      	cmp	r6, r4
 8003d58:	d105      	bne.n	8003d66 <__libc_init_array+0x2e>
 8003d5a:	bd70      	pop	{r4, r5, r6, pc}
 8003d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d60:	4798      	blx	r3
 8003d62:	3601      	adds	r6, #1
 8003d64:	e7ee      	b.n	8003d44 <__libc_init_array+0xc>
 8003d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d6a:	4798      	blx	r3
 8003d6c:	3601      	adds	r6, #1
 8003d6e:	e7f2      	b.n	8003d56 <__libc_init_array+0x1e>
 8003d70:	080061dc 	.word	0x080061dc
 8003d74:	080061dc 	.word	0x080061dc
 8003d78:	080061dc 	.word	0x080061dc
 8003d7c:	080061e0 	.word	0x080061e0

08003d80 <siprintf>:
 8003d80:	b40e      	push	{r1, r2, r3}
 8003d82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d86:	b500      	push	{lr}
 8003d88:	b09c      	sub	sp, #112	; 0x70
 8003d8a:	ab1d      	add	r3, sp, #116	; 0x74
 8003d8c:	9002      	str	r0, [sp, #8]
 8003d8e:	9006      	str	r0, [sp, #24]
 8003d90:	9107      	str	r1, [sp, #28]
 8003d92:	9104      	str	r1, [sp, #16]
 8003d94:	4808      	ldr	r0, [pc, #32]	; (8003db8 <siprintf+0x38>)
 8003d96:	4909      	ldr	r1, [pc, #36]	; (8003dbc <siprintf+0x3c>)
 8003d98:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d9c:	9105      	str	r1, [sp, #20]
 8003d9e:	6800      	ldr	r0, [r0, #0]
 8003da0:	a902      	add	r1, sp, #8
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	f000 f868 	bl	8003e78 <_svfiprintf_r>
 8003da8:	2200      	movs	r2, #0
 8003daa:	9b02      	ldr	r3, [sp, #8]
 8003dac:	701a      	strb	r2, [r3, #0]
 8003dae:	b01c      	add	sp, #112	; 0x70
 8003db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003db4:	b003      	add	sp, #12
 8003db6:	4770      	bx	lr
 8003db8:	20000038 	.word	0x20000038
 8003dbc:	ffff0208 	.word	0xffff0208

08003dc0 <__ssputs_r>:
 8003dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc4:	688e      	ldr	r6, [r1, #8]
 8003dc6:	4682      	mov	sl, r0
 8003dc8:	429e      	cmp	r6, r3
 8003dca:	460c      	mov	r4, r1
 8003dcc:	4690      	mov	r8, r2
 8003dce:	461f      	mov	r7, r3
 8003dd0:	d838      	bhi.n	8003e44 <__ssputs_r+0x84>
 8003dd2:	898a      	ldrh	r2, [r1, #12]
 8003dd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003dd8:	d032      	beq.n	8003e40 <__ssputs_r+0x80>
 8003dda:	6825      	ldr	r5, [r4, #0]
 8003ddc:	6909      	ldr	r1, [r1, #16]
 8003dde:	3301      	adds	r3, #1
 8003de0:	eba5 0901 	sub.w	r9, r5, r1
 8003de4:	6965      	ldr	r5, [r4, #20]
 8003de6:	444b      	add	r3, r9
 8003de8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003dec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003df0:	106d      	asrs	r5, r5, #1
 8003df2:	429d      	cmp	r5, r3
 8003df4:	bf38      	it	cc
 8003df6:	461d      	movcc	r5, r3
 8003df8:	0553      	lsls	r3, r2, #21
 8003dfa:	d531      	bpl.n	8003e60 <__ssputs_r+0xa0>
 8003dfc:	4629      	mov	r1, r5
 8003dfe:	f000 fb53 	bl	80044a8 <_malloc_r>
 8003e02:	4606      	mov	r6, r0
 8003e04:	b950      	cbnz	r0, 8003e1c <__ssputs_r+0x5c>
 8003e06:	230c      	movs	r3, #12
 8003e08:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0c:	f8ca 3000 	str.w	r3, [sl]
 8003e10:	89a3      	ldrh	r3, [r4, #12]
 8003e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e16:	81a3      	strh	r3, [r4, #12]
 8003e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e1c:	464a      	mov	r2, r9
 8003e1e:	6921      	ldr	r1, [r4, #16]
 8003e20:	f000 face 	bl	80043c0 <memcpy>
 8003e24:	89a3      	ldrh	r3, [r4, #12]
 8003e26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e2e:	81a3      	strh	r3, [r4, #12]
 8003e30:	6126      	str	r6, [r4, #16]
 8003e32:	444e      	add	r6, r9
 8003e34:	6026      	str	r6, [r4, #0]
 8003e36:	463e      	mov	r6, r7
 8003e38:	6165      	str	r5, [r4, #20]
 8003e3a:	eba5 0509 	sub.w	r5, r5, r9
 8003e3e:	60a5      	str	r5, [r4, #8]
 8003e40:	42be      	cmp	r6, r7
 8003e42:	d900      	bls.n	8003e46 <__ssputs_r+0x86>
 8003e44:	463e      	mov	r6, r7
 8003e46:	4632      	mov	r2, r6
 8003e48:	4641      	mov	r1, r8
 8003e4a:	6820      	ldr	r0, [r4, #0]
 8003e4c:	f000 fac6 	bl	80043dc <memmove>
 8003e50:	68a3      	ldr	r3, [r4, #8]
 8003e52:	6822      	ldr	r2, [r4, #0]
 8003e54:	1b9b      	subs	r3, r3, r6
 8003e56:	4432      	add	r2, r6
 8003e58:	2000      	movs	r0, #0
 8003e5a:	60a3      	str	r3, [r4, #8]
 8003e5c:	6022      	str	r2, [r4, #0]
 8003e5e:	e7db      	b.n	8003e18 <__ssputs_r+0x58>
 8003e60:	462a      	mov	r2, r5
 8003e62:	f000 fb7b 	bl	800455c <_realloc_r>
 8003e66:	4606      	mov	r6, r0
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	d1e1      	bne.n	8003e30 <__ssputs_r+0x70>
 8003e6c:	4650      	mov	r0, sl
 8003e6e:	6921      	ldr	r1, [r4, #16]
 8003e70:	f000 face 	bl	8004410 <_free_r>
 8003e74:	e7c7      	b.n	8003e06 <__ssputs_r+0x46>
	...

08003e78 <_svfiprintf_r>:
 8003e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e7c:	4698      	mov	r8, r3
 8003e7e:	898b      	ldrh	r3, [r1, #12]
 8003e80:	4607      	mov	r7, r0
 8003e82:	061b      	lsls	r3, r3, #24
 8003e84:	460d      	mov	r5, r1
 8003e86:	4614      	mov	r4, r2
 8003e88:	b09d      	sub	sp, #116	; 0x74
 8003e8a:	d50e      	bpl.n	8003eaa <_svfiprintf_r+0x32>
 8003e8c:	690b      	ldr	r3, [r1, #16]
 8003e8e:	b963      	cbnz	r3, 8003eaa <_svfiprintf_r+0x32>
 8003e90:	2140      	movs	r1, #64	; 0x40
 8003e92:	f000 fb09 	bl	80044a8 <_malloc_r>
 8003e96:	6028      	str	r0, [r5, #0]
 8003e98:	6128      	str	r0, [r5, #16]
 8003e9a:	b920      	cbnz	r0, 8003ea6 <_svfiprintf_r+0x2e>
 8003e9c:	230c      	movs	r3, #12
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea4:	e0d1      	b.n	800404a <_svfiprintf_r+0x1d2>
 8003ea6:	2340      	movs	r3, #64	; 0x40
 8003ea8:	616b      	str	r3, [r5, #20]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	9309      	str	r3, [sp, #36]	; 0x24
 8003eae:	2320      	movs	r3, #32
 8003eb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003eb4:	2330      	movs	r3, #48	; 0x30
 8003eb6:	f04f 0901 	mov.w	r9, #1
 8003eba:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ebe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004064 <_svfiprintf_r+0x1ec>
 8003ec2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ec6:	4623      	mov	r3, r4
 8003ec8:	469a      	mov	sl, r3
 8003eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ece:	b10a      	cbz	r2, 8003ed4 <_svfiprintf_r+0x5c>
 8003ed0:	2a25      	cmp	r2, #37	; 0x25
 8003ed2:	d1f9      	bne.n	8003ec8 <_svfiprintf_r+0x50>
 8003ed4:	ebba 0b04 	subs.w	fp, sl, r4
 8003ed8:	d00b      	beq.n	8003ef2 <_svfiprintf_r+0x7a>
 8003eda:	465b      	mov	r3, fp
 8003edc:	4622      	mov	r2, r4
 8003ede:	4629      	mov	r1, r5
 8003ee0:	4638      	mov	r0, r7
 8003ee2:	f7ff ff6d 	bl	8003dc0 <__ssputs_r>
 8003ee6:	3001      	adds	r0, #1
 8003ee8:	f000 80aa 	beq.w	8004040 <_svfiprintf_r+0x1c8>
 8003eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003eee:	445a      	add	r2, fp
 8003ef0:	9209      	str	r2, [sp, #36]	; 0x24
 8003ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 80a2 	beq.w	8004040 <_svfiprintf_r+0x1c8>
 8003efc:	2300      	movs	r3, #0
 8003efe:	f04f 32ff 	mov.w	r2, #4294967295
 8003f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f06:	f10a 0a01 	add.w	sl, sl, #1
 8003f0a:	9304      	str	r3, [sp, #16]
 8003f0c:	9307      	str	r3, [sp, #28]
 8003f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f12:	931a      	str	r3, [sp, #104]	; 0x68
 8003f14:	4654      	mov	r4, sl
 8003f16:	2205      	movs	r2, #5
 8003f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f1c:	4851      	ldr	r0, [pc, #324]	; (8004064 <_svfiprintf_r+0x1ec>)
 8003f1e:	f000 fa41 	bl	80043a4 <memchr>
 8003f22:	9a04      	ldr	r2, [sp, #16]
 8003f24:	b9d8      	cbnz	r0, 8003f5e <_svfiprintf_r+0xe6>
 8003f26:	06d0      	lsls	r0, r2, #27
 8003f28:	bf44      	itt	mi
 8003f2a:	2320      	movmi	r3, #32
 8003f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f30:	0711      	lsls	r1, r2, #28
 8003f32:	bf44      	itt	mi
 8003f34:	232b      	movmi	r3, #43	; 0x2b
 8003f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f40:	d015      	beq.n	8003f6e <_svfiprintf_r+0xf6>
 8003f42:	4654      	mov	r4, sl
 8003f44:	2000      	movs	r0, #0
 8003f46:	f04f 0c0a 	mov.w	ip, #10
 8003f4a:	9a07      	ldr	r2, [sp, #28]
 8003f4c:	4621      	mov	r1, r4
 8003f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f52:	3b30      	subs	r3, #48	; 0x30
 8003f54:	2b09      	cmp	r3, #9
 8003f56:	d94e      	bls.n	8003ff6 <_svfiprintf_r+0x17e>
 8003f58:	b1b0      	cbz	r0, 8003f88 <_svfiprintf_r+0x110>
 8003f5a:	9207      	str	r2, [sp, #28]
 8003f5c:	e014      	b.n	8003f88 <_svfiprintf_r+0x110>
 8003f5e:	eba0 0308 	sub.w	r3, r0, r8
 8003f62:	fa09 f303 	lsl.w	r3, r9, r3
 8003f66:	4313      	orrs	r3, r2
 8003f68:	46a2      	mov	sl, r4
 8003f6a:	9304      	str	r3, [sp, #16]
 8003f6c:	e7d2      	b.n	8003f14 <_svfiprintf_r+0x9c>
 8003f6e:	9b03      	ldr	r3, [sp, #12]
 8003f70:	1d19      	adds	r1, r3, #4
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	9103      	str	r1, [sp, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	bfbb      	ittet	lt
 8003f7a:	425b      	neglt	r3, r3
 8003f7c:	f042 0202 	orrlt.w	r2, r2, #2
 8003f80:	9307      	strge	r3, [sp, #28]
 8003f82:	9307      	strlt	r3, [sp, #28]
 8003f84:	bfb8      	it	lt
 8003f86:	9204      	strlt	r2, [sp, #16]
 8003f88:	7823      	ldrb	r3, [r4, #0]
 8003f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8003f8c:	d10c      	bne.n	8003fa8 <_svfiprintf_r+0x130>
 8003f8e:	7863      	ldrb	r3, [r4, #1]
 8003f90:	2b2a      	cmp	r3, #42	; 0x2a
 8003f92:	d135      	bne.n	8004000 <_svfiprintf_r+0x188>
 8003f94:	9b03      	ldr	r3, [sp, #12]
 8003f96:	3402      	adds	r4, #2
 8003f98:	1d1a      	adds	r2, r3, #4
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	9203      	str	r2, [sp, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	bfb8      	it	lt
 8003fa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fa6:	9305      	str	r3, [sp, #20]
 8003fa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004074 <_svfiprintf_r+0x1fc>
 8003fac:	2203      	movs	r2, #3
 8003fae:	4650      	mov	r0, sl
 8003fb0:	7821      	ldrb	r1, [r4, #0]
 8003fb2:	f000 f9f7 	bl	80043a4 <memchr>
 8003fb6:	b140      	cbz	r0, 8003fca <_svfiprintf_r+0x152>
 8003fb8:	2340      	movs	r3, #64	; 0x40
 8003fba:	eba0 000a 	sub.w	r0, r0, sl
 8003fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8003fc2:	9b04      	ldr	r3, [sp, #16]
 8003fc4:	3401      	adds	r4, #1
 8003fc6:	4303      	orrs	r3, r0
 8003fc8:	9304      	str	r3, [sp, #16]
 8003fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fce:	2206      	movs	r2, #6
 8003fd0:	4825      	ldr	r0, [pc, #148]	; (8004068 <_svfiprintf_r+0x1f0>)
 8003fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fd6:	f000 f9e5 	bl	80043a4 <memchr>
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	d038      	beq.n	8004050 <_svfiprintf_r+0x1d8>
 8003fde:	4b23      	ldr	r3, [pc, #140]	; (800406c <_svfiprintf_r+0x1f4>)
 8003fe0:	bb1b      	cbnz	r3, 800402a <_svfiprintf_r+0x1b2>
 8003fe2:	9b03      	ldr	r3, [sp, #12]
 8003fe4:	3307      	adds	r3, #7
 8003fe6:	f023 0307 	bic.w	r3, r3, #7
 8003fea:	3308      	adds	r3, #8
 8003fec:	9303      	str	r3, [sp, #12]
 8003fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ff0:	4433      	add	r3, r6
 8003ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff4:	e767      	b.n	8003ec6 <_svfiprintf_r+0x4e>
 8003ff6:	460c      	mov	r4, r1
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ffe:	e7a5      	b.n	8003f4c <_svfiprintf_r+0xd4>
 8004000:	2300      	movs	r3, #0
 8004002:	f04f 0c0a 	mov.w	ip, #10
 8004006:	4619      	mov	r1, r3
 8004008:	3401      	adds	r4, #1
 800400a:	9305      	str	r3, [sp, #20]
 800400c:	4620      	mov	r0, r4
 800400e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004012:	3a30      	subs	r2, #48	; 0x30
 8004014:	2a09      	cmp	r2, #9
 8004016:	d903      	bls.n	8004020 <_svfiprintf_r+0x1a8>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0c5      	beq.n	8003fa8 <_svfiprintf_r+0x130>
 800401c:	9105      	str	r1, [sp, #20]
 800401e:	e7c3      	b.n	8003fa8 <_svfiprintf_r+0x130>
 8004020:	4604      	mov	r4, r0
 8004022:	2301      	movs	r3, #1
 8004024:	fb0c 2101 	mla	r1, ip, r1, r2
 8004028:	e7f0      	b.n	800400c <_svfiprintf_r+0x194>
 800402a:	ab03      	add	r3, sp, #12
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	462a      	mov	r2, r5
 8004030:	4638      	mov	r0, r7
 8004032:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <_svfiprintf_r+0x1f8>)
 8004034:	a904      	add	r1, sp, #16
 8004036:	f3af 8000 	nop.w
 800403a:	1c42      	adds	r2, r0, #1
 800403c:	4606      	mov	r6, r0
 800403e:	d1d6      	bne.n	8003fee <_svfiprintf_r+0x176>
 8004040:	89ab      	ldrh	r3, [r5, #12]
 8004042:	065b      	lsls	r3, r3, #25
 8004044:	f53f af2c 	bmi.w	8003ea0 <_svfiprintf_r+0x28>
 8004048:	9809      	ldr	r0, [sp, #36]	; 0x24
 800404a:	b01d      	add	sp, #116	; 0x74
 800404c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004050:	ab03      	add	r3, sp, #12
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	462a      	mov	r2, r5
 8004056:	4638      	mov	r0, r7
 8004058:	4b05      	ldr	r3, [pc, #20]	; (8004070 <_svfiprintf_r+0x1f8>)
 800405a:	a904      	add	r1, sp, #16
 800405c:	f000 f87c 	bl	8004158 <_printf_i>
 8004060:	e7eb      	b.n	800403a <_svfiprintf_r+0x1c2>
 8004062:	bf00      	nop
 8004064:	080061a8 	.word	0x080061a8
 8004068:	080061b2 	.word	0x080061b2
 800406c:	00000000 	.word	0x00000000
 8004070:	08003dc1 	.word	0x08003dc1
 8004074:	080061ae 	.word	0x080061ae

08004078 <_printf_common>:
 8004078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800407c:	4616      	mov	r6, r2
 800407e:	4699      	mov	r9, r3
 8004080:	688a      	ldr	r2, [r1, #8]
 8004082:	690b      	ldr	r3, [r1, #16]
 8004084:	4607      	mov	r7, r0
 8004086:	4293      	cmp	r3, r2
 8004088:	bfb8      	it	lt
 800408a:	4613      	movlt	r3, r2
 800408c:	6033      	str	r3, [r6, #0]
 800408e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004092:	460c      	mov	r4, r1
 8004094:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004098:	b10a      	cbz	r2, 800409e <_printf_common+0x26>
 800409a:	3301      	adds	r3, #1
 800409c:	6033      	str	r3, [r6, #0]
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	0699      	lsls	r1, r3, #26
 80040a2:	bf42      	ittt	mi
 80040a4:	6833      	ldrmi	r3, [r6, #0]
 80040a6:	3302      	addmi	r3, #2
 80040a8:	6033      	strmi	r3, [r6, #0]
 80040aa:	6825      	ldr	r5, [r4, #0]
 80040ac:	f015 0506 	ands.w	r5, r5, #6
 80040b0:	d106      	bne.n	80040c0 <_printf_common+0x48>
 80040b2:	f104 0a19 	add.w	sl, r4, #25
 80040b6:	68e3      	ldr	r3, [r4, #12]
 80040b8:	6832      	ldr	r2, [r6, #0]
 80040ba:	1a9b      	subs	r3, r3, r2
 80040bc:	42ab      	cmp	r3, r5
 80040be:	dc28      	bgt.n	8004112 <_printf_common+0x9a>
 80040c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040c4:	1e13      	subs	r3, r2, #0
 80040c6:	6822      	ldr	r2, [r4, #0]
 80040c8:	bf18      	it	ne
 80040ca:	2301      	movne	r3, #1
 80040cc:	0692      	lsls	r2, r2, #26
 80040ce:	d42d      	bmi.n	800412c <_printf_common+0xb4>
 80040d0:	4649      	mov	r1, r9
 80040d2:	4638      	mov	r0, r7
 80040d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040d8:	47c0      	blx	r8
 80040da:	3001      	adds	r0, #1
 80040dc:	d020      	beq.n	8004120 <_printf_common+0xa8>
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	68e5      	ldr	r5, [r4, #12]
 80040e2:	f003 0306 	and.w	r3, r3, #6
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	bf18      	it	ne
 80040ea:	2500      	movne	r5, #0
 80040ec:	6832      	ldr	r2, [r6, #0]
 80040ee:	f04f 0600 	mov.w	r6, #0
 80040f2:	68a3      	ldr	r3, [r4, #8]
 80040f4:	bf08      	it	eq
 80040f6:	1aad      	subeq	r5, r5, r2
 80040f8:	6922      	ldr	r2, [r4, #16]
 80040fa:	bf08      	it	eq
 80040fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004100:	4293      	cmp	r3, r2
 8004102:	bfc4      	itt	gt
 8004104:	1a9b      	subgt	r3, r3, r2
 8004106:	18ed      	addgt	r5, r5, r3
 8004108:	341a      	adds	r4, #26
 800410a:	42b5      	cmp	r5, r6
 800410c:	d11a      	bne.n	8004144 <_printf_common+0xcc>
 800410e:	2000      	movs	r0, #0
 8004110:	e008      	b.n	8004124 <_printf_common+0xac>
 8004112:	2301      	movs	r3, #1
 8004114:	4652      	mov	r2, sl
 8004116:	4649      	mov	r1, r9
 8004118:	4638      	mov	r0, r7
 800411a:	47c0      	blx	r8
 800411c:	3001      	adds	r0, #1
 800411e:	d103      	bne.n	8004128 <_printf_common+0xb0>
 8004120:	f04f 30ff 	mov.w	r0, #4294967295
 8004124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004128:	3501      	adds	r5, #1
 800412a:	e7c4      	b.n	80040b6 <_printf_common+0x3e>
 800412c:	2030      	movs	r0, #48	; 0x30
 800412e:	18e1      	adds	r1, r4, r3
 8004130:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800413a:	4422      	add	r2, r4
 800413c:	3302      	adds	r3, #2
 800413e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004142:	e7c5      	b.n	80040d0 <_printf_common+0x58>
 8004144:	2301      	movs	r3, #1
 8004146:	4622      	mov	r2, r4
 8004148:	4649      	mov	r1, r9
 800414a:	4638      	mov	r0, r7
 800414c:	47c0      	blx	r8
 800414e:	3001      	adds	r0, #1
 8004150:	d0e6      	beq.n	8004120 <_printf_common+0xa8>
 8004152:	3601      	adds	r6, #1
 8004154:	e7d9      	b.n	800410a <_printf_common+0x92>
	...

08004158 <_printf_i>:
 8004158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800415c:	460c      	mov	r4, r1
 800415e:	7e27      	ldrb	r7, [r4, #24]
 8004160:	4691      	mov	r9, r2
 8004162:	2f78      	cmp	r7, #120	; 0x78
 8004164:	4680      	mov	r8, r0
 8004166:	469a      	mov	sl, r3
 8004168:	990c      	ldr	r1, [sp, #48]	; 0x30
 800416a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800416e:	d807      	bhi.n	8004180 <_printf_i+0x28>
 8004170:	2f62      	cmp	r7, #98	; 0x62
 8004172:	d80a      	bhi.n	800418a <_printf_i+0x32>
 8004174:	2f00      	cmp	r7, #0
 8004176:	f000 80d9 	beq.w	800432c <_printf_i+0x1d4>
 800417a:	2f58      	cmp	r7, #88	; 0x58
 800417c:	f000 80a4 	beq.w	80042c8 <_printf_i+0x170>
 8004180:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004184:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004188:	e03a      	b.n	8004200 <_printf_i+0xa8>
 800418a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800418e:	2b15      	cmp	r3, #21
 8004190:	d8f6      	bhi.n	8004180 <_printf_i+0x28>
 8004192:	a001      	add	r0, pc, #4	; (adr r0, 8004198 <_printf_i+0x40>)
 8004194:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004198:	080041f1 	.word	0x080041f1
 800419c:	08004205 	.word	0x08004205
 80041a0:	08004181 	.word	0x08004181
 80041a4:	08004181 	.word	0x08004181
 80041a8:	08004181 	.word	0x08004181
 80041ac:	08004181 	.word	0x08004181
 80041b0:	08004205 	.word	0x08004205
 80041b4:	08004181 	.word	0x08004181
 80041b8:	08004181 	.word	0x08004181
 80041bc:	08004181 	.word	0x08004181
 80041c0:	08004181 	.word	0x08004181
 80041c4:	08004313 	.word	0x08004313
 80041c8:	08004235 	.word	0x08004235
 80041cc:	080042f5 	.word	0x080042f5
 80041d0:	08004181 	.word	0x08004181
 80041d4:	08004181 	.word	0x08004181
 80041d8:	08004335 	.word	0x08004335
 80041dc:	08004181 	.word	0x08004181
 80041e0:	08004235 	.word	0x08004235
 80041e4:	08004181 	.word	0x08004181
 80041e8:	08004181 	.word	0x08004181
 80041ec:	080042fd 	.word	0x080042fd
 80041f0:	680b      	ldr	r3, [r1, #0]
 80041f2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041f6:	1d1a      	adds	r2, r3, #4
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	600a      	str	r2, [r1, #0]
 80041fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004200:	2301      	movs	r3, #1
 8004202:	e0a4      	b.n	800434e <_printf_i+0x1f6>
 8004204:	6825      	ldr	r5, [r4, #0]
 8004206:	6808      	ldr	r0, [r1, #0]
 8004208:	062e      	lsls	r6, r5, #24
 800420a:	f100 0304 	add.w	r3, r0, #4
 800420e:	d50a      	bpl.n	8004226 <_printf_i+0xce>
 8004210:	6805      	ldr	r5, [r0, #0]
 8004212:	600b      	str	r3, [r1, #0]
 8004214:	2d00      	cmp	r5, #0
 8004216:	da03      	bge.n	8004220 <_printf_i+0xc8>
 8004218:	232d      	movs	r3, #45	; 0x2d
 800421a:	426d      	negs	r5, r5
 800421c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004220:	230a      	movs	r3, #10
 8004222:	485e      	ldr	r0, [pc, #376]	; (800439c <_printf_i+0x244>)
 8004224:	e019      	b.n	800425a <_printf_i+0x102>
 8004226:	f015 0f40 	tst.w	r5, #64	; 0x40
 800422a:	6805      	ldr	r5, [r0, #0]
 800422c:	600b      	str	r3, [r1, #0]
 800422e:	bf18      	it	ne
 8004230:	b22d      	sxthne	r5, r5
 8004232:	e7ef      	b.n	8004214 <_printf_i+0xbc>
 8004234:	680b      	ldr	r3, [r1, #0]
 8004236:	6825      	ldr	r5, [r4, #0]
 8004238:	1d18      	adds	r0, r3, #4
 800423a:	6008      	str	r0, [r1, #0]
 800423c:	0628      	lsls	r0, r5, #24
 800423e:	d501      	bpl.n	8004244 <_printf_i+0xec>
 8004240:	681d      	ldr	r5, [r3, #0]
 8004242:	e002      	b.n	800424a <_printf_i+0xf2>
 8004244:	0669      	lsls	r1, r5, #25
 8004246:	d5fb      	bpl.n	8004240 <_printf_i+0xe8>
 8004248:	881d      	ldrh	r5, [r3, #0]
 800424a:	2f6f      	cmp	r7, #111	; 0x6f
 800424c:	bf0c      	ite	eq
 800424e:	2308      	moveq	r3, #8
 8004250:	230a      	movne	r3, #10
 8004252:	4852      	ldr	r0, [pc, #328]	; (800439c <_printf_i+0x244>)
 8004254:	2100      	movs	r1, #0
 8004256:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800425a:	6866      	ldr	r6, [r4, #4]
 800425c:	2e00      	cmp	r6, #0
 800425e:	bfa8      	it	ge
 8004260:	6821      	ldrge	r1, [r4, #0]
 8004262:	60a6      	str	r6, [r4, #8]
 8004264:	bfa4      	itt	ge
 8004266:	f021 0104 	bicge.w	r1, r1, #4
 800426a:	6021      	strge	r1, [r4, #0]
 800426c:	b90d      	cbnz	r5, 8004272 <_printf_i+0x11a>
 800426e:	2e00      	cmp	r6, #0
 8004270:	d04d      	beq.n	800430e <_printf_i+0x1b6>
 8004272:	4616      	mov	r6, r2
 8004274:	fbb5 f1f3 	udiv	r1, r5, r3
 8004278:	fb03 5711 	mls	r7, r3, r1, r5
 800427c:	5dc7      	ldrb	r7, [r0, r7]
 800427e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004282:	462f      	mov	r7, r5
 8004284:	42bb      	cmp	r3, r7
 8004286:	460d      	mov	r5, r1
 8004288:	d9f4      	bls.n	8004274 <_printf_i+0x11c>
 800428a:	2b08      	cmp	r3, #8
 800428c:	d10b      	bne.n	80042a6 <_printf_i+0x14e>
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	07df      	lsls	r7, r3, #31
 8004292:	d508      	bpl.n	80042a6 <_printf_i+0x14e>
 8004294:	6923      	ldr	r3, [r4, #16]
 8004296:	6861      	ldr	r1, [r4, #4]
 8004298:	4299      	cmp	r1, r3
 800429a:	bfde      	ittt	le
 800429c:	2330      	movle	r3, #48	; 0x30
 800429e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042a6:	1b92      	subs	r2, r2, r6
 80042a8:	6122      	str	r2, [r4, #16]
 80042aa:	464b      	mov	r3, r9
 80042ac:	4621      	mov	r1, r4
 80042ae:	4640      	mov	r0, r8
 80042b0:	f8cd a000 	str.w	sl, [sp]
 80042b4:	aa03      	add	r2, sp, #12
 80042b6:	f7ff fedf 	bl	8004078 <_printf_common>
 80042ba:	3001      	adds	r0, #1
 80042bc:	d14c      	bne.n	8004358 <_printf_i+0x200>
 80042be:	f04f 30ff 	mov.w	r0, #4294967295
 80042c2:	b004      	add	sp, #16
 80042c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c8:	4834      	ldr	r0, [pc, #208]	; (800439c <_printf_i+0x244>)
 80042ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042ce:	680e      	ldr	r6, [r1, #0]
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80042d6:	061f      	lsls	r7, r3, #24
 80042d8:	600e      	str	r6, [r1, #0]
 80042da:	d514      	bpl.n	8004306 <_printf_i+0x1ae>
 80042dc:	07d9      	lsls	r1, r3, #31
 80042de:	bf44      	itt	mi
 80042e0:	f043 0320 	orrmi.w	r3, r3, #32
 80042e4:	6023      	strmi	r3, [r4, #0]
 80042e6:	b91d      	cbnz	r5, 80042f0 <_printf_i+0x198>
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	f023 0320 	bic.w	r3, r3, #32
 80042ee:	6023      	str	r3, [r4, #0]
 80042f0:	2310      	movs	r3, #16
 80042f2:	e7af      	b.n	8004254 <_printf_i+0xfc>
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	f043 0320 	orr.w	r3, r3, #32
 80042fa:	6023      	str	r3, [r4, #0]
 80042fc:	2378      	movs	r3, #120	; 0x78
 80042fe:	4828      	ldr	r0, [pc, #160]	; (80043a0 <_printf_i+0x248>)
 8004300:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004304:	e7e3      	b.n	80042ce <_printf_i+0x176>
 8004306:	065e      	lsls	r6, r3, #25
 8004308:	bf48      	it	mi
 800430a:	b2ad      	uxthmi	r5, r5
 800430c:	e7e6      	b.n	80042dc <_printf_i+0x184>
 800430e:	4616      	mov	r6, r2
 8004310:	e7bb      	b.n	800428a <_printf_i+0x132>
 8004312:	680b      	ldr	r3, [r1, #0]
 8004314:	6826      	ldr	r6, [r4, #0]
 8004316:	1d1d      	adds	r5, r3, #4
 8004318:	6960      	ldr	r0, [r4, #20]
 800431a:	600d      	str	r5, [r1, #0]
 800431c:	0635      	lsls	r5, r6, #24
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	d501      	bpl.n	8004326 <_printf_i+0x1ce>
 8004322:	6018      	str	r0, [r3, #0]
 8004324:	e002      	b.n	800432c <_printf_i+0x1d4>
 8004326:	0671      	lsls	r1, r6, #25
 8004328:	d5fb      	bpl.n	8004322 <_printf_i+0x1ca>
 800432a:	8018      	strh	r0, [r3, #0]
 800432c:	2300      	movs	r3, #0
 800432e:	4616      	mov	r6, r2
 8004330:	6123      	str	r3, [r4, #16]
 8004332:	e7ba      	b.n	80042aa <_printf_i+0x152>
 8004334:	680b      	ldr	r3, [r1, #0]
 8004336:	1d1a      	adds	r2, r3, #4
 8004338:	600a      	str	r2, [r1, #0]
 800433a:	681e      	ldr	r6, [r3, #0]
 800433c:	2100      	movs	r1, #0
 800433e:	4630      	mov	r0, r6
 8004340:	6862      	ldr	r2, [r4, #4]
 8004342:	f000 f82f 	bl	80043a4 <memchr>
 8004346:	b108      	cbz	r0, 800434c <_printf_i+0x1f4>
 8004348:	1b80      	subs	r0, r0, r6
 800434a:	6060      	str	r0, [r4, #4]
 800434c:	6863      	ldr	r3, [r4, #4]
 800434e:	6123      	str	r3, [r4, #16]
 8004350:	2300      	movs	r3, #0
 8004352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004356:	e7a8      	b.n	80042aa <_printf_i+0x152>
 8004358:	4632      	mov	r2, r6
 800435a:	4649      	mov	r1, r9
 800435c:	4640      	mov	r0, r8
 800435e:	6923      	ldr	r3, [r4, #16]
 8004360:	47d0      	blx	sl
 8004362:	3001      	adds	r0, #1
 8004364:	d0ab      	beq.n	80042be <_printf_i+0x166>
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	079b      	lsls	r3, r3, #30
 800436a:	d413      	bmi.n	8004394 <_printf_i+0x23c>
 800436c:	68e0      	ldr	r0, [r4, #12]
 800436e:	9b03      	ldr	r3, [sp, #12]
 8004370:	4298      	cmp	r0, r3
 8004372:	bfb8      	it	lt
 8004374:	4618      	movlt	r0, r3
 8004376:	e7a4      	b.n	80042c2 <_printf_i+0x16a>
 8004378:	2301      	movs	r3, #1
 800437a:	4632      	mov	r2, r6
 800437c:	4649      	mov	r1, r9
 800437e:	4640      	mov	r0, r8
 8004380:	47d0      	blx	sl
 8004382:	3001      	adds	r0, #1
 8004384:	d09b      	beq.n	80042be <_printf_i+0x166>
 8004386:	3501      	adds	r5, #1
 8004388:	68e3      	ldr	r3, [r4, #12]
 800438a:	9903      	ldr	r1, [sp, #12]
 800438c:	1a5b      	subs	r3, r3, r1
 800438e:	42ab      	cmp	r3, r5
 8004390:	dcf2      	bgt.n	8004378 <_printf_i+0x220>
 8004392:	e7eb      	b.n	800436c <_printf_i+0x214>
 8004394:	2500      	movs	r5, #0
 8004396:	f104 0619 	add.w	r6, r4, #25
 800439a:	e7f5      	b.n	8004388 <_printf_i+0x230>
 800439c:	080061b9 	.word	0x080061b9
 80043a0:	080061ca 	.word	0x080061ca

080043a4 <memchr>:
 80043a4:	4603      	mov	r3, r0
 80043a6:	b510      	push	{r4, lr}
 80043a8:	b2c9      	uxtb	r1, r1
 80043aa:	4402      	add	r2, r0
 80043ac:	4293      	cmp	r3, r2
 80043ae:	4618      	mov	r0, r3
 80043b0:	d101      	bne.n	80043b6 <memchr+0x12>
 80043b2:	2000      	movs	r0, #0
 80043b4:	e003      	b.n	80043be <memchr+0x1a>
 80043b6:	7804      	ldrb	r4, [r0, #0]
 80043b8:	3301      	adds	r3, #1
 80043ba:	428c      	cmp	r4, r1
 80043bc:	d1f6      	bne.n	80043ac <memchr+0x8>
 80043be:	bd10      	pop	{r4, pc}

080043c0 <memcpy>:
 80043c0:	440a      	add	r2, r1
 80043c2:	4291      	cmp	r1, r2
 80043c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80043c8:	d100      	bne.n	80043cc <memcpy+0xc>
 80043ca:	4770      	bx	lr
 80043cc:	b510      	push	{r4, lr}
 80043ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043d2:	4291      	cmp	r1, r2
 80043d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043d8:	d1f9      	bne.n	80043ce <memcpy+0xe>
 80043da:	bd10      	pop	{r4, pc}

080043dc <memmove>:
 80043dc:	4288      	cmp	r0, r1
 80043de:	b510      	push	{r4, lr}
 80043e0:	eb01 0402 	add.w	r4, r1, r2
 80043e4:	d902      	bls.n	80043ec <memmove+0x10>
 80043e6:	4284      	cmp	r4, r0
 80043e8:	4623      	mov	r3, r4
 80043ea:	d807      	bhi.n	80043fc <memmove+0x20>
 80043ec:	1e43      	subs	r3, r0, #1
 80043ee:	42a1      	cmp	r1, r4
 80043f0:	d008      	beq.n	8004404 <memmove+0x28>
 80043f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043fa:	e7f8      	b.n	80043ee <memmove+0x12>
 80043fc:	4601      	mov	r1, r0
 80043fe:	4402      	add	r2, r0
 8004400:	428a      	cmp	r2, r1
 8004402:	d100      	bne.n	8004406 <memmove+0x2a>
 8004404:	bd10      	pop	{r4, pc}
 8004406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800440a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800440e:	e7f7      	b.n	8004400 <memmove+0x24>

08004410 <_free_r>:
 8004410:	b538      	push	{r3, r4, r5, lr}
 8004412:	4605      	mov	r5, r0
 8004414:	2900      	cmp	r1, #0
 8004416:	d043      	beq.n	80044a0 <_free_r+0x90>
 8004418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800441c:	1f0c      	subs	r4, r1, #4
 800441e:	2b00      	cmp	r3, #0
 8004420:	bfb8      	it	lt
 8004422:	18e4      	addlt	r4, r4, r3
 8004424:	f000 f8d0 	bl	80045c8 <__malloc_lock>
 8004428:	4a1e      	ldr	r2, [pc, #120]	; (80044a4 <_free_r+0x94>)
 800442a:	6813      	ldr	r3, [r2, #0]
 800442c:	4610      	mov	r0, r2
 800442e:	b933      	cbnz	r3, 800443e <_free_r+0x2e>
 8004430:	6063      	str	r3, [r4, #4]
 8004432:	6014      	str	r4, [r2, #0]
 8004434:	4628      	mov	r0, r5
 8004436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800443a:	f000 b8cb 	b.w	80045d4 <__malloc_unlock>
 800443e:	42a3      	cmp	r3, r4
 8004440:	d90a      	bls.n	8004458 <_free_r+0x48>
 8004442:	6821      	ldr	r1, [r4, #0]
 8004444:	1862      	adds	r2, r4, r1
 8004446:	4293      	cmp	r3, r2
 8004448:	bf01      	itttt	eq
 800444a:	681a      	ldreq	r2, [r3, #0]
 800444c:	685b      	ldreq	r3, [r3, #4]
 800444e:	1852      	addeq	r2, r2, r1
 8004450:	6022      	streq	r2, [r4, #0]
 8004452:	6063      	str	r3, [r4, #4]
 8004454:	6004      	str	r4, [r0, #0]
 8004456:	e7ed      	b.n	8004434 <_free_r+0x24>
 8004458:	461a      	mov	r2, r3
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	b10b      	cbz	r3, 8004462 <_free_r+0x52>
 800445e:	42a3      	cmp	r3, r4
 8004460:	d9fa      	bls.n	8004458 <_free_r+0x48>
 8004462:	6811      	ldr	r1, [r2, #0]
 8004464:	1850      	adds	r0, r2, r1
 8004466:	42a0      	cmp	r0, r4
 8004468:	d10b      	bne.n	8004482 <_free_r+0x72>
 800446a:	6820      	ldr	r0, [r4, #0]
 800446c:	4401      	add	r1, r0
 800446e:	1850      	adds	r0, r2, r1
 8004470:	4283      	cmp	r3, r0
 8004472:	6011      	str	r1, [r2, #0]
 8004474:	d1de      	bne.n	8004434 <_free_r+0x24>
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	4401      	add	r1, r0
 800447c:	6011      	str	r1, [r2, #0]
 800447e:	6053      	str	r3, [r2, #4]
 8004480:	e7d8      	b.n	8004434 <_free_r+0x24>
 8004482:	d902      	bls.n	800448a <_free_r+0x7a>
 8004484:	230c      	movs	r3, #12
 8004486:	602b      	str	r3, [r5, #0]
 8004488:	e7d4      	b.n	8004434 <_free_r+0x24>
 800448a:	6820      	ldr	r0, [r4, #0]
 800448c:	1821      	adds	r1, r4, r0
 800448e:	428b      	cmp	r3, r1
 8004490:	bf01      	itttt	eq
 8004492:	6819      	ldreq	r1, [r3, #0]
 8004494:	685b      	ldreq	r3, [r3, #4]
 8004496:	1809      	addeq	r1, r1, r0
 8004498:	6021      	streq	r1, [r4, #0]
 800449a:	6063      	str	r3, [r4, #4]
 800449c:	6054      	str	r4, [r2, #4]
 800449e:	e7c9      	b.n	8004434 <_free_r+0x24>
 80044a0:	bd38      	pop	{r3, r4, r5, pc}
 80044a2:	bf00      	nop
 80044a4:	20000104 	.word	0x20000104

080044a8 <_malloc_r>:
 80044a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044aa:	1ccd      	adds	r5, r1, #3
 80044ac:	f025 0503 	bic.w	r5, r5, #3
 80044b0:	3508      	adds	r5, #8
 80044b2:	2d0c      	cmp	r5, #12
 80044b4:	bf38      	it	cc
 80044b6:	250c      	movcc	r5, #12
 80044b8:	2d00      	cmp	r5, #0
 80044ba:	4606      	mov	r6, r0
 80044bc:	db01      	blt.n	80044c2 <_malloc_r+0x1a>
 80044be:	42a9      	cmp	r1, r5
 80044c0:	d903      	bls.n	80044ca <_malloc_r+0x22>
 80044c2:	230c      	movs	r3, #12
 80044c4:	6033      	str	r3, [r6, #0]
 80044c6:	2000      	movs	r0, #0
 80044c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044ca:	f000 f87d 	bl	80045c8 <__malloc_lock>
 80044ce:	4921      	ldr	r1, [pc, #132]	; (8004554 <_malloc_r+0xac>)
 80044d0:	680a      	ldr	r2, [r1, #0]
 80044d2:	4614      	mov	r4, r2
 80044d4:	b99c      	cbnz	r4, 80044fe <_malloc_r+0x56>
 80044d6:	4f20      	ldr	r7, [pc, #128]	; (8004558 <_malloc_r+0xb0>)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	b923      	cbnz	r3, 80044e6 <_malloc_r+0x3e>
 80044dc:	4621      	mov	r1, r4
 80044de:	4630      	mov	r0, r6
 80044e0:	f000 f862 	bl	80045a8 <_sbrk_r>
 80044e4:	6038      	str	r0, [r7, #0]
 80044e6:	4629      	mov	r1, r5
 80044e8:	4630      	mov	r0, r6
 80044ea:	f000 f85d 	bl	80045a8 <_sbrk_r>
 80044ee:	1c43      	adds	r3, r0, #1
 80044f0:	d123      	bne.n	800453a <_malloc_r+0x92>
 80044f2:	230c      	movs	r3, #12
 80044f4:	4630      	mov	r0, r6
 80044f6:	6033      	str	r3, [r6, #0]
 80044f8:	f000 f86c 	bl	80045d4 <__malloc_unlock>
 80044fc:	e7e3      	b.n	80044c6 <_malloc_r+0x1e>
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	1b5b      	subs	r3, r3, r5
 8004502:	d417      	bmi.n	8004534 <_malloc_r+0x8c>
 8004504:	2b0b      	cmp	r3, #11
 8004506:	d903      	bls.n	8004510 <_malloc_r+0x68>
 8004508:	6023      	str	r3, [r4, #0]
 800450a:	441c      	add	r4, r3
 800450c:	6025      	str	r5, [r4, #0]
 800450e:	e004      	b.n	800451a <_malloc_r+0x72>
 8004510:	6863      	ldr	r3, [r4, #4]
 8004512:	42a2      	cmp	r2, r4
 8004514:	bf0c      	ite	eq
 8004516:	600b      	streq	r3, [r1, #0]
 8004518:	6053      	strne	r3, [r2, #4]
 800451a:	4630      	mov	r0, r6
 800451c:	f000 f85a 	bl	80045d4 <__malloc_unlock>
 8004520:	f104 000b 	add.w	r0, r4, #11
 8004524:	1d23      	adds	r3, r4, #4
 8004526:	f020 0007 	bic.w	r0, r0, #7
 800452a:	1ac2      	subs	r2, r0, r3
 800452c:	d0cc      	beq.n	80044c8 <_malloc_r+0x20>
 800452e:	1a1b      	subs	r3, r3, r0
 8004530:	50a3      	str	r3, [r4, r2]
 8004532:	e7c9      	b.n	80044c8 <_malloc_r+0x20>
 8004534:	4622      	mov	r2, r4
 8004536:	6864      	ldr	r4, [r4, #4]
 8004538:	e7cc      	b.n	80044d4 <_malloc_r+0x2c>
 800453a:	1cc4      	adds	r4, r0, #3
 800453c:	f024 0403 	bic.w	r4, r4, #3
 8004540:	42a0      	cmp	r0, r4
 8004542:	d0e3      	beq.n	800450c <_malloc_r+0x64>
 8004544:	1a21      	subs	r1, r4, r0
 8004546:	4630      	mov	r0, r6
 8004548:	f000 f82e 	bl	80045a8 <_sbrk_r>
 800454c:	3001      	adds	r0, #1
 800454e:	d1dd      	bne.n	800450c <_malloc_r+0x64>
 8004550:	e7cf      	b.n	80044f2 <_malloc_r+0x4a>
 8004552:	bf00      	nop
 8004554:	20000104 	.word	0x20000104
 8004558:	20000108 	.word	0x20000108

0800455c <_realloc_r>:
 800455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455e:	4607      	mov	r7, r0
 8004560:	4614      	mov	r4, r2
 8004562:	460e      	mov	r6, r1
 8004564:	b921      	cbnz	r1, 8004570 <_realloc_r+0x14>
 8004566:	4611      	mov	r1, r2
 8004568:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800456c:	f7ff bf9c 	b.w	80044a8 <_malloc_r>
 8004570:	b922      	cbnz	r2, 800457c <_realloc_r+0x20>
 8004572:	f7ff ff4d 	bl	8004410 <_free_r>
 8004576:	4625      	mov	r5, r4
 8004578:	4628      	mov	r0, r5
 800457a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800457c:	f000 f830 	bl	80045e0 <_malloc_usable_size_r>
 8004580:	42a0      	cmp	r0, r4
 8004582:	d20f      	bcs.n	80045a4 <_realloc_r+0x48>
 8004584:	4621      	mov	r1, r4
 8004586:	4638      	mov	r0, r7
 8004588:	f7ff ff8e 	bl	80044a8 <_malloc_r>
 800458c:	4605      	mov	r5, r0
 800458e:	2800      	cmp	r0, #0
 8004590:	d0f2      	beq.n	8004578 <_realloc_r+0x1c>
 8004592:	4631      	mov	r1, r6
 8004594:	4622      	mov	r2, r4
 8004596:	f7ff ff13 	bl	80043c0 <memcpy>
 800459a:	4631      	mov	r1, r6
 800459c:	4638      	mov	r0, r7
 800459e:	f7ff ff37 	bl	8004410 <_free_r>
 80045a2:	e7e9      	b.n	8004578 <_realloc_r+0x1c>
 80045a4:	4635      	mov	r5, r6
 80045a6:	e7e7      	b.n	8004578 <_realloc_r+0x1c>

080045a8 <_sbrk_r>:
 80045a8:	b538      	push	{r3, r4, r5, lr}
 80045aa:	2300      	movs	r3, #0
 80045ac:	4d05      	ldr	r5, [pc, #20]	; (80045c4 <_sbrk_r+0x1c>)
 80045ae:	4604      	mov	r4, r0
 80045b0:	4608      	mov	r0, r1
 80045b2:	602b      	str	r3, [r5, #0]
 80045b4:	f7ff fb5a 	bl	8003c6c <_sbrk>
 80045b8:	1c43      	adds	r3, r0, #1
 80045ba:	d102      	bne.n	80045c2 <_sbrk_r+0x1a>
 80045bc:	682b      	ldr	r3, [r5, #0]
 80045be:	b103      	cbz	r3, 80045c2 <_sbrk_r+0x1a>
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	bd38      	pop	{r3, r4, r5, pc}
 80045c4:	200012a8 	.word	0x200012a8

080045c8 <__malloc_lock>:
 80045c8:	4801      	ldr	r0, [pc, #4]	; (80045d0 <__malloc_lock+0x8>)
 80045ca:	f000 b811 	b.w	80045f0 <__retarget_lock_acquire_recursive>
 80045ce:	bf00      	nop
 80045d0:	200012b0 	.word	0x200012b0

080045d4 <__malloc_unlock>:
 80045d4:	4801      	ldr	r0, [pc, #4]	; (80045dc <__malloc_unlock+0x8>)
 80045d6:	f000 b80c 	b.w	80045f2 <__retarget_lock_release_recursive>
 80045da:	bf00      	nop
 80045dc:	200012b0 	.word	0x200012b0

080045e0 <_malloc_usable_size_r>:
 80045e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045e4:	1f18      	subs	r0, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	bfbc      	itt	lt
 80045ea:	580b      	ldrlt	r3, [r1, r0]
 80045ec:	18c0      	addlt	r0, r0, r3
 80045ee:	4770      	bx	lr

080045f0 <__retarget_lock_acquire_recursive>:
 80045f0:	4770      	bx	lr

080045f2 <__retarget_lock_release_recursive>:
 80045f2:	4770      	bx	lr

080045f4 <_init>:
 80045f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f6:	bf00      	nop
 80045f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045fa:	bc08      	pop	{r3}
 80045fc:	469e      	mov	lr, r3
 80045fe:	4770      	bx	lr

08004600 <_fini>:
 8004600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004602:	bf00      	nop
 8004604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004606:	bc08      	pop	{r3}
 8004608:	469e      	mov	lr, r3
 800460a:	4770      	bx	lr
